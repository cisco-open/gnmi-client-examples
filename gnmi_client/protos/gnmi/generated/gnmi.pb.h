// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnmi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gnmi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gnmi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/descriptor.pb.h>
#include "gnmi_ext.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gnmi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gnmi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gnmi_2eproto;
namespace gnmi {
class CapabilityRequest;
struct CapabilityRequestDefaultTypeInternal;
extern CapabilityRequestDefaultTypeInternal _CapabilityRequest_default_instance_;
class CapabilityResponse;
struct CapabilityResponseDefaultTypeInternal;
extern CapabilityResponseDefaultTypeInternal _CapabilityResponse_default_instance_;
class Decimal64;
struct Decimal64DefaultTypeInternal;
extern Decimal64DefaultTypeInternal _Decimal64_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
struct GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class ModelData;
struct ModelDataDefaultTypeInternal;
extern ModelDataDefaultTypeInternal _ModelData_default_instance_;
class Notification;
struct NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class Path;
struct PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathElem;
struct PathElemDefaultTypeInternal;
extern PathElemDefaultTypeInternal _PathElem_default_instance_;
class PathElem_KeyEntry_DoNotUse;
struct PathElem_KeyEntry_DoNotUseDefaultTypeInternal;
extern PathElem_KeyEntry_DoNotUseDefaultTypeInternal _PathElem_KeyEntry_DoNotUse_default_instance_;
class Poll;
struct PollDefaultTypeInternal;
extern PollDefaultTypeInternal _Poll_default_instance_;
class QOSMarking;
struct QOSMarkingDefaultTypeInternal;
extern QOSMarkingDefaultTypeInternal _QOSMarking_default_instance_;
class ScalarArray;
struct ScalarArrayDefaultTypeInternal;
extern ScalarArrayDefaultTypeInternal _ScalarArray_default_instance_;
class SetRequest;
struct SetRequestDefaultTypeInternal;
extern SetRequestDefaultTypeInternal _SetRequest_default_instance_;
class SetResponse;
struct SetResponseDefaultTypeInternal;
extern SetResponseDefaultTypeInternal _SetResponse_default_instance_;
class SubscribeRequest;
struct SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class SubscribeResponse;
struct SubscribeResponseDefaultTypeInternal;
extern SubscribeResponseDefaultTypeInternal _SubscribeResponse_default_instance_;
class Subscription;
struct SubscriptionDefaultTypeInternal;
extern SubscriptionDefaultTypeInternal _Subscription_default_instance_;
class SubscriptionList;
struct SubscriptionListDefaultTypeInternal;
extern SubscriptionListDefaultTypeInternal _SubscriptionList_default_instance_;
class TypedValue;
struct TypedValueDefaultTypeInternal;
extern TypedValueDefaultTypeInternal _TypedValue_default_instance_;
class Update;
struct UpdateDefaultTypeInternal;
extern UpdateDefaultTypeInternal _Update_default_instance_;
class UpdateResult;
struct UpdateResultDefaultTypeInternal;
extern UpdateResultDefaultTypeInternal _UpdateResult_default_instance_;
class Value;
struct ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace gnmi
PROTOBUF_NAMESPACE_OPEN
template<> ::gnmi::CapabilityRequest* Arena::CreateMaybeMessage<::gnmi::CapabilityRequest>(Arena*);
template<> ::gnmi::CapabilityResponse* Arena::CreateMaybeMessage<::gnmi::CapabilityResponse>(Arena*);
template<> ::gnmi::Decimal64* Arena::CreateMaybeMessage<::gnmi::Decimal64>(Arena*);
template<> ::gnmi::Error* Arena::CreateMaybeMessage<::gnmi::Error>(Arena*);
template<> ::gnmi::GetRequest* Arena::CreateMaybeMessage<::gnmi::GetRequest>(Arena*);
template<> ::gnmi::GetResponse* Arena::CreateMaybeMessage<::gnmi::GetResponse>(Arena*);
template<> ::gnmi::ModelData* Arena::CreateMaybeMessage<::gnmi::ModelData>(Arena*);
template<> ::gnmi::Notification* Arena::CreateMaybeMessage<::gnmi::Notification>(Arena*);
template<> ::gnmi::Path* Arena::CreateMaybeMessage<::gnmi::Path>(Arena*);
template<> ::gnmi::PathElem* Arena::CreateMaybeMessage<::gnmi::PathElem>(Arena*);
template<> ::gnmi::PathElem_KeyEntry_DoNotUse* Arena::CreateMaybeMessage<::gnmi::PathElem_KeyEntry_DoNotUse>(Arena*);
template<> ::gnmi::Poll* Arena::CreateMaybeMessage<::gnmi::Poll>(Arena*);
template<> ::gnmi::QOSMarking* Arena::CreateMaybeMessage<::gnmi::QOSMarking>(Arena*);
template<> ::gnmi::ScalarArray* Arena::CreateMaybeMessage<::gnmi::ScalarArray>(Arena*);
template<> ::gnmi::SetRequest* Arena::CreateMaybeMessage<::gnmi::SetRequest>(Arena*);
template<> ::gnmi::SetResponse* Arena::CreateMaybeMessage<::gnmi::SetResponse>(Arena*);
template<> ::gnmi::SubscribeRequest* Arena::CreateMaybeMessage<::gnmi::SubscribeRequest>(Arena*);
template<> ::gnmi::SubscribeResponse* Arena::CreateMaybeMessage<::gnmi::SubscribeResponse>(Arena*);
template<> ::gnmi::Subscription* Arena::CreateMaybeMessage<::gnmi::Subscription>(Arena*);
template<> ::gnmi::SubscriptionList* Arena::CreateMaybeMessage<::gnmi::SubscriptionList>(Arena*);
template<> ::gnmi::TypedValue* Arena::CreateMaybeMessage<::gnmi::TypedValue>(Arena*);
template<> ::gnmi::Update* Arena::CreateMaybeMessage<::gnmi::Update>(Arena*);
template<> ::gnmi::UpdateResult* Arena::CreateMaybeMessage<::gnmi::UpdateResult>(Arena*);
template<> ::gnmi::Value* Arena::CreateMaybeMessage<::gnmi::Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gnmi {

enum SubscriptionList_Mode : int {
  SubscriptionList_Mode_STREAM = 0,
  SubscriptionList_Mode_ONCE = 1,
  SubscriptionList_Mode_POLL = 2,
  SubscriptionList_Mode_SubscriptionList_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SubscriptionList_Mode_SubscriptionList_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SubscriptionList_Mode_IsValid(int value);
constexpr SubscriptionList_Mode SubscriptionList_Mode_Mode_MIN = SubscriptionList_Mode_STREAM;
constexpr SubscriptionList_Mode SubscriptionList_Mode_Mode_MAX = SubscriptionList_Mode_POLL;
constexpr int SubscriptionList_Mode_Mode_ARRAYSIZE = SubscriptionList_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionList_Mode_descriptor();
template<typename T>
inline const std::string& SubscriptionList_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubscriptionList_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubscriptionList_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubscriptionList_Mode_descriptor(), enum_t_value);
}
inline bool SubscriptionList_Mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubscriptionList_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubscriptionList_Mode>(
    SubscriptionList_Mode_descriptor(), name, value);
}
enum UpdateResult_Operation : int {
  UpdateResult_Operation_INVALID = 0,
  UpdateResult_Operation_DELETE = 1,
  UpdateResult_Operation_REPLACE = 2,
  UpdateResult_Operation_UPDATE = 3,
  UpdateResult_Operation_UNION_REPLACE = 4,
  UpdateResult_Operation_UpdateResult_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UpdateResult_Operation_UpdateResult_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UpdateResult_Operation_IsValid(int value);
constexpr UpdateResult_Operation UpdateResult_Operation_Operation_MIN = UpdateResult_Operation_INVALID;
constexpr UpdateResult_Operation UpdateResult_Operation_Operation_MAX = UpdateResult_Operation_UNION_REPLACE;
constexpr int UpdateResult_Operation_Operation_ARRAYSIZE = UpdateResult_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateResult_Operation_descriptor();
template<typename T>
inline const std::string& UpdateResult_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateResult_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateResult_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateResult_Operation_descriptor(), enum_t_value);
}
inline bool UpdateResult_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateResult_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateResult_Operation>(
    UpdateResult_Operation_descriptor(), name, value);
}
enum GetRequest_DataType : int {
  GetRequest_DataType_ALL = 0,
  GetRequest_DataType_CONFIG = 1,
  GetRequest_DataType_STATE = 2,
  GetRequest_DataType_OPERATIONAL = 3,
  GetRequest_DataType_GetRequest_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GetRequest_DataType_GetRequest_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GetRequest_DataType_IsValid(int value);
constexpr GetRequest_DataType GetRequest_DataType_DataType_MIN = GetRequest_DataType_ALL;
constexpr GetRequest_DataType GetRequest_DataType_DataType_MAX = GetRequest_DataType_OPERATIONAL;
constexpr int GetRequest_DataType_DataType_ARRAYSIZE = GetRequest_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetRequest_DataType_descriptor();
template<typename T>
inline const std::string& GetRequest_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetRequest_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetRequest_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetRequest_DataType_descriptor(), enum_t_value);
}
inline bool GetRequest_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetRequest_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetRequest_DataType>(
    GetRequest_DataType_descriptor(), name, value);
}
enum Encoding : int {
  JSON = 0,
  BYTES = 1,
  PROTO = 2,
  ASCII = 3,
  JSON_IETF = 4,
  Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Encoding_IsValid(int value);
constexpr Encoding Encoding_MIN = JSON;
constexpr Encoding Encoding_MAX = JSON_IETF;
constexpr int Encoding_ARRAYSIZE = Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor();
template<typename T>
inline const std::string& Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Encoding_descriptor(), enum_t_value);
}
inline bool Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Encoding>(
    Encoding_descriptor(), name, value);
}
enum SubscriptionMode : int {
  TARGET_DEFINED = 0,
  ON_CHANGE = 1,
  SAMPLE = 2,
  SubscriptionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SubscriptionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SubscriptionMode_IsValid(int value);
constexpr SubscriptionMode SubscriptionMode_MIN = TARGET_DEFINED;
constexpr SubscriptionMode SubscriptionMode_MAX = SAMPLE;
constexpr int SubscriptionMode_ARRAYSIZE = SubscriptionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionMode_descriptor();
template<typename T>
inline const std::string& SubscriptionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubscriptionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubscriptionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubscriptionMode_descriptor(), enum_t_value);
}
inline bool SubscriptionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubscriptionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubscriptionMode>(
    SubscriptionMode_descriptor(), name, value);
}
// ===================================================================

class Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.Notification) */ {
 public:
  inline Notification() : Notification(nullptr) {}
  ~Notification() override;
  explicit constexpr Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Notification(const Notification& from);
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notification& operator=(Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Notification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.Notification";
  }
  protected:
  explicit Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFieldNumber = 4,
    kDeleteFieldNumber = 5,
    kPrefixFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kAtomicFieldNumber = 6,
  };
  // repeated .gnmi.Update update = 4;
  int update_size() const;
  private:
  int _internal_update_size() const;
  public:
  void clear_update();
  ::gnmi::Update* mutable_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >*
      mutable_update();
  private:
  const ::gnmi::Update& _internal_update(int index) const;
  ::gnmi::Update* _internal_add_update();
  public:
  const ::gnmi::Update& update(int index) const;
  ::gnmi::Update* add_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >&
      update() const;

  // repeated .gnmi.Path delete = 5;
  int delete__size() const;
  private:
  int _internal_delete__size() const;
  public:
  void clear_delete_();
  ::gnmi::Path* mutable_delete_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >*
      mutable_delete_();
  private:
  const ::gnmi::Path& _internal_delete_(int index) const;
  ::gnmi::Path* _internal_add_delete_();
  public:
  const ::gnmi::Path& delete_(int index) const;
  ::gnmi::Path* add_delete_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >&
      delete_() const;

  // .gnmi.Path prefix = 2;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const ::gnmi::Path& prefix() const;
  PROTOBUF_NODISCARD ::gnmi::Path* release_prefix();
  ::gnmi::Path* mutable_prefix();
  void set_allocated_prefix(::gnmi::Path* prefix);
  private:
  const ::gnmi::Path& _internal_prefix() const;
  ::gnmi::Path* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::gnmi::Path* prefix);
  ::gnmi::Path* unsafe_arena_release_prefix();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // bool atomic = 6;
  void clear_atomic();
  bool atomic() const;
  void set_atomic(bool value);
  private:
  bool _internal_atomic() const;
  void _internal_set_atomic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update > update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path > delete__;
  ::gnmi::Path* prefix_;
  int64_t timestamp_;
  bool atomic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class Update final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.Update) */ {
 public:
  inline Update() : Update(nullptr) {}
  ~Update() override;
  explicit constexpr Update(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Update(const Update& from);
  Update(Update&& from) noexcept
    : Update() {
    *this = ::std::move(from);
  }

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }
  inline Update& operator=(Update&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Update& default_instance() {
    return *internal_default_instance();
  }
  static inline const Update* internal_default_instance() {
    return reinterpret_cast<const Update*>(
               &_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Update& a, Update& b) {
    a.Swap(&b);
  }
  inline void Swap(Update* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Update* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Update* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Update>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Update& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Update& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Update* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.Update";
  }
  protected:
  explicit Update(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kValueFieldNumber = 2,
    kValFieldNumber = 3,
    kDuplicatesFieldNumber = 4,
  };
  // .gnmi.Path path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::gnmi::Path& path() const;
  PROTOBUF_NODISCARD ::gnmi::Path* release_path();
  ::gnmi::Path* mutable_path();
  void set_allocated_path(::gnmi::Path* path);
  private:
  const ::gnmi::Path& _internal_path() const;
  ::gnmi::Path* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::gnmi::Path* path);
  ::gnmi::Path* unsafe_arena_release_path();

  // .gnmi.Value value = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  PROTOBUF_DEPRECATED void clear_value();
  PROTOBUF_DEPRECATED const ::gnmi::Value& value() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::gnmi::Value* release_value();
  PROTOBUF_DEPRECATED ::gnmi::Value* mutable_value();
  PROTOBUF_DEPRECATED void set_allocated_value(::gnmi::Value* value);
  private:
  const ::gnmi::Value& _internal_value() const;
  ::gnmi::Value* _internal_mutable_value();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_value(
      ::gnmi::Value* value);
  PROTOBUF_DEPRECATED ::gnmi::Value* unsafe_arena_release_value();

  // .gnmi.TypedValue val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const ::gnmi::TypedValue& val() const;
  PROTOBUF_NODISCARD ::gnmi::TypedValue* release_val();
  ::gnmi::TypedValue* mutable_val();
  void set_allocated_val(::gnmi::TypedValue* val);
  private:
  const ::gnmi::TypedValue& _internal_val() const;
  ::gnmi::TypedValue* _internal_mutable_val();
  public:
  void unsafe_arena_set_allocated_val(
      ::gnmi::TypedValue* val);
  ::gnmi::TypedValue* unsafe_arena_release_val();

  // uint32 duplicates = 4;
  void clear_duplicates();
  uint32_t duplicates() const;
  void set_duplicates(uint32_t value);
  private:
  uint32_t _internal_duplicates() const;
  void _internal_set_duplicates(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.Update)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gnmi::Path* path_;
  ::gnmi::Value* value_;
  ::gnmi::TypedValue* val_;
  uint32_t duplicates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class TypedValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.TypedValue) */ {
 public:
  inline TypedValue() : TypedValue(nullptr) {}
  ~TypedValue() override;
  explicit constexpr TypedValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypedValue(const TypedValue& from);
  TypedValue(TypedValue&& from) noexcept
    : TypedValue() {
    *this = ::std::move(from);
  }

  inline TypedValue& operator=(const TypedValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypedValue& operator=(TypedValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TypedValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringVal = 1,
    kIntVal = 2,
    kUintVal = 3,
    kBoolVal = 4,
    kBytesVal = 5,
    kFloatVal = 6,
    kDoubleVal = 14,
    kDecimalVal = 7,
    kLeaflistVal = 8,
    kAnyVal = 9,
    kJsonVal = 10,
    kJsonIetfVal = 11,
    kAsciiVal = 12,
    kProtoBytes = 13,
    VALUE_NOT_SET = 0,
  };

  static inline const TypedValue* internal_default_instance() {
    return reinterpret_cast<const TypedValue*>(
               &_TypedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TypedValue& a, TypedValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TypedValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypedValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TypedValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TypedValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TypedValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TypedValue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypedValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.TypedValue";
  }
  protected:
  explicit TypedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValFieldNumber = 1,
    kIntValFieldNumber = 2,
    kUintValFieldNumber = 3,
    kBoolValFieldNumber = 4,
    kBytesValFieldNumber = 5,
    kFloatValFieldNumber = 6,
    kDoubleValFieldNumber = 14,
    kDecimalValFieldNumber = 7,
    kLeaflistValFieldNumber = 8,
    kAnyValFieldNumber = 9,
    kJsonValFieldNumber = 10,
    kJsonIetfValFieldNumber = 11,
    kAsciiValFieldNumber = 12,
    kProtoBytesFieldNumber = 13,
  };
  // string string_val = 1;
  bool has_string_val() const;
  private:
  bool _internal_has_string_val() const;
  public:
  void clear_string_val();
  const std::string& string_val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_val();
  PROTOBUF_NODISCARD std::string* release_string_val();
  void set_allocated_string_val(std::string* string_val);
  private:
  const std::string& _internal_string_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_val(const std::string& value);
  std::string* _internal_mutable_string_val();
  public:

  // int64 int_val = 2;
  bool has_int_val() const;
  private:
  bool _internal_has_int_val() const;
  public:
  void clear_int_val();
  int64_t int_val() const;
  void set_int_val(int64_t value);
  private:
  int64_t _internal_int_val() const;
  void _internal_set_int_val(int64_t value);
  public:

  // uint64 uint_val = 3;
  bool has_uint_val() const;
  private:
  bool _internal_has_uint_val() const;
  public:
  void clear_uint_val();
  uint64_t uint_val() const;
  void set_uint_val(uint64_t value);
  private:
  uint64_t _internal_uint_val() const;
  void _internal_set_uint_val(uint64_t value);
  public:

  // bool bool_val = 4;
  bool has_bool_val() const;
  private:
  bool _internal_has_bool_val() const;
  public:
  void clear_bool_val();
  bool bool_val() const;
  void set_bool_val(bool value);
  private:
  bool _internal_bool_val() const;
  void _internal_set_bool_val(bool value);
  public:

  // bytes bytes_val = 5;
  bool has_bytes_val() const;
  private:
  bool _internal_has_bytes_val() const;
  public:
  void clear_bytes_val();
  const std::string& bytes_val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_val();
  PROTOBUF_NODISCARD std::string* release_bytes_val();
  void set_allocated_bytes_val(std::string* bytes_val);
  private:
  const std::string& _internal_bytes_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_val(const std::string& value);
  std::string* _internal_mutable_bytes_val();
  public:

  // float float_val = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_float_val() const;
  private:
  bool _internal_has_float_val() const;
  public:
  PROTOBUF_DEPRECATED void clear_float_val();
  PROTOBUF_DEPRECATED float float_val() const;
  PROTOBUF_DEPRECATED void set_float_val(float value);
  private:
  float _internal_float_val() const;
  void _internal_set_float_val(float value);
  public:

  // double double_val = 14;
  bool has_double_val() const;
  private:
  bool _internal_has_double_val() const;
  public:
  void clear_double_val();
  double double_val() const;
  void set_double_val(double value);
  private:
  double _internal_double_val() const;
  void _internal_set_double_val(double value);
  public:

  // .gnmi.Decimal64 decimal_val = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_decimal_val() const;
  private:
  bool _internal_has_decimal_val() const;
  public:
  PROTOBUF_DEPRECATED void clear_decimal_val();
  PROTOBUF_DEPRECATED const ::gnmi::Decimal64& decimal_val() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::gnmi::Decimal64* release_decimal_val();
  PROTOBUF_DEPRECATED ::gnmi::Decimal64* mutable_decimal_val();
  PROTOBUF_DEPRECATED void set_allocated_decimal_val(::gnmi::Decimal64* decimal_val);
  private:
  const ::gnmi::Decimal64& _internal_decimal_val() const;
  ::gnmi::Decimal64* _internal_mutable_decimal_val();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_decimal_val(
      ::gnmi::Decimal64* decimal_val);
  PROTOBUF_DEPRECATED ::gnmi::Decimal64* unsafe_arena_release_decimal_val();

  // .gnmi.ScalarArray leaflist_val = 8;
  bool has_leaflist_val() const;
  private:
  bool _internal_has_leaflist_val() const;
  public:
  void clear_leaflist_val();
  const ::gnmi::ScalarArray& leaflist_val() const;
  PROTOBUF_NODISCARD ::gnmi::ScalarArray* release_leaflist_val();
  ::gnmi::ScalarArray* mutable_leaflist_val();
  void set_allocated_leaflist_val(::gnmi::ScalarArray* leaflist_val);
  private:
  const ::gnmi::ScalarArray& _internal_leaflist_val() const;
  ::gnmi::ScalarArray* _internal_mutable_leaflist_val();
  public:
  void unsafe_arena_set_allocated_leaflist_val(
      ::gnmi::ScalarArray* leaflist_val);
  ::gnmi::ScalarArray* unsafe_arena_release_leaflist_val();

  // .google.protobuf.Any any_val = 9;
  bool has_any_val() const;
  private:
  bool _internal_has_any_val() const;
  public:
  void clear_any_val();
  const ::PROTOBUF_NAMESPACE_ID::Any& any_val() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_any_val();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_any_val();
  void set_allocated_any_val(::PROTOBUF_NAMESPACE_ID::Any* any_val);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_any_val() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_any_val();
  public:
  void unsafe_arena_set_allocated_any_val(
      ::PROTOBUF_NAMESPACE_ID::Any* any_val);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_any_val();

  // bytes json_val = 10;
  bool has_json_val() const;
  private:
  bool _internal_has_json_val() const;
  public:
  void clear_json_val();
  const std::string& json_val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_val();
  PROTOBUF_NODISCARD std::string* release_json_val();
  void set_allocated_json_val(std::string* json_val);
  private:
  const std::string& _internal_json_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_val(const std::string& value);
  std::string* _internal_mutable_json_val();
  public:

  // bytes json_ietf_val = 11;
  bool has_json_ietf_val() const;
  private:
  bool _internal_has_json_ietf_val() const;
  public:
  void clear_json_ietf_val();
  const std::string& json_ietf_val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json_ietf_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json_ietf_val();
  PROTOBUF_NODISCARD std::string* release_json_ietf_val();
  void set_allocated_json_ietf_val(std::string* json_ietf_val);
  private:
  const std::string& _internal_json_ietf_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json_ietf_val(const std::string& value);
  std::string* _internal_mutable_json_ietf_val();
  public:

  // string ascii_val = 12;
  bool has_ascii_val() const;
  private:
  bool _internal_has_ascii_val() const;
  public:
  void clear_ascii_val();
  const std::string& ascii_val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ascii_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ascii_val();
  PROTOBUF_NODISCARD std::string* release_ascii_val();
  void set_allocated_ascii_val(std::string* ascii_val);
  private:
  const std::string& _internal_ascii_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ascii_val(const std::string& value);
  std::string* _internal_mutable_ascii_val();
  public:

  // bytes proto_bytes = 13;
  bool has_proto_bytes() const;
  private:
  bool _internal_has_proto_bytes() const;
  public:
  void clear_proto_bytes();
  const std::string& proto_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_bytes();
  PROTOBUF_NODISCARD std::string* release_proto_bytes();
  void set_allocated_proto_bytes(std::string* proto_bytes);
  private:
  const std::string& _internal_proto_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_bytes(const std::string& value);
  std::string* _internal_mutable_proto_bytes();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:gnmi.TypedValue)
 private:
  class _Internal;
  void set_has_string_val();
  void set_has_int_val();
  void set_has_uint_val();
  void set_has_bool_val();
  void set_has_bytes_val();
  void set_has_float_val();
  void set_has_double_val();
  void set_has_decimal_val();
  void set_has_leaflist_val();
  void set_has_any_val();
  void set_has_json_val();
  void set_has_json_ietf_val();
  void set_has_ascii_val();
  void set_has_proto_bytes();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_val_;
    int64_t int_val_;
    uint64_t uint_val_;
    bool bool_val_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_val_;
    float float_val_;
    double double_val_;
    ::gnmi::Decimal64* decimal_val_;
    ::gnmi::ScalarArray* leaflist_val_;
    ::PROTOBUF_NAMESPACE_ID::Any* any_val_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_val_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_ietf_val_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ascii_val_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_bytes_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class Path final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  ~Path() override;
  explicit constexpr Path(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Path& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Path& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
    kElemFieldNumber = 3,
    kOriginFieldNumber = 2,
    kTargetFieldNumber = 4,
  };
  // repeated string element = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_element();
  PROTOBUF_DEPRECATED const std::string& element(int index) const;
  PROTOBUF_DEPRECATED std::string* mutable_element(int index);
  PROTOBUF_DEPRECATED void set_element(int index, const std::string& value);
  PROTOBUF_DEPRECATED void set_element(int index, std::string&& value);
  PROTOBUF_DEPRECATED void set_element(int index, const char* value);
  PROTOBUF_DEPRECATED void set_element(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* add_element();
  PROTOBUF_DEPRECATED void add_element(const std::string& value);
  PROTOBUF_DEPRECATED void add_element(std::string&& value);
  PROTOBUF_DEPRECATED void add_element(const char* value);
  PROTOBUF_DEPRECATED void add_element(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& element() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_element();
  private:
  const std::string& _internal_element(int index) const;
  std::string* _internal_add_element();
  public:

  // repeated .gnmi.PathElem elem = 3;
  int elem_size() const;
  private:
  int _internal_elem_size() const;
  public:
  void clear_elem();
  ::gnmi::PathElem* mutable_elem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::PathElem >*
      mutable_elem();
  private:
  const ::gnmi::PathElem& _internal_elem(int index) const;
  ::gnmi::PathElem* _internal_add_elem();
  public:
  const ::gnmi::PathElem& elem(int index) const;
  ::gnmi::PathElem* add_elem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::PathElem >&
      elem() const;

  // string origin = 2;
  void clear_origin();
  const std::string& origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin();
  PROTOBUF_NODISCARD std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // string target = 4;
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:gnmi.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> element_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::PathElem > elem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class PathElem_KeyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PathElem_KeyEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PathElem_KeyEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  PathElem_KeyEntry_DoNotUse();
  explicit constexpr PathElem_KeyEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PathElem_KeyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PathElem_KeyEntry_DoNotUse& other);
  static const PathElem_KeyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PathElem_KeyEntry_DoNotUse*>(&_PathElem_KeyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gnmi.PathElem.KeyEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "gnmi.PathElem.KeyEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class PathElem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.PathElem) */ {
 public:
  inline PathElem() : PathElem(nullptr) {}
  ~PathElem() override;
  explicit constexpr PathElem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathElem(const PathElem& from);
  PathElem(PathElem&& from) noexcept
    : PathElem() {
    *this = ::std::move(from);
  }

  inline PathElem& operator=(const PathElem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathElem& operator=(PathElem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathElem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathElem* internal_default_instance() {
    return reinterpret_cast<const PathElem*>(
               &_PathElem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PathElem& a, PathElem& b) {
    a.Swap(&b);
  }
  inline void Swap(PathElem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathElem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathElem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathElem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathElem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathElem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathElem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.PathElem";
  }
  protected:
  explicit PathElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, string> key = 2;
  int key_size() const;
  private:
  int _internal_key_size() const;
  public:
  void clear_key();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_key() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_key();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      key() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_key();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:gnmi.PathElem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PathElem_KeyEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  ~Value() override;
  explicit constexpr Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value& default_instance() {
    return *internal_default_instance();
  }
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .gnmi.Encoding type = 2;
  void clear_type();
  ::gnmi::Encoding type() const;
  void set_type(::gnmi::Encoding value);
  private:
  ::gnmi::Encoding _internal_type() const;
  void _internal_set_type(::gnmi::Encoding value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.Value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit constexpr Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Any data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_data();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PROTOBUF_NAMESPACE_ID::Any* data);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // uint32 code = 1;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::Any* data_;
  uint32_t code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class Decimal64 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.Decimal64) */ {
 public:
  inline Decimal64() : Decimal64(nullptr) {}
  ~Decimal64() override;
  explicit constexpr Decimal64(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Decimal64(const Decimal64& from);
  Decimal64(Decimal64&& from) noexcept
    : Decimal64() {
    *this = ::std::move(from);
  }

  inline Decimal64& operator=(const Decimal64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decimal64& operator=(Decimal64&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Decimal64& default_instance() {
    return *internal_default_instance();
  }
  static inline const Decimal64* internal_default_instance() {
    return reinterpret_cast<const Decimal64*>(
               &_Decimal64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Decimal64& a, Decimal64& b) {
    a.Swap(&b);
  }
  inline void Swap(Decimal64* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decimal64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Decimal64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Decimal64>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Decimal64& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Decimal64& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decimal64* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.Decimal64";
  }
  protected:
  explicit Decimal64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDigitsFieldNumber = 1,
    kPrecisionFieldNumber = 2,
  };
  // int64 digits = 1;
  void clear_digits();
  int64_t digits() const;
  void set_digits(int64_t value);
  private:
  int64_t _internal_digits() const;
  void _internal_set_digits(int64_t value);
  public:

  // uint32 precision = 2;
  void clear_precision();
  uint32_t precision() const;
  void set_precision(uint32_t value);
  private:
  uint32_t _internal_precision() const;
  void _internal_set_precision(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.Decimal64)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t digits_;
  uint32_t precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class ScalarArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.ScalarArray) */ {
 public:
  inline ScalarArray() : ScalarArray(nullptr) {}
  ~ScalarArray() override;
  explicit constexpr ScalarArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarArray(const ScalarArray& from);
  ScalarArray(ScalarArray&& from) noexcept
    : ScalarArray() {
    *this = ::std::move(from);
  }

  inline ScalarArray& operator=(const ScalarArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarArray& operator=(ScalarArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarArray* internal_default_instance() {
    return reinterpret_cast<const ScalarArray*>(
               &_ScalarArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ScalarArray& a, ScalarArray& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScalarArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScalarArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScalarArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScalarArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.ScalarArray";
  }
  protected:
  explicit ScalarArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
  };
  // repeated .gnmi.TypedValue element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::gnmi::TypedValue* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::TypedValue >*
      mutable_element();
  private:
  const ::gnmi::TypedValue& _internal_element(int index) const;
  ::gnmi::TypedValue* _internal_add_element();
  public:
  const ::gnmi::TypedValue& element(int index) const;
  ::gnmi::TypedValue* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::TypedValue >&
      element() const;

  // @@protoc_insertion_point(class_scope:gnmi.ScalarArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::TypedValue > element_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.SubscribeRequest) */ {
 public:
  inline SubscribeRequest() : SubscribeRequest(nullptr) {}
  ~SubscribeRequest() override;
  explicit constexpr SubscribeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeRequest(const SubscribeRequest& from);
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kSubscribe = 1,
    kPoll = 3,
    REQUEST_NOT_SET = 0,
  };

  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubscribeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.SubscribeRequest";
  }
  protected:
  explicit SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 5,
    kSubscribeFieldNumber = 1,
    kPollFieldNumber = 3,
  };
  // repeated .gnmi_ext.Extension extension = 5;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::gnmi_ext::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
      mutable_extension();
  private:
  const ::gnmi_ext::Extension& _internal_extension(int index) const;
  ::gnmi_ext::Extension* _internal_add_extension();
  public:
  const ::gnmi_ext::Extension& extension(int index) const;
  ::gnmi_ext::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
      extension() const;

  // .gnmi.SubscriptionList subscribe = 1;
  bool has_subscribe() const;
  private:
  bool _internal_has_subscribe() const;
  public:
  void clear_subscribe();
  const ::gnmi::SubscriptionList& subscribe() const;
  PROTOBUF_NODISCARD ::gnmi::SubscriptionList* release_subscribe();
  ::gnmi::SubscriptionList* mutable_subscribe();
  void set_allocated_subscribe(::gnmi::SubscriptionList* subscribe);
  private:
  const ::gnmi::SubscriptionList& _internal_subscribe() const;
  ::gnmi::SubscriptionList* _internal_mutable_subscribe();
  public:
  void unsafe_arena_set_allocated_subscribe(
      ::gnmi::SubscriptionList* subscribe);
  ::gnmi::SubscriptionList* unsafe_arena_release_subscribe();

  // .gnmi.Poll poll = 3;
  bool has_poll() const;
  private:
  bool _internal_has_poll() const;
  public:
  void clear_poll();
  const ::gnmi::Poll& poll() const;
  PROTOBUF_NODISCARD ::gnmi::Poll* release_poll();
  ::gnmi::Poll* mutable_poll();
  void set_allocated_poll(::gnmi::Poll* poll);
  private:
  const ::gnmi::Poll& _internal_poll() const;
  ::gnmi::Poll* _internal_mutable_poll();
  public:
  void unsafe_arena_set_allocated_poll(
      ::gnmi::Poll* poll);
  ::gnmi::Poll* unsafe_arena_release_poll();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:gnmi.SubscribeRequest)
 private:
  class _Internal;
  void set_has_subscribe();
  void set_has_poll();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension > extension_;
  union RequestUnion {
    constexpr RequestUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::gnmi::SubscriptionList* subscribe_;
    ::gnmi::Poll* poll_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class Poll final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:gnmi.Poll) */ {
 public:
  inline Poll() : Poll(nullptr) {}
  explicit constexpr Poll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Poll(const Poll& from);
  Poll(Poll&& from) noexcept
    : Poll() {
    *this = ::std::move(from);
  }

  inline Poll& operator=(const Poll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Poll& operator=(Poll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Poll& default_instance() {
    return *internal_default_instance();
  }
  static inline const Poll* internal_default_instance() {
    return reinterpret_cast<const Poll*>(
               &_Poll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Poll& a, Poll& b) {
    a.Swap(&b);
  }
  inline void Swap(Poll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Poll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Poll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Poll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Poll& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Poll& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.Poll";
  }
  protected:
  explicit Poll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gnmi.Poll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class SubscribeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.SubscribeResponse) */ {
 public:
  inline SubscribeResponse() : SubscribeResponse(nullptr) {}
  ~SubscribeResponse() override;
  explicit constexpr SubscribeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeResponse(const SubscribeResponse& from);
  SubscribeResponse(SubscribeResponse&& from) noexcept
    : SubscribeResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeResponse& operator=(const SubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeResponse& operator=(SubscribeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kUpdate = 1,
    kSyncResponse = 3,
    kError = 4,
    RESPONSE_NOT_SET = 0,
  };

  static inline const SubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeResponse*>(
               &_SubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SubscribeResponse& a, SubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubscribeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.SubscribeResponse";
  }
  protected:
  explicit SubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 5,
    kUpdateFieldNumber = 1,
    kSyncResponseFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .gnmi_ext.Extension extension = 5;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::gnmi_ext::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
      mutable_extension();
  private:
  const ::gnmi_ext::Extension& _internal_extension(int index) const;
  ::gnmi_ext::Extension* _internal_add_extension();
  public:
  const ::gnmi_ext::Extension& extension(int index) const;
  ::gnmi_ext::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
      extension() const;

  // .gnmi.Notification update = 1;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::gnmi::Notification& update() const;
  PROTOBUF_NODISCARD ::gnmi::Notification* release_update();
  ::gnmi::Notification* mutable_update();
  void set_allocated_update(::gnmi::Notification* update);
  private:
  const ::gnmi::Notification& _internal_update() const;
  ::gnmi::Notification* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::gnmi::Notification* update);
  ::gnmi::Notification* unsafe_arena_release_update();

  // bool sync_response = 3;
  bool has_sync_response() const;
  private:
  bool _internal_has_sync_response() const;
  public:
  void clear_sync_response();
  bool sync_response() const;
  void set_sync_response(bool value);
  private:
  bool _internal_sync_response() const;
  void _internal_set_sync_response(bool value);
  public:

  // .gnmi.Error error = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  PROTOBUF_DEPRECATED void clear_error();
  PROTOBUF_DEPRECATED const ::gnmi::Error& error() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::gnmi::Error* release_error();
  PROTOBUF_DEPRECATED ::gnmi::Error* mutable_error();
  PROTOBUF_DEPRECATED void set_allocated_error(::gnmi::Error* error);
  private:
  const ::gnmi::Error& _internal_error() const;
  ::gnmi::Error* _internal_mutable_error();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_error(
      ::gnmi::Error* error);
  PROTOBUF_DEPRECATED ::gnmi::Error* unsafe_arena_release_error();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:gnmi.SubscribeResponse)
 private:
  class _Internal;
  void set_has_update();
  void set_has_sync_response();
  void set_has_error();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension > extension_;
  union ResponseUnion {
    constexpr ResponseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::gnmi::Notification* update_;
    bool sync_response_;
    ::gnmi::Error* error_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.SubscriptionList) */ {
 public:
  inline SubscriptionList() : SubscriptionList(nullptr) {}
  ~SubscriptionList() override;
  explicit constexpr SubscriptionList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscriptionList(const SubscriptionList& from);
  SubscriptionList(SubscriptionList&& from) noexcept
    : SubscriptionList() {
    *this = ::std::move(from);
  }

  inline SubscriptionList& operator=(const SubscriptionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscriptionList& operator=(SubscriptionList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscriptionList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscriptionList* internal_default_instance() {
    return reinterpret_cast<const SubscriptionList*>(
               &_SubscriptionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SubscriptionList& a, SubscriptionList& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscriptionList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscriptionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscriptionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscriptionList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscriptionList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubscriptionList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.SubscriptionList";
  }
  protected:
  explicit SubscriptionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SubscriptionList_Mode Mode;
  static constexpr Mode STREAM =
    SubscriptionList_Mode_STREAM;
  static constexpr Mode ONCE =
    SubscriptionList_Mode_ONCE;
  static constexpr Mode POLL =
    SubscriptionList_Mode_POLL;
  static inline bool Mode_IsValid(int value) {
    return SubscriptionList_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    SubscriptionList_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    SubscriptionList_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    SubscriptionList_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return SubscriptionList_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return SubscriptionList_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Mode* value) {
    return SubscriptionList_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 2,
    kUseModelsFieldNumber = 7,
    kPrefixFieldNumber = 1,
    kQosFieldNumber = 4,
    kModeFieldNumber = 5,
    kAllowAggregationFieldNumber = 6,
    kUpdatesOnlyFieldNumber = 9,
    kEncodingFieldNumber = 8,
  };
  // repeated .gnmi.Subscription subscription = 2;
  int subscription_size() const;
  private:
  int _internal_subscription_size() const;
  public:
  void clear_subscription();
  ::gnmi::Subscription* mutable_subscription(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Subscription >*
      mutable_subscription();
  private:
  const ::gnmi::Subscription& _internal_subscription(int index) const;
  ::gnmi::Subscription* _internal_add_subscription();
  public:
  const ::gnmi::Subscription& subscription(int index) const;
  ::gnmi::Subscription* add_subscription();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Subscription >&
      subscription() const;

  // repeated .gnmi.ModelData use_models = 7;
  int use_models_size() const;
  private:
  int _internal_use_models_size() const;
  public:
  void clear_use_models();
  ::gnmi::ModelData* mutable_use_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >*
      mutable_use_models();
  private:
  const ::gnmi::ModelData& _internal_use_models(int index) const;
  ::gnmi::ModelData* _internal_add_use_models();
  public:
  const ::gnmi::ModelData& use_models(int index) const;
  ::gnmi::ModelData* add_use_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >&
      use_models() const;

  // .gnmi.Path prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const ::gnmi::Path& prefix() const;
  PROTOBUF_NODISCARD ::gnmi::Path* release_prefix();
  ::gnmi::Path* mutable_prefix();
  void set_allocated_prefix(::gnmi::Path* prefix);
  private:
  const ::gnmi::Path& _internal_prefix() const;
  ::gnmi::Path* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::gnmi::Path* prefix);
  ::gnmi::Path* unsafe_arena_release_prefix();

  // .gnmi.QOSMarking qos = 4;
  bool has_qos() const;
  private:
  bool _internal_has_qos() const;
  public:
  void clear_qos();
  const ::gnmi::QOSMarking& qos() const;
  PROTOBUF_NODISCARD ::gnmi::QOSMarking* release_qos();
  ::gnmi::QOSMarking* mutable_qos();
  void set_allocated_qos(::gnmi::QOSMarking* qos);
  private:
  const ::gnmi::QOSMarking& _internal_qos() const;
  ::gnmi::QOSMarking* _internal_mutable_qos();
  public:
  void unsafe_arena_set_allocated_qos(
      ::gnmi::QOSMarking* qos);
  ::gnmi::QOSMarking* unsafe_arena_release_qos();

  // .gnmi.SubscriptionList.Mode mode = 5;
  void clear_mode();
  ::gnmi::SubscriptionList_Mode mode() const;
  void set_mode(::gnmi::SubscriptionList_Mode value);
  private:
  ::gnmi::SubscriptionList_Mode _internal_mode() const;
  void _internal_set_mode(::gnmi::SubscriptionList_Mode value);
  public:

  // bool allow_aggregation = 6;
  void clear_allow_aggregation();
  bool allow_aggregation() const;
  void set_allow_aggregation(bool value);
  private:
  bool _internal_allow_aggregation() const;
  void _internal_set_allow_aggregation(bool value);
  public:

  // bool updates_only = 9;
  void clear_updates_only();
  bool updates_only() const;
  void set_updates_only(bool value);
  private:
  bool _internal_updates_only() const;
  void _internal_set_updates_only(bool value);
  public:

  // .gnmi.Encoding encoding = 8;
  void clear_encoding();
  ::gnmi::Encoding encoding() const;
  void set_encoding(::gnmi::Encoding value);
  private:
  ::gnmi::Encoding _internal_encoding() const;
  void _internal_set_encoding(::gnmi::Encoding value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.SubscriptionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Subscription > subscription_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData > use_models_;
  ::gnmi::Path* prefix_;
  ::gnmi::QOSMarking* qos_;
  int mode_;
  bool allow_aggregation_;
  bool updates_only_;
  int encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class Subscription final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.Subscription) */ {
 public:
  inline Subscription() : Subscription(nullptr) {}
  ~Subscription() override;
  explicit constexpr Subscription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subscription(const Subscription& from);
  Subscription(Subscription&& from) noexcept
    : Subscription() {
    *this = ::std::move(from);
  }

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscription& operator=(Subscription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subscription* internal_default_instance() {
    return reinterpret_cast<const Subscription*>(
               &_Subscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Subscription& a, Subscription& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Subscription>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Subscription& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Subscription& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.Subscription";
  }
  protected:
  explicit Subscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kSampleIntervalFieldNumber = 3,
    kModeFieldNumber = 2,
    kSuppressRedundantFieldNumber = 4,
    kHeartbeatIntervalFieldNumber = 5,
  };
  // .gnmi.Path path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::gnmi::Path& path() const;
  PROTOBUF_NODISCARD ::gnmi::Path* release_path();
  ::gnmi::Path* mutable_path();
  void set_allocated_path(::gnmi::Path* path);
  private:
  const ::gnmi::Path& _internal_path() const;
  ::gnmi::Path* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::gnmi::Path* path);
  ::gnmi::Path* unsafe_arena_release_path();

  // uint64 sample_interval = 3;
  void clear_sample_interval();
  uint64_t sample_interval() const;
  void set_sample_interval(uint64_t value);
  private:
  uint64_t _internal_sample_interval() const;
  void _internal_set_sample_interval(uint64_t value);
  public:

  // .gnmi.SubscriptionMode mode = 2;
  void clear_mode();
  ::gnmi::SubscriptionMode mode() const;
  void set_mode(::gnmi::SubscriptionMode value);
  private:
  ::gnmi::SubscriptionMode _internal_mode() const;
  void _internal_set_mode(::gnmi::SubscriptionMode value);
  public:

  // bool suppress_redundant = 4;
  void clear_suppress_redundant();
  bool suppress_redundant() const;
  void set_suppress_redundant(bool value);
  private:
  bool _internal_suppress_redundant() const;
  void _internal_set_suppress_redundant(bool value);
  public:

  // uint64 heartbeat_interval = 5;
  void clear_heartbeat_interval();
  uint64_t heartbeat_interval() const;
  void set_heartbeat_interval(uint64_t value);
  private:
  uint64_t _internal_heartbeat_interval() const;
  void _internal_set_heartbeat_interval(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.Subscription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gnmi::Path* path_;
  uint64_t sample_interval_;
  int mode_;
  bool suppress_redundant_;
  uint64_t heartbeat_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class QOSMarking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.QOSMarking) */ {
 public:
  inline QOSMarking() : QOSMarking(nullptr) {}
  ~QOSMarking() override;
  explicit constexpr QOSMarking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QOSMarking(const QOSMarking& from);
  QOSMarking(QOSMarking&& from) noexcept
    : QOSMarking() {
    *this = ::std::move(from);
  }

  inline QOSMarking& operator=(const QOSMarking& from) {
    CopyFrom(from);
    return *this;
  }
  inline QOSMarking& operator=(QOSMarking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QOSMarking& default_instance() {
    return *internal_default_instance();
  }
  static inline const QOSMarking* internal_default_instance() {
    return reinterpret_cast<const QOSMarking*>(
               &_QOSMarking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QOSMarking& a, QOSMarking& b) {
    a.Swap(&b);
  }
  inline void Swap(QOSMarking* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QOSMarking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QOSMarking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QOSMarking>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QOSMarking& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QOSMarking& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QOSMarking* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.QOSMarking";
  }
  protected:
  explicit QOSMarking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkingFieldNumber = 1,
  };
  // uint32 marking = 1;
  void clear_marking();
  uint32_t marking() const;
  void set_marking(uint32_t value);
  private:
  uint32_t _internal_marking() const;
  void _internal_set_marking(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.QOSMarking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t marking_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class SetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.SetRequest) */ {
 public:
  inline SetRequest() : SetRequest(nullptr) {}
  ~SetRequest() override;
  explicit constexpr SetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRequest(const SetRequest& from);
  SetRequest(SetRequest&& from) noexcept
    : SetRequest() {
    *this = ::std::move(from);
  }

  inline SetRequest& operator=(const SetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRequest& operator=(SetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRequest* internal_default_instance() {
    return reinterpret_cast<const SetRequest*>(
               &_SetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetRequest& a, SetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.SetRequest";
  }
  protected:
  explicit SetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeleteFieldNumber = 2,
    kReplaceFieldNumber = 3,
    kUpdateFieldNumber = 4,
    kExtensionFieldNumber = 5,
    kUnionReplaceFieldNumber = 6,
    kPrefixFieldNumber = 1,
  };
  // repeated .gnmi.Path delete = 2;
  int delete__size() const;
  private:
  int _internal_delete__size() const;
  public:
  void clear_delete_();
  ::gnmi::Path* mutable_delete_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >*
      mutable_delete_();
  private:
  const ::gnmi::Path& _internal_delete_(int index) const;
  ::gnmi::Path* _internal_add_delete_();
  public:
  const ::gnmi::Path& delete_(int index) const;
  ::gnmi::Path* add_delete_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >&
      delete_() const;

  // repeated .gnmi.Update replace = 3;
  int replace_size() const;
  private:
  int _internal_replace_size() const;
  public:
  void clear_replace();
  ::gnmi::Update* mutable_replace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >*
      mutable_replace();
  private:
  const ::gnmi::Update& _internal_replace(int index) const;
  ::gnmi::Update* _internal_add_replace();
  public:
  const ::gnmi::Update& replace(int index) const;
  ::gnmi::Update* add_replace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >&
      replace() const;

  // repeated .gnmi.Update update = 4;
  int update_size() const;
  private:
  int _internal_update_size() const;
  public:
  void clear_update();
  ::gnmi::Update* mutable_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >*
      mutable_update();
  private:
  const ::gnmi::Update& _internal_update(int index) const;
  ::gnmi::Update* _internal_add_update();
  public:
  const ::gnmi::Update& update(int index) const;
  ::gnmi::Update* add_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >&
      update() const;

  // repeated .gnmi_ext.Extension extension = 5;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::gnmi_ext::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
      mutable_extension();
  private:
  const ::gnmi_ext::Extension& _internal_extension(int index) const;
  ::gnmi_ext::Extension* _internal_add_extension();
  public:
  const ::gnmi_ext::Extension& extension(int index) const;
  ::gnmi_ext::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
      extension() const;

  // repeated .gnmi.Update union_replace = 6;
  int union_replace_size() const;
  private:
  int _internal_union_replace_size() const;
  public:
  void clear_union_replace();
  ::gnmi::Update* mutable_union_replace(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >*
      mutable_union_replace();
  private:
  const ::gnmi::Update& _internal_union_replace(int index) const;
  ::gnmi::Update* _internal_add_union_replace();
  public:
  const ::gnmi::Update& union_replace(int index) const;
  ::gnmi::Update* add_union_replace();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >&
      union_replace() const;

  // .gnmi.Path prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const ::gnmi::Path& prefix() const;
  PROTOBUF_NODISCARD ::gnmi::Path* release_prefix();
  ::gnmi::Path* mutable_prefix();
  void set_allocated_prefix(::gnmi::Path* prefix);
  private:
  const ::gnmi::Path& _internal_prefix() const;
  ::gnmi::Path* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::gnmi::Path* prefix);
  ::gnmi::Path* unsafe_arena_release_prefix();

  // @@protoc_insertion_point(class_scope:gnmi.SetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path > delete__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update > replace_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update > update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension > extension_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update > union_replace_;
  ::gnmi::Path* prefix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class SetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.SetResponse) */ {
 public:
  inline SetResponse() : SetResponse(nullptr) {}
  ~SetResponse() override;
  explicit constexpr SetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetResponse(const SetResponse& from);
  SetResponse(SetResponse&& from) noexcept
    : SetResponse() {
    *this = ::std::move(from);
  }

  inline SetResponse& operator=(const SetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetResponse& operator=(SetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetResponse* internal_default_instance() {
    return reinterpret_cast<const SetResponse*>(
               &_SetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetResponse& a, SetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.SetResponse";
  }
  protected:
  explicit SetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kExtensionFieldNumber = 5,
    kPrefixFieldNumber = 1,
    kMessageFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // repeated .gnmi.UpdateResult response = 2;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::gnmi::UpdateResult* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::UpdateResult >*
      mutable_response();
  private:
  const ::gnmi::UpdateResult& _internal_response(int index) const;
  ::gnmi::UpdateResult* _internal_add_response();
  public:
  const ::gnmi::UpdateResult& response(int index) const;
  ::gnmi::UpdateResult* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::UpdateResult >&
      response() const;

  // repeated .gnmi_ext.Extension extension = 5;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::gnmi_ext::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
      mutable_extension();
  private:
  const ::gnmi_ext::Extension& _internal_extension(int index) const;
  ::gnmi_ext::Extension* _internal_add_extension();
  public:
  const ::gnmi_ext::Extension& extension(int index) const;
  ::gnmi_ext::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
      extension() const;

  // .gnmi.Path prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const ::gnmi::Path& prefix() const;
  PROTOBUF_NODISCARD ::gnmi::Path* release_prefix();
  ::gnmi::Path* mutable_prefix();
  void set_allocated_prefix(::gnmi::Path* prefix);
  private:
  const ::gnmi::Path& _internal_prefix() const;
  ::gnmi::Path* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::gnmi::Path* prefix);
  ::gnmi::Path* unsafe_arena_release_prefix();

  // .gnmi.Error message = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  PROTOBUF_DEPRECATED void clear_message();
  PROTOBUF_DEPRECATED const ::gnmi::Error& message() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::gnmi::Error* release_message();
  PROTOBUF_DEPRECATED ::gnmi::Error* mutable_message();
  PROTOBUF_DEPRECATED void set_allocated_message(::gnmi::Error* message);
  private:
  const ::gnmi::Error& _internal_message() const;
  ::gnmi::Error* _internal_mutable_message();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_message(
      ::gnmi::Error* message);
  PROTOBUF_DEPRECATED ::gnmi::Error* unsafe_arena_release_message();

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.SetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::UpdateResult > response_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension > extension_;
  ::gnmi::Path* prefix_;
  ::gnmi::Error* message_;
  int64_t timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class UpdateResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.UpdateResult) */ {
 public:
  inline UpdateResult() : UpdateResult(nullptr) {}
  ~UpdateResult() override;
  explicit constexpr UpdateResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateResult(const UpdateResult& from);
  UpdateResult(UpdateResult&& from) noexcept
    : UpdateResult() {
    *this = ::std::move(from);
  }

  inline UpdateResult& operator=(const UpdateResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResult& operator=(UpdateResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateResult* internal_default_instance() {
    return reinterpret_cast<const UpdateResult*>(
               &_UpdateResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdateResult& a, UpdateResult& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.UpdateResult";
  }
  protected:
  explicit UpdateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UpdateResult_Operation Operation;
  static constexpr Operation INVALID =
    UpdateResult_Operation_INVALID;
  static constexpr Operation DELETE =
    UpdateResult_Operation_DELETE;
  static constexpr Operation REPLACE =
    UpdateResult_Operation_REPLACE;
  static constexpr Operation UPDATE =
    UpdateResult_Operation_UPDATE;
  static constexpr Operation UNION_REPLACE =
    UpdateResult_Operation_UNION_REPLACE;
  static inline bool Operation_IsValid(int value) {
    return UpdateResult_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    UpdateResult_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    UpdateResult_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    UpdateResult_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return UpdateResult_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return UpdateResult_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return UpdateResult_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kMessageFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kOpFieldNumber = 4,
  };
  // .gnmi.Path path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::gnmi::Path& path() const;
  PROTOBUF_NODISCARD ::gnmi::Path* release_path();
  ::gnmi::Path* mutable_path();
  void set_allocated_path(::gnmi::Path* path);
  private:
  const ::gnmi::Path& _internal_path() const;
  ::gnmi::Path* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::gnmi::Path* path);
  ::gnmi::Path* unsafe_arena_release_path();

  // .gnmi.Error message = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  PROTOBUF_DEPRECATED void clear_message();
  PROTOBUF_DEPRECATED const ::gnmi::Error& message() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::gnmi::Error* release_message();
  PROTOBUF_DEPRECATED ::gnmi::Error* mutable_message();
  PROTOBUF_DEPRECATED void set_allocated_message(::gnmi::Error* message);
  private:
  const ::gnmi::Error& _internal_message() const;
  ::gnmi::Error* _internal_mutable_message();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_message(
      ::gnmi::Error* message);
  PROTOBUF_DEPRECATED ::gnmi::Error* unsafe_arena_release_message();

  // int64 timestamp = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_timestamp();
  PROTOBUF_DEPRECATED int64_t timestamp() const;
  PROTOBUF_DEPRECATED void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .gnmi.UpdateResult.Operation op = 4;
  void clear_op();
  ::gnmi::UpdateResult_Operation op() const;
  void set_op(::gnmi::UpdateResult_Operation value);
  private:
  ::gnmi::UpdateResult_Operation _internal_op() const;
  void _internal_set_op(::gnmi::UpdateResult_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.UpdateResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::gnmi::Path* path_;
  ::gnmi::Error* message_;
  int64_t timestamp_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() override;
  explicit constexpr GetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetRequest_DataType DataType;
  static constexpr DataType ALL =
    GetRequest_DataType_ALL;
  static constexpr DataType CONFIG =
    GetRequest_DataType_CONFIG;
  static constexpr DataType STATE =
    GetRequest_DataType_STATE;
  static constexpr DataType OPERATIONAL =
    GetRequest_DataType_OPERATIONAL;
  static inline bool DataType_IsValid(int value) {
    return GetRequest_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    GetRequest_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    GetRequest_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    GetRequest_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return GetRequest_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return GetRequest_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return GetRequest_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kUseModelsFieldNumber = 6,
    kExtensionFieldNumber = 7,
    kPrefixFieldNumber = 1,
    kTypeFieldNumber = 3,
    kEncodingFieldNumber = 5,
  };
  // repeated .gnmi.Path path = 2;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  ::gnmi::Path* mutable_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >*
      mutable_path();
  private:
  const ::gnmi::Path& _internal_path(int index) const;
  ::gnmi::Path* _internal_add_path();
  public:
  const ::gnmi::Path& path(int index) const;
  ::gnmi::Path* add_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >&
      path() const;

  // repeated .gnmi.ModelData use_models = 6;
  int use_models_size() const;
  private:
  int _internal_use_models_size() const;
  public:
  void clear_use_models();
  ::gnmi::ModelData* mutable_use_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >*
      mutable_use_models();
  private:
  const ::gnmi::ModelData& _internal_use_models(int index) const;
  ::gnmi::ModelData* _internal_add_use_models();
  public:
  const ::gnmi::ModelData& use_models(int index) const;
  ::gnmi::ModelData* add_use_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >&
      use_models() const;

  // repeated .gnmi_ext.Extension extension = 7;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::gnmi_ext::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
      mutable_extension();
  private:
  const ::gnmi_ext::Extension& _internal_extension(int index) const;
  ::gnmi_ext::Extension* _internal_add_extension();
  public:
  const ::gnmi_ext::Extension& extension(int index) const;
  ::gnmi_ext::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
      extension() const;

  // .gnmi.Path prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const ::gnmi::Path& prefix() const;
  PROTOBUF_NODISCARD ::gnmi::Path* release_prefix();
  ::gnmi::Path* mutable_prefix();
  void set_allocated_prefix(::gnmi::Path* prefix);
  private:
  const ::gnmi::Path& _internal_prefix() const;
  ::gnmi::Path* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::gnmi::Path* prefix);
  ::gnmi::Path* unsafe_arena_release_prefix();

  // .gnmi.GetRequest.DataType type = 3;
  void clear_type();
  ::gnmi::GetRequest_DataType type() const;
  void set_type(::gnmi::GetRequest_DataType value);
  private:
  ::gnmi::GetRequest_DataType _internal_type() const;
  void _internal_set_type(::gnmi::GetRequest_DataType value);
  public:

  // .gnmi.Encoding encoding = 5;
  void clear_encoding();
  ::gnmi::Encoding encoding() const;
  void set_encoding(::gnmi::Encoding value);
  private:
  ::gnmi::Encoding _internal_encoding() const;
  void _internal_set_encoding(::gnmi::Encoding value);
  public:

  // @@protoc_insertion_point(class_scope:gnmi.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path > path_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData > use_models_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension > extension_;
  ::gnmi::Path* prefix_;
  int type_;
  int encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class GetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  ~GetResponse() override;
  explicit constexpr GetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetResponse(const GetResponse& from);
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.GetResponse";
  }
  protected:
  explicit GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationFieldNumber = 1,
    kExtensionFieldNumber = 3,
    kErrorFieldNumber = 2,
  };
  // repeated .gnmi.Notification notification = 1;
  int notification_size() const;
  private:
  int _internal_notification_size() const;
  public:
  void clear_notification();
  ::gnmi::Notification* mutable_notification(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Notification >*
      mutable_notification();
  private:
  const ::gnmi::Notification& _internal_notification(int index) const;
  ::gnmi::Notification* _internal_add_notification();
  public:
  const ::gnmi::Notification& notification(int index) const;
  ::gnmi::Notification* add_notification();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Notification >&
      notification() const;

  // repeated .gnmi_ext.Extension extension = 3;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::gnmi_ext::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
      mutable_extension();
  private:
  const ::gnmi_ext::Extension& _internal_extension(int index) const;
  ::gnmi_ext::Extension* _internal_add_extension();
  public:
  const ::gnmi_ext::Extension& extension(int index) const;
  ::gnmi_ext::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
      extension() const;

  // .gnmi.Error error = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  PROTOBUF_DEPRECATED void clear_error();
  PROTOBUF_DEPRECATED const ::gnmi::Error& error() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::gnmi::Error* release_error();
  PROTOBUF_DEPRECATED ::gnmi::Error* mutable_error();
  PROTOBUF_DEPRECATED void set_allocated_error(::gnmi::Error* error);
  private:
  const ::gnmi::Error& _internal_error() const;
  ::gnmi::Error* _internal_mutable_error();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_error(
      ::gnmi::Error* error);
  PROTOBUF_DEPRECATED ::gnmi::Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:gnmi.GetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Notification > notification_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension > extension_;
  ::gnmi::Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class CapabilityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.CapabilityRequest) */ {
 public:
  inline CapabilityRequest() : CapabilityRequest(nullptr) {}
  ~CapabilityRequest() override;
  explicit constexpr CapabilityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapabilityRequest(const CapabilityRequest& from);
  CapabilityRequest(CapabilityRequest&& from) noexcept
    : CapabilityRequest() {
    *this = ::std::move(from);
  }

  inline CapabilityRequest& operator=(const CapabilityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilityRequest& operator=(CapabilityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapabilityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapabilityRequest* internal_default_instance() {
    return reinterpret_cast<const CapabilityRequest*>(
               &_CapabilityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CapabilityRequest& a, CapabilityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapabilityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapabilityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapabilityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CapabilityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CapabilityRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.CapabilityRequest";
  }
  protected:
  explicit CapabilityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionFieldNumber = 1,
  };
  // repeated .gnmi_ext.Extension extension = 1;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::gnmi_ext::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
      mutable_extension();
  private:
  const ::gnmi_ext::Extension& _internal_extension(int index) const;
  ::gnmi_ext::Extension* _internal_add_extension();
  public:
  const ::gnmi_ext::Extension& extension(int index) const;
  ::gnmi_ext::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
      extension() const;

  // @@protoc_insertion_point(class_scope:gnmi.CapabilityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension > extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class CapabilityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.CapabilityResponse) */ {
 public:
  inline CapabilityResponse() : CapabilityResponse(nullptr) {}
  ~CapabilityResponse() override;
  explicit constexpr CapabilityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapabilityResponse(const CapabilityResponse& from);
  CapabilityResponse(CapabilityResponse&& from) noexcept
    : CapabilityResponse() {
    *this = ::std::move(from);
  }

  inline CapabilityResponse& operator=(const CapabilityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilityResponse& operator=(CapabilityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapabilityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapabilityResponse* internal_default_instance() {
    return reinterpret_cast<const CapabilityResponse*>(
               &_CapabilityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CapabilityResponse& a, CapabilityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapabilityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapabilityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapabilityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CapabilityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CapabilityResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.CapabilityResponse";
  }
  protected:
  explicit CapabilityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedModelsFieldNumber = 1,
    kSupportedEncodingsFieldNumber = 2,
    kExtensionFieldNumber = 4,
    kGNMIVersionFieldNumber = 3,
  };
  // repeated .gnmi.ModelData supported_models = 1;
  int supported_models_size() const;
  private:
  int _internal_supported_models_size() const;
  public:
  void clear_supported_models();
  ::gnmi::ModelData* mutable_supported_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >*
      mutable_supported_models();
  private:
  const ::gnmi::ModelData& _internal_supported_models(int index) const;
  ::gnmi::ModelData* _internal_add_supported_models();
  public:
  const ::gnmi::ModelData& supported_models(int index) const;
  ::gnmi::ModelData* add_supported_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >&
      supported_models() const;

  // repeated .gnmi.Encoding supported_encodings = 2;
  int supported_encodings_size() const;
  private:
  int _internal_supported_encodings_size() const;
  public:
  void clear_supported_encodings();
  private:
  ::gnmi::Encoding _internal_supported_encodings(int index) const;
  void _internal_add_supported_encodings(::gnmi::Encoding value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_supported_encodings();
  public:
  ::gnmi::Encoding supported_encodings(int index) const;
  void set_supported_encodings(int index, ::gnmi::Encoding value);
  void add_supported_encodings(::gnmi::Encoding value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& supported_encodings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_supported_encodings();

  // repeated .gnmi_ext.Extension extension = 4;
  int extension_size() const;
  private:
  int _internal_extension_size() const;
  public:
  void clear_extension();
  ::gnmi_ext::Extension* mutable_extension(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
      mutable_extension();
  private:
  const ::gnmi_ext::Extension& _internal_extension(int index) const;
  ::gnmi_ext::Extension* _internal_add_extension();
  public:
  const ::gnmi_ext::Extension& extension(int index) const;
  ::gnmi_ext::Extension* add_extension();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
      extension() const;

  // string gNMI_version = 3;
  void clear_gnmi_version();
  const std::string& gnmi_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gnmi_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gnmi_version();
  PROTOBUF_NODISCARD std::string* release_gnmi_version();
  void set_allocated_gnmi_version(std::string* gnmi_version);
  private:
  const std::string& _internal_gnmi_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gnmi_version(const std::string& value);
  std::string* _internal_mutable_gnmi_version();
  public:

  // @@protoc_insertion_point(class_scope:gnmi.CapabilityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData > supported_models_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> supported_encodings_;
  mutable std::atomic<int> _supported_encodings_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension > extension_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gnmi_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// -------------------------------------------------------------------

class ModelData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi.ModelData) */ {
 public:
  inline ModelData() : ModelData(nullptr) {}
  ~ModelData() override;
  explicit constexpr ModelData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelData(const ModelData& from);
  ModelData(ModelData&& from) noexcept
    : ModelData() {
    *this = ::std::move(from);
  }

  inline ModelData& operator=(const ModelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelData& operator=(ModelData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelData* internal_default_instance() {
    return reinterpret_cast<const ModelData*>(
               &_ModelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ModelData& a, ModelData& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gnmi.ModelData";
  }
  protected:
  explicit ModelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOrganizationFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string organization = 2;
  void clear_organization();
  const std::string& organization() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization();
  PROTOBUF_NODISCARD std::string* release_organization();
  void set_allocated_organization(std::string* organization);
  private:
  const std::string& _internal_organization() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization(const std::string& value);
  std::string* _internal_mutable_organization();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:gnmi.ModelData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gnmi_2eproto;
};
// ===================================================================

static const int kGnmiServiceFieldNumber = 1001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  gnmi_service;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Notification

// int64 timestamp = 1;
inline void Notification::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t Notification::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t Notification::timestamp() const {
  // @@protoc_insertion_point(field_get:gnmi.Notification.timestamp)
  return _internal_timestamp();
}
inline void Notification::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void Notification::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gnmi.Notification.timestamp)
}

// .gnmi.Path prefix = 2;
inline bool Notification::_internal_has_prefix() const {
  return this != internal_default_instance() && prefix_ != nullptr;
}
inline bool Notification::has_prefix() const {
  return _internal_has_prefix();
}
inline void Notification::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
inline const ::gnmi::Path& Notification::_internal_prefix() const {
  const ::gnmi::Path* p = prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Path&>(
      ::gnmi::_Path_default_instance_);
}
inline const ::gnmi::Path& Notification::prefix() const {
  // @@protoc_insertion_point(field_get:gnmi.Notification.prefix)
  return _internal_prefix();
}
inline void Notification::unsafe_arena_set_allocated_prefix(
    ::gnmi::Path* prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix_);
  }
  prefix_ = prefix;
  if (prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.Notification.prefix)
}
inline ::gnmi::Path* Notification::release_prefix() {
  
  ::gnmi::Path* temp = prefix_;
  prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Path* Notification::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_release:gnmi.Notification.prefix)
  
  ::gnmi::Path* temp = prefix_;
  prefix_ = nullptr;
  return temp;
}
inline ::gnmi::Path* Notification::_internal_mutable_prefix() {
  
  if (prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Path>(GetArenaForAllocation());
    prefix_ = p;
  }
  return prefix_;
}
inline ::gnmi::Path* Notification::mutable_prefix() {
  ::gnmi::Path* _msg = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:gnmi.Notification.prefix)
  return _msg;
}
inline void Notification::set_allocated_prefix(::gnmi::Path* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prefix_;
  }
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Path>::GetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    
  } else {
    
  }
  prefix_ = prefix;
  // @@protoc_insertion_point(field_set_allocated:gnmi.Notification.prefix)
}

// repeated .gnmi.Update update = 4;
inline int Notification::_internal_update_size() const {
  return update_.size();
}
inline int Notification::update_size() const {
  return _internal_update_size();
}
inline void Notification::clear_update() {
  update_.Clear();
}
inline ::gnmi::Update* Notification::mutable_update(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.Notification.update)
  return update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >*
Notification::mutable_update() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.Notification.update)
  return &update_;
}
inline const ::gnmi::Update& Notification::_internal_update(int index) const {
  return update_.Get(index);
}
inline const ::gnmi::Update& Notification::update(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.Notification.update)
  return _internal_update(index);
}
inline ::gnmi::Update* Notification::_internal_add_update() {
  return update_.Add();
}
inline ::gnmi::Update* Notification::add_update() {
  ::gnmi::Update* _add = _internal_add_update();
  // @@protoc_insertion_point(field_add:gnmi.Notification.update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >&
Notification::update() const {
  // @@protoc_insertion_point(field_list:gnmi.Notification.update)
  return update_;
}

// repeated .gnmi.Path delete = 5;
inline int Notification::_internal_delete__size() const {
  return delete__.size();
}
inline int Notification::delete__size() const {
  return _internal_delete__size();
}
inline void Notification::clear_delete_() {
  delete__.Clear();
}
inline ::gnmi::Path* Notification::mutable_delete_(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.Notification.delete)
  return delete__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >*
Notification::mutable_delete_() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.Notification.delete)
  return &delete__;
}
inline const ::gnmi::Path& Notification::_internal_delete_(int index) const {
  return delete__.Get(index);
}
inline const ::gnmi::Path& Notification::delete_(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.Notification.delete)
  return _internal_delete_(index);
}
inline ::gnmi::Path* Notification::_internal_add_delete_() {
  return delete__.Add();
}
inline ::gnmi::Path* Notification::add_delete_() {
  ::gnmi::Path* _add = _internal_add_delete_();
  // @@protoc_insertion_point(field_add:gnmi.Notification.delete)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >&
Notification::delete_() const {
  // @@protoc_insertion_point(field_list:gnmi.Notification.delete)
  return delete__;
}

// bool atomic = 6;
inline void Notification::clear_atomic() {
  atomic_ = false;
}
inline bool Notification::_internal_atomic() const {
  return atomic_;
}
inline bool Notification::atomic() const {
  // @@protoc_insertion_point(field_get:gnmi.Notification.atomic)
  return _internal_atomic();
}
inline void Notification::_internal_set_atomic(bool value) {
  
  atomic_ = value;
}
inline void Notification::set_atomic(bool value) {
  _internal_set_atomic(value);
  // @@protoc_insertion_point(field_set:gnmi.Notification.atomic)
}

// -------------------------------------------------------------------

// Update

// .gnmi.Path path = 1;
inline bool Update::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool Update::has_path() const {
  return _internal_has_path();
}
inline void Update::clear_path() {
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::gnmi::Path& Update::_internal_path() const {
  const ::gnmi::Path* p = path_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Path&>(
      ::gnmi::_Path_default_instance_);
}
inline const ::gnmi::Path& Update::path() const {
  // @@protoc_insertion_point(field_get:gnmi.Update.path)
  return _internal_path();
}
inline void Update::unsafe_arena_set_allocated_path(
    ::gnmi::Path* path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.Update.path)
}
inline ::gnmi::Path* Update::release_path() {
  
  ::gnmi::Path* temp = path_;
  path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Path* Update::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:gnmi.Update.path)
  
  ::gnmi::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::gnmi::Path* Update::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Path>(GetArenaForAllocation());
    path_ = p;
  }
  return path_;
}
inline ::gnmi::Path* Update::mutable_path() {
  ::gnmi::Path* _msg = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:gnmi.Update.path)
  return _msg;
}
inline void Update::set_allocated_path(::gnmi::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Path>::GetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:gnmi.Update.path)
}

// .gnmi.Value value = 2 [deprecated = true];
inline bool Update::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Update::has_value() const {
  return _internal_has_value();
}
inline void Update::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::gnmi::Value& Update::_internal_value() const {
  const ::gnmi::Value* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Value&>(
      ::gnmi::_Value_default_instance_);
}
inline const ::gnmi::Value& Update::value() const {
  // @@protoc_insertion_point(field_get:gnmi.Update.value)
  return _internal_value();
}
inline void Update::unsafe_arena_set_allocated_value(
    ::gnmi::Value* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.Update.value)
}
inline ::gnmi::Value* Update::release_value() {
  
  ::gnmi::Value* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Value* Update::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:gnmi.Update.value)
  
  ::gnmi::Value* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::gnmi::Value* Update::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Value>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::gnmi::Value* Update::mutable_value() {
  ::gnmi::Value* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:gnmi.Update.value)
  return _msg;
}
inline void Update::set_allocated_value(::gnmi::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Value>::GetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:gnmi.Update.value)
}

// .gnmi.TypedValue val = 3;
inline bool Update::_internal_has_val() const {
  return this != internal_default_instance() && val_ != nullptr;
}
inline bool Update::has_val() const {
  return _internal_has_val();
}
inline void Update::clear_val() {
  if (GetArenaForAllocation() == nullptr && val_ != nullptr) {
    delete val_;
  }
  val_ = nullptr;
}
inline const ::gnmi::TypedValue& Update::_internal_val() const {
  const ::gnmi::TypedValue* p = val_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::TypedValue&>(
      ::gnmi::_TypedValue_default_instance_);
}
inline const ::gnmi::TypedValue& Update::val() const {
  // @@protoc_insertion_point(field_get:gnmi.Update.val)
  return _internal_val();
}
inline void Update::unsafe_arena_set_allocated_val(
    ::gnmi::TypedValue* val) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(val_);
  }
  val_ = val;
  if (val) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.Update.val)
}
inline ::gnmi::TypedValue* Update::release_val() {
  
  ::gnmi::TypedValue* temp = val_;
  val_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::TypedValue* Update::unsafe_arena_release_val() {
  // @@protoc_insertion_point(field_release:gnmi.Update.val)
  
  ::gnmi::TypedValue* temp = val_;
  val_ = nullptr;
  return temp;
}
inline ::gnmi::TypedValue* Update::_internal_mutable_val() {
  
  if (val_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::TypedValue>(GetArenaForAllocation());
    val_ = p;
  }
  return val_;
}
inline ::gnmi::TypedValue* Update::mutable_val() {
  ::gnmi::TypedValue* _msg = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:gnmi.Update.val)
  return _msg;
}
inline void Update::set_allocated_val(::gnmi::TypedValue* val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete val_;
  }
  if (val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::TypedValue>::GetOwningArena(val);
    if (message_arena != submessage_arena) {
      val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, val, submessage_arena);
    }
    
  } else {
    
  }
  val_ = val;
  // @@protoc_insertion_point(field_set_allocated:gnmi.Update.val)
}

// uint32 duplicates = 4;
inline void Update::clear_duplicates() {
  duplicates_ = 0u;
}
inline uint32_t Update::_internal_duplicates() const {
  return duplicates_;
}
inline uint32_t Update::duplicates() const {
  // @@protoc_insertion_point(field_get:gnmi.Update.duplicates)
  return _internal_duplicates();
}
inline void Update::_internal_set_duplicates(uint32_t value) {
  
  duplicates_ = value;
}
inline void Update::set_duplicates(uint32_t value) {
  _internal_set_duplicates(value);
  // @@protoc_insertion_point(field_set:gnmi.Update.duplicates)
}

// -------------------------------------------------------------------

// TypedValue

// string string_val = 1;
inline bool TypedValue::_internal_has_string_val() const {
  return value_case() == kStringVal;
}
inline bool TypedValue::has_string_val() const {
  return _internal_has_string_val();
}
inline void TypedValue::set_has_string_val() {
  _oneof_case_[0] = kStringVal;
}
inline void TypedValue::clear_string_val() {
  if (_internal_has_string_val()) {
    value_.string_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& TypedValue::string_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.string_val)
  return _internal_string_val();
}
template <typename ArgT0, typename... ArgT>
inline void TypedValue::set_string_val(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    value_.string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.string_val)
}
inline std::string* TypedValue::mutable_string_val() {
  std::string* _s = _internal_mutable_string_val();
  // @@protoc_insertion_point(field_mutable:gnmi.TypedValue.string_val)
  return _s;
}
inline const std::string& TypedValue::_internal_string_val() const {
  if (_internal_has_string_val()) {
    return value_.string_val_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValue::_internal_set_string_val(const std::string& value) {
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    value_.string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TypedValue::_internal_mutable_string_val() {
  if (!_internal_has_string_val()) {
    clear_value();
    set_has_string_val();
    value_.string_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_val_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TypedValue::release_string_val() {
  // @@protoc_insertion_point(field_release:gnmi.TypedValue.string_val)
  if (_internal_has_string_val()) {
    clear_has_value();
    return value_.string_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TypedValue::set_allocated_string_val(std::string* string_val) {
  if (has_value()) {
    clear_value();
  }
  if (string_val != nullptr) {
    set_has_string_val();
    value_.string_val_.UnsafeSetDefault(string_val);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_val);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.string_val)
}

// int64 int_val = 2;
inline bool TypedValue::_internal_has_int_val() const {
  return value_case() == kIntVal;
}
inline bool TypedValue::has_int_val() const {
  return _internal_has_int_val();
}
inline void TypedValue::set_has_int_val() {
  _oneof_case_[0] = kIntVal;
}
inline void TypedValue::clear_int_val() {
  if (_internal_has_int_val()) {
    value_.int_val_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t TypedValue::_internal_int_val() const {
  if (_internal_has_int_val()) {
    return value_.int_val_;
  }
  return int64_t{0};
}
inline void TypedValue::_internal_set_int_val(int64_t value) {
  if (!_internal_has_int_val()) {
    clear_value();
    set_has_int_val();
  }
  value_.int_val_ = value;
}
inline int64_t TypedValue::int_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.int_val)
  return _internal_int_val();
}
inline void TypedValue::set_int_val(int64_t value) {
  _internal_set_int_val(value);
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.int_val)
}

// uint64 uint_val = 3;
inline bool TypedValue::_internal_has_uint_val() const {
  return value_case() == kUintVal;
}
inline bool TypedValue::has_uint_val() const {
  return _internal_has_uint_val();
}
inline void TypedValue::set_has_uint_val() {
  _oneof_case_[0] = kUintVal;
}
inline void TypedValue::clear_uint_val() {
  if (_internal_has_uint_val()) {
    value_.uint_val_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t TypedValue::_internal_uint_val() const {
  if (_internal_has_uint_val()) {
    return value_.uint_val_;
  }
  return uint64_t{0u};
}
inline void TypedValue::_internal_set_uint_val(uint64_t value) {
  if (!_internal_has_uint_val()) {
    clear_value();
    set_has_uint_val();
  }
  value_.uint_val_ = value;
}
inline uint64_t TypedValue::uint_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.uint_val)
  return _internal_uint_val();
}
inline void TypedValue::set_uint_val(uint64_t value) {
  _internal_set_uint_val(value);
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.uint_val)
}

// bool bool_val = 4;
inline bool TypedValue::_internal_has_bool_val() const {
  return value_case() == kBoolVal;
}
inline bool TypedValue::has_bool_val() const {
  return _internal_has_bool_val();
}
inline void TypedValue::set_has_bool_val() {
  _oneof_case_[0] = kBoolVal;
}
inline void TypedValue::clear_bool_val() {
  if (_internal_has_bool_val()) {
    value_.bool_val_ = false;
    clear_has_value();
  }
}
inline bool TypedValue::_internal_bool_val() const {
  if (_internal_has_bool_val()) {
    return value_.bool_val_;
  }
  return false;
}
inline void TypedValue::_internal_set_bool_val(bool value) {
  if (!_internal_has_bool_val()) {
    clear_value();
    set_has_bool_val();
  }
  value_.bool_val_ = value;
}
inline bool TypedValue::bool_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.bool_val)
  return _internal_bool_val();
}
inline void TypedValue::set_bool_val(bool value) {
  _internal_set_bool_val(value);
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.bool_val)
}

// bytes bytes_val = 5;
inline bool TypedValue::_internal_has_bytes_val() const {
  return value_case() == kBytesVal;
}
inline bool TypedValue::has_bytes_val() const {
  return _internal_has_bytes_val();
}
inline void TypedValue::set_has_bytes_val() {
  _oneof_case_[0] = kBytesVal;
}
inline void TypedValue::clear_bytes_val() {
  if (_internal_has_bytes_val()) {
    value_.bytes_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& TypedValue::bytes_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.bytes_val)
  return _internal_bytes_val();
}
template <typename ArgT0, typename... ArgT>
inline void TypedValue::set_bytes_val(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_val()) {
    clear_value();
    set_has_bytes_val();
    value_.bytes_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_val_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.bytes_val)
}
inline std::string* TypedValue::mutable_bytes_val() {
  std::string* _s = _internal_mutable_bytes_val();
  // @@protoc_insertion_point(field_mutable:gnmi.TypedValue.bytes_val)
  return _s;
}
inline const std::string& TypedValue::_internal_bytes_val() const {
  if (_internal_has_bytes_val()) {
    return value_.bytes_val_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValue::_internal_set_bytes_val(const std::string& value) {
  if (!_internal_has_bytes_val()) {
    clear_value();
    set_has_bytes_val();
    value_.bytes_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.bytes_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TypedValue::_internal_mutable_bytes_val() {
  if (!_internal_has_bytes_val()) {
    clear_value();
    set_has_bytes_val();
    value_.bytes_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.bytes_val_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TypedValue::release_bytes_val() {
  // @@protoc_insertion_point(field_release:gnmi.TypedValue.bytes_val)
  if (_internal_has_bytes_val()) {
    clear_has_value();
    return value_.bytes_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TypedValue::set_allocated_bytes_val(std::string* bytes_val) {
  if (has_value()) {
    clear_value();
  }
  if (bytes_val != nullptr) {
    set_has_bytes_val();
    value_.bytes_val_.UnsafeSetDefault(bytes_val);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(bytes_val);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.bytes_val)
}

// float float_val = 6 [deprecated = true];
inline bool TypedValue::_internal_has_float_val() const {
  return value_case() == kFloatVal;
}
inline bool TypedValue::has_float_val() const {
  return _internal_has_float_val();
}
inline void TypedValue::set_has_float_val() {
  _oneof_case_[0] = kFloatVal;
}
inline void TypedValue::clear_float_val() {
  if (_internal_has_float_val()) {
    value_.float_val_ = 0;
    clear_has_value();
  }
}
inline float TypedValue::_internal_float_val() const {
  if (_internal_has_float_val()) {
    return value_.float_val_;
  }
  return 0;
}
inline void TypedValue::_internal_set_float_val(float value) {
  if (!_internal_has_float_val()) {
    clear_value();
    set_has_float_val();
  }
  value_.float_val_ = value;
}
inline float TypedValue::float_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.float_val)
  return _internal_float_val();
}
inline void TypedValue::set_float_val(float value) {
  _internal_set_float_val(value);
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.float_val)
}

// double double_val = 14;
inline bool TypedValue::_internal_has_double_val() const {
  return value_case() == kDoubleVal;
}
inline bool TypedValue::has_double_val() const {
  return _internal_has_double_val();
}
inline void TypedValue::set_has_double_val() {
  _oneof_case_[0] = kDoubleVal;
}
inline void TypedValue::clear_double_val() {
  if (_internal_has_double_val()) {
    value_.double_val_ = 0;
    clear_has_value();
  }
}
inline double TypedValue::_internal_double_val() const {
  if (_internal_has_double_val()) {
    return value_.double_val_;
  }
  return 0;
}
inline void TypedValue::_internal_set_double_val(double value) {
  if (!_internal_has_double_val()) {
    clear_value();
    set_has_double_val();
  }
  value_.double_val_ = value;
}
inline double TypedValue::double_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.double_val)
  return _internal_double_val();
}
inline void TypedValue::set_double_val(double value) {
  _internal_set_double_val(value);
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.double_val)
}

// .gnmi.Decimal64 decimal_val = 7 [deprecated = true];
inline bool TypedValue::_internal_has_decimal_val() const {
  return value_case() == kDecimalVal;
}
inline bool TypedValue::has_decimal_val() const {
  return _internal_has_decimal_val();
}
inline void TypedValue::set_has_decimal_val() {
  _oneof_case_[0] = kDecimalVal;
}
inline void TypedValue::clear_decimal_val() {
  if (_internal_has_decimal_val()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.decimal_val_;
    }
    clear_has_value();
  }
}
inline ::gnmi::Decimal64* TypedValue::release_decimal_val() {
  // @@protoc_insertion_point(field_release:gnmi.TypedValue.decimal_val)
  if (_internal_has_decimal_val()) {
    clear_has_value();
      ::gnmi::Decimal64* temp = value_.decimal_val_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.decimal_val_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gnmi::Decimal64& TypedValue::_internal_decimal_val() const {
  return _internal_has_decimal_val()
      ? *value_.decimal_val_
      : reinterpret_cast< ::gnmi::Decimal64&>(::gnmi::_Decimal64_default_instance_);
}
inline const ::gnmi::Decimal64& TypedValue::decimal_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.decimal_val)
  return _internal_decimal_val();
}
inline ::gnmi::Decimal64* TypedValue::unsafe_arena_release_decimal_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnmi.TypedValue.decimal_val)
  if (_internal_has_decimal_val()) {
    clear_has_value();
    ::gnmi::Decimal64* temp = value_.decimal_val_;
    value_.decimal_val_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypedValue::unsafe_arena_set_allocated_decimal_val(::gnmi::Decimal64* decimal_val) {
  clear_value();
  if (decimal_val) {
    set_has_decimal_val();
    value_.decimal_val_ = decimal_val;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.TypedValue.decimal_val)
}
inline ::gnmi::Decimal64* TypedValue::_internal_mutable_decimal_val() {
  if (!_internal_has_decimal_val()) {
    clear_value();
    set_has_decimal_val();
    value_.decimal_val_ = CreateMaybeMessage< ::gnmi::Decimal64 >(GetArenaForAllocation());
  }
  return value_.decimal_val_;
}
inline ::gnmi::Decimal64* TypedValue::mutable_decimal_val() {
  ::gnmi::Decimal64* _msg = _internal_mutable_decimal_val();
  // @@protoc_insertion_point(field_mutable:gnmi.TypedValue.decimal_val)
  return _msg;
}

// .gnmi.ScalarArray leaflist_val = 8;
inline bool TypedValue::_internal_has_leaflist_val() const {
  return value_case() == kLeaflistVal;
}
inline bool TypedValue::has_leaflist_val() const {
  return _internal_has_leaflist_val();
}
inline void TypedValue::set_has_leaflist_val() {
  _oneof_case_[0] = kLeaflistVal;
}
inline void TypedValue::clear_leaflist_val() {
  if (_internal_has_leaflist_val()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.leaflist_val_;
    }
    clear_has_value();
  }
}
inline ::gnmi::ScalarArray* TypedValue::release_leaflist_val() {
  // @@protoc_insertion_point(field_release:gnmi.TypedValue.leaflist_val)
  if (_internal_has_leaflist_val()) {
    clear_has_value();
      ::gnmi::ScalarArray* temp = value_.leaflist_val_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.leaflist_val_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gnmi::ScalarArray& TypedValue::_internal_leaflist_val() const {
  return _internal_has_leaflist_val()
      ? *value_.leaflist_val_
      : reinterpret_cast< ::gnmi::ScalarArray&>(::gnmi::_ScalarArray_default_instance_);
}
inline const ::gnmi::ScalarArray& TypedValue::leaflist_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.leaflist_val)
  return _internal_leaflist_val();
}
inline ::gnmi::ScalarArray* TypedValue::unsafe_arena_release_leaflist_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnmi.TypedValue.leaflist_val)
  if (_internal_has_leaflist_val()) {
    clear_has_value();
    ::gnmi::ScalarArray* temp = value_.leaflist_val_;
    value_.leaflist_val_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypedValue::unsafe_arena_set_allocated_leaflist_val(::gnmi::ScalarArray* leaflist_val) {
  clear_value();
  if (leaflist_val) {
    set_has_leaflist_val();
    value_.leaflist_val_ = leaflist_val;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.TypedValue.leaflist_val)
}
inline ::gnmi::ScalarArray* TypedValue::_internal_mutable_leaflist_val() {
  if (!_internal_has_leaflist_val()) {
    clear_value();
    set_has_leaflist_val();
    value_.leaflist_val_ = CreateMaybeMessage< ::gnmi::ScalarArray >(GetArenaForAllocation());
  }
  return value_.leaflist_val_;
}
inline ::gnmi::ScalarArray* TypedValue::mutable_leaflist_val() {
  ::gnmi::ScalarArray* _msg = _internal_mutable_leaflist_val();
  // @@protoc_insertion_point(field_mutable:gnmi.TypedValue.leaflist_val)
  return _msg;
}

// .google.protobuf.Any any_val = 9;
inline bool TypedValue::_internal_has_any_val() const {
  return value_case() == kAnyVal;
}
inline bool TypedValue::has_any_val() const {
  return _internal_has_any_val();
}
inline void TypedValue::set_has_any_val() {
  _oneof_case_[0] = kAnyVal;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TypedValue::release_any_val() {
  // @@protoc_insertion_point(field_release:gnmi.TypedValue.any_val)
  if (_internal_has_any_val()) {
    clear_has_value();
      ::PROTOBUF_NAMESPACE_ID::Any* temp = value_.any_val_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.any_val_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TypedValue::_internal_any_val() const {
  return _internal_has_any_val()
      ? *value_.any_val_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Any&>(::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TypedValue::any_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.any_val)
  return _internal_any_val();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TypedValue::unsafe_arena_release_any_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnmi.TypedValue.any_val)
  if (_internal_has_any_val()) {
    clear_has_value();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = value_.any_val_;
    value_.any_val_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypedValue::unsafe_arena_set_allocated_any_val(::PROTOBUF_NAMESPACE_ID::Any* any_val) {
  clear_value();
  if (any_val) {
    set_has_any_val();
    value_.any_val_ = any_val;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.TypedValue.any_val)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TypedValue::_internal_mutable_any_val() {
  if (!_internal_has_any_val()) {
    clear_value();
    set_has_any_val();
    value_.any_val_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Any >(GetArenaForAllocation());
  }
  return value_.any_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TypedValue::mutable_any_val() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_any_val();
  // @@protoc_insertion_point(field_mutable:gnmi.TypedValue.any_val)
  return _msg;
}

// bytes json_val = 10;
inline bool TypedValue::_internal_has_json_val() const {
  return value_case() == kJsonVal;
}
inline bool TypedValue::has_json_val() const {
  return _internal_has_json_val();
}
inline void TypedValue::set_has_json_val() {
  _oneof_case_[0] = kJsonVal;
}
inline void TypedValue::clear_json_val() {
  if (_internal_has_json_val()) {
    value_.json_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& TypedValue::json_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.json_val)
  return _internal_json_val();
}
template <typename ArgT0, typename... ArgT>
inline void TypedValue::set_json_val(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_json_val()) {
    clear_value();
    set_has_json_val();
    value_.json_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_val_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.json_val)
}
inline std::string* TypedValue::mutable_json_val() {
  std::string* _s = _internal_mutable_json_val();
  // @@protoc_insertion_point(field_mutable:gnmi.TypedValue.json_val)
  return _s;
}
inline const std::string& TypedValue::_internal_json_val() const {
  if (_internal_has_json_val()) {
    return value_.json_val_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValue::_internal_set_json_val(const std::string& value) {
  if (!_internal_has_json_val()) {
    clear_value();
    set_has_json_val();
    value_.json_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TypedValue::_internal_mutable_json_val() {
  if (!_internal_has_json_val()) {
    clear_value();
    set_has_json_val();
    value_.json_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.json_val_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TypedValue::release_json_val() {
  // @@protoc_insertion_point(field_release:gnmi.TypedValue.json_val)
  if (_internal_has_json_val()) {
    clear_has_value();
    return value_.json_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TypedValue::set_allocated_json_val(std::string* json_val) {
  if (has_value()) {
    clear_value();
  }
  if (json_val != nullptr) {
    set_has_json_val();
    value_.json_val_.UnsafeSetDefault(json_val);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(json_val);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.json_val)
}

// bytes json_ietf_val = 11;
inline bool TypedValue::_internal_has_json_ietf_val() const {
  return value_case() == kJsonIetfVal;
}
inline bool TypedValue::has_json_ietf_val() const {
  return _internal_has_json_ietf_val();
}
inline void TypedValue::set_has_json_ietf_val() {
  _oneof_case_[0] = kJsonIetfVal;
}
inline void TypedValue::clear_json_ietf_val() {
  if (_internal_has_json_ietf_val()) {
    value_.json_ietf_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& TypedValue::json_ietf_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.json_ietf_val)
  return _internal_json_ietf_val();
}
template <typename ArgT0, typename... ArgT>
inline void TypedValue::set_json_ietf_val(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_json_ietf_val()) {
    clear_value();
    set_has_json_ietf_val();
    value_.json_ietf_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_ietf_val_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.json_ietf_val)
}
inline std::string* TypedValue::mutable_json_ietf_val() {
  std::string* _s = _internal_mutable_json_ietf_val();
  // @@protoc_insertion_point(field_mutable:gnmi.TypedValue.json_ietf_val)
  return _s;
}
inline const std::string& TypedValue::_internal_json_ietf_val() const {
  if (_internal_has_json_ietf_val()) {
    return value_.json_ietf_val_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValue::_internal_set_json_ietf_val(const std::string& value) {
  if (!_internal_has_json_ietf_val()) {
    clear_value();
    set_has_json_ietf_val();
    value_.json_ietf_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.json_ietf_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TypedValue::_internal_mutable_json_ietf_val() {
  if (!_internal_has_json_ietf_val()) {
    clear_value();
    set_has_json_ietf_val();
    value_.json_ietf_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.json_ietf_val_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TypedValue::release_json_ietf_val() {
  // @@protoc_insertion_point(field_release:gnmi.TypedValue.json_ietf_val)
  if (_internal_has_json_ietf_val()) {
    clear_has_value();
    return value_.json_ietf_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TypedValue::set_allocated_json_ietf_val(std::string* json_ietf_val) {
  if (has_value()) {
    clear_value();
  }
  if (json_ietf_val != nullptr) {
    set_has_json_ietf_val();
    value_.json_ietf_val_.UnsafeSetDefault(json_ietf_val);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(json_ietf_val);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.json_ietf_val)
}

// string ascii_val = 12;
inline bool TypedValue::_internal_has_ascii_val() const {
  return value_case() == kAsciiVal;
}
inline bool TypedValue::has_ascii_val() const {
  return _internal_has_ascii_val();
}
inline void TypedValue::set_has_ascii_val() {
  _oneof_case_[0] = kAsciiVal;
}
inline void TypedValue::clear_ascii_val() {
  if (_internal_has_ascii_val()) {
    value_.ascii_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& TypedValue::ascii_val() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.ascii_val)
  return _internal_ascii_val();
}
template <typename ArgT0, typename... ArgT>
inline void TypedValue::set_ascii_val(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ascii_val()) {
    clear_value();
    set_has_ascii_val();
    value_.ascii_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.ascii_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.ascii_val)
}
inline std::string* TypedValue::mutable_ascii_val() {
  std::string* _s = _internal_mutable_ascii_val();
  // @@protoc_insertion_point(field_mutable:gnmi.TypedValue.ascii_val)
  return _s;
}
inline const std::string& TypedValue::_internal_ascii_val() const {
  if (_internal_has_ascii_val()) {
    return value_.ascii_val_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValue::_internal_set_ascii_val(const std::string& value) {
  if (!_internal_has_ascii_val()) {
    clear_value();
    set_has_ascii_val();
    value_.ascii_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.ascii_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TypedValue::_internal_mutable_ascii_val() {
  if (!_internal_has_ascii_val()) {
    clear_value();
    set_has_ascii_val();
    value_.ascii_val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.ascii_val_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TypedValue::release_ascii_val() {
  // @@protoc_insertion_point(field_release:gnmi.TypedValue.ascii_val)
  if (_internal_has_ascii_val()) {
    clear_has_value();
    return value_.ascii_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TypedValue::set_allocated_ascii_val(std::string* ascii_val) {
  if (has_value()) {
    clear_value();
  }
  if (ascii_val != nullptr) {
    set_has_ascii_val();
    value_.ascii_val_.UnsafeSetDefault(ascii_val);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(ascii_val);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.ascii_val)
}

// bytes proto_bytes = 13;
inline bool TypedValue::_internal_has_proto_bytes() const {
  return value_case() == kProtoBytes;
}
inline bool TypedValue::has_proto_bytes() const {
  return _internal_has_proto_bytes();
}
inline void TypedValue::set_has_proto_bytes() {
  _oneof_case_[0] = kProtoBytes;
}
inline void TypedValue::clear_proto_bytes() {
  if (_internal_has_proto_bytes()) {
    value_.proto_bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_value();
  }
}
inline const std::string& TypedValue::proto_bytes() const {
  // @@protoc_insertion_point(field_get:gnmi.TypedValue.proto_bytes)
  return _internal_proto_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void TypedValue::set_proto_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_proto_bytes()) {
    clear_value();
    set_has_proto_bytes();
    value_.proto_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.proto_bytes_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.TypedValue.proto_bytes)
}
inline std::string* TypedValue::mutable_proto_bytes() {
  std::string* _s = _internal_mutable_proto_bytes();
  // @@protoc_insertion_point(field_mutable:gnmi.TypedValue.proto_bytes)
  return _s;
}
inline const std::string& TypedValue::_internal_proto_bytes() const {
  if (_internal_has_proto_bytes()) {
    return value_.proto_bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TypedValue::_internal_set_proto_bytes(const std::string& value) {
  if (!_internal_has_proto_bytes()) {
    clear_value();
    set_has_proto_bytes();
    value_.proto_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.proto_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TypedValue::_internal_mutable_proto_bytes() {
  if (!_internal_has_proto_bytes()) {
    clear_value();
    set_has_proto_bytes();
    value_.proto_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.proto_bytes_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TypedValue::release_proto_bytes() {
  // @@protoc_insertion_point(field_release:gnmi.TypedValue.proto_bytes)
  if (_internal_has_proto_bytes()) {
    clear_has_value();
    return value_.proto_bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void TypedValue::set_allocated_proto_bytes(std::string* proto_bytes) {
  if (has_value()) {
    clear_value();
  }
  if (proto_bytes != nullptr) {
    set_has_proto_bytes();
    value_.proto_bytes_.UnsafeSetDefault(proto_bytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(proto_bytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.proto_bytes)
}

inline bool TypedValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TypedValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TypedValue::ValueCase TypedValue::value_case() const {
  return TypedValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Path

// repeated string element = 1 [deprecated = true];
inline int Path::_internal_element_size() const {
  return element_.size();
}
inline int Path::element_size() const {
  return _internal_element_size();
}
inline void Path::clear_element() {
  element_.Clear();
}
inline std::string* Path::add_element() {
  std::string* _s = _internal_add_element();
  // @@protoc_insertion_point(field_add_mutable:gnmi.Path.element)
  return _s;
}
inline const std::string& Path::_internal_element(int index) const {
  return element_.Get(index);
}
inline const std::string& Path::element(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.Path.element)
  return _internal_element(index);
}
inline std::string* Path::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.Path.element)
  return element_.Mutable(index);
}
inline void Path::set_element(int index, const std::string& value) {
  element_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gnmi.Path.element)
}
inline void Path::set_element(int index, std::string&& value) {
  element_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gnmi.Path.element)
}
inline void Path::set_element(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  element_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gnmi.Path.element)
}
inline void Path::set_element(int index, const char* value, size_t size) {
  element_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gnmi.Path.element)
}
inline std::string* Path::_internal_add_element() {
  return element_.Add();
}
inline void Path::add_element(const std::string& value) {
  element_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gnmi.Path.element)
}
inline void Path::add_element(std::string&& value) {
  element_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gnmi.Path.element)
}
inline void Path::add_element(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  element_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gnmi.Path.element)
}
inline void Path::add_element(const char* value, size_t size) {
  element_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gnmi.Path.element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Path::element() const {
  // @@protoc_insertion_point(field_list:gnmi.Path.element)
  return element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Path::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.Path.element)
  return &element_;
}

// string origin = 2;
inline void Path::clear_origin() {
  origin_.ClearToEmpty();
}
inline const std::string& Path::origin() const {
  // @@protoc_insertion_point(field_get:gnmi.Path.origin)
  return _internal_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Path::set_origin(ArgT0&& arg0, ArgT... args) {
 
 origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.Path.origin)
}
inline std::string* Path::mutable_origin() {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:gnmi.Path.origin)
  return _s;
}
inline const std::string& Path::_internal_origin() const {
  return origin_.Get();
}
inline void Path::_internal_set_origin(const std::string& value) {
  
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Path::_internal_mutable_origin() {
  
  return origin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Path::release_origin() {
  // @@protoc_insertion_point(field_release:gnmi.Path.origin)
  return origin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Path::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    
  } else {
    
  }
  origin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnmi.Path.origin)
}

// repeated .gnmi.PathElem elem = 3;
inline int Path::_internal_elem_size() const {
  return elem_.size();
}
inline int Path::elem_size() const {
  return _internal_elem_size();
}
inline void Path::clear_elem() {
  elem_.Clear();
}
inline ::gnmi::PathElem* Path::mutable_elem(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.Path.elem)
  return elem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::PathElem >*
Path::mutable_elem() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.Path.elem)
  return &elem_;
}
inline const ::gnmi::PathElem& Path::_internal_elem(int index) const {
  return elem_.Get(index);
}
inline const ::gnmi::PathElem& Path::elem(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.Path.elem)
  return _internal_elem(index);
}
inline ::gnmi::PathElem* Path::_internal_add_elem() {
  return elem_.Add();
}
inline ::gnmi::PathElem* Path::add_elem() {
  ::gnmi::PathElem* _add = _internal_add_elem();
  // @@protoc_insertion_point(field_add:gnmi.Path.elem)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::PathElem >&
Path::elem() const {
  // @@protoc_insertion_point(field_list:gnmi.Path.elem)
  return elem_;
}

// string target = 4;
inline void Path::clear_target() {
  target_.ClearToEmpty();
}
inline const std::string& Path::target() const {
  // @@protoc_insertion_point(field_get:gnmi.Path.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Path::set_target(ArgT0&& arg0, ArgT... args) {
 
 target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.Path.target)
}
inline std::string* Path::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:gnmi.Path.target)
  return _s;
}
inline const std::string& Path::_internal_target() const {
  return target_.Get();
}
inline void Path::_internal_set_target(const std::string& value) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Path::_internal_mutable_target() {
  
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Path::release_target() {
  // @@protoc_insertion_point(field_release:gnmi.Path.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Path::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnmi.Path.target)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PathElem

// string name = 1;
inline void PathElem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PathElem::name() const {
  // @@protoc_insertion_point(field_get:gnmi.PathElem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathElem::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.PathElem.name)
}
inline std::string* PathElem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gnmi.PathElem.name)
  return _s;
}
inline const std::string& PathElem::_internal_name() const {
  return name_.Get();
}
inline void PathElem::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathElem::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathElem::release_name() {
  // @@protoc_insertion_point(field_release:gnmi.PathElem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PathElem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnmi.PathElem.name)
}

// map<string, string> key = 2;
inline int PathElem::_internal_key_size() const {
  return key_.size();
}
inline int PathElem::key_size() const {
  return _internal_key_size();
}
inline void PathElem::clear_key() {
  key_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PathElem::_internal_key() const {
  return key_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PathElem::key() const {
  // @@protoc_insertion_point(field_map:gnmi.PathElem.key)
  return _internal_key();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PathElem::_internal_mutable_key() {
  return key_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PathElem::mutable_key() {
  // @@protoc_insertion_point(field_mutable_map:gnmi.PathElem.key)
  return _internal_mutable_key();
}

// -------------------------------------------------------------------

// Value

// bytes value = 1;
inline void Value::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Value::value() const {
  // @@protoc_insertion_point(field_get:gnmi.Value.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Value::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.Value.value)
}
inline std::string* Value::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:gnmi.Value.value)
  return _s;
}
inline const std::string& Value::_internal_value() const {
  return value_.Get();
}
inline void Value::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Value::release_value() {
  // @@protoc_insertion_point(field_release:gnmi.Value.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Value::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnmi.Value.value)
}

// .gnmi.Encoding type = 2;
inline void Value::clear_type() {
  type_ = 0;
}
inline ::gnmi::Encoding Value::_internal_type() const {
  return static_cast< ::gnmi::Encoding >(type_);
}
inline ::gnmi::Encoding Value::type() const {
  // @@protoc_insertion_point(field_get:gnmi.Value.type)
  return _internal_type();
}
inline void Value::_internal_set_type(::gnmi::Encoding value) {
  
  type_ = value;
}
inline void Value::set_type(::gnmi::Encoding value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gnmi.Value.type)
}

// -------------------------------------------------------------------

// Error

// uint32 code = 1;
inline void Error::clear_code() {
  code_ = 0u;
}
inline uint32_t Error::_internal_code() const {
  return code_;
}
inline uint32_t Error::code() const {
  // @@protoc_insertion_point(field_get:gnmi.Error.code)
  return _internal_code();
}
inline void Error::_internal_set_code(uint32_t value) {
  
  code_ = value;
}
inline void Error::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:gnmi.Error.code)
}

// string message = 2;
inline void Error::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:gnmi.Error.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Error::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.Error.message)
}
inline std::string* Error::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:gnmi.Error.message)
  return _s;
}
inline const std::string& Error::_internal_message() const {
  return message_.Get();
}
inline void Error::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:gnmi.Error.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnmi.Error.message)
}

// .google.protobuf.Any data = 3;
inline bool Error::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool Error::has_data() const {
  return _internal_has_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Error::_internal_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Error::data() const {
  // @@protoc_insertion_point(field_get:gnmi.Error.data)
  return _internal_data();
}
inline void Error::unsafe_arena_set_allocated_data(
    ::PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.Error.data)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Error::release_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Error::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:gnmi.Error.data)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Error::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Error::mutable_data() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:gnmi.Error.data)
  return _msg;
}
inline void Error::set_allocated_data(::PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:gnmi.Error.data)
}

// -------------------------------------------------------------------

// Decimal64

// int64 digits = 1;
inline void Decimal64::clear_digits() {
  digits_ = int64_t{0};
}
inline int64_t Decimal64::_internal_digits() const {
  return digits_;
}
inline int64_t Decimal64::digits() const {
  // @@protoc_insertion_point(field_get:gnmi.Decimal64.digits)
  return _internal_digits();
}
inline void Decimal64::_internal_set_digits(int64_t value) {
  
  digits_ = value;
}
inline void Decimal64::set_digits(int64_t value) {
  _internal_set_digits(value);
  // @@protoc_insertion_point(field_set:gnmi.Decimal64.digits)
}

// uint32 precision = 2;
inline void Decimal64::clear_precision() {
  precision_ = 0u;
}
inline uint32_t Decimal64::_internal_precision() const {
  return precision_;
}
inline uint32_t Decimal64::precision() const {
  // @@protoc_insertion_point(field_get:gnmi.Decimal64.precision)
  return _internal_precision();
}
inline void Decimal64::_internal_set_precision(uint32_t value) {
  
  precision_ = value;
}
inline void Decimal64::set_precision(uint32_t value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:gnmi.Decimal64.precision)
}

// -------------------------------------------------------------------

// ScalarArray

// repeated .gnmi.TypedValue element = 1;
inline int ScalarArray::_internal_element_size() const {
  return element_.size();
}
inline int ScalarArray::element_size() const {
  return _internal_element_size();
}
inline void ScalarArray::clear_element() {
  element_.Clear();
}
inline ::gnmi::TypedValue* ScalarArray::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.ScalarArray.element)
  return element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::TypedValue >*
ScalarArray::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.ScalarArray.element)
  return &element_;
}
inline const ::gnmi::TypedValue& ScalarArray::_internal_element(int index) const {
  return element_.Get(index);
}
inline const ::gnmi::TypedValue& ScalarArray::element(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.ScalarArray.element)
  return _internal_element(index);
}
inline ::gnmi::TypedValue* ScalarArray::_internal_add_element() {
  return element_.Add();
}
inline ::gnmi::TypedValue* ScalarArray::add_element() {
  ::gnmi::TypedValue* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:gnmi.ScalarArray.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::TypedValue >&
ScalarArray::element() const {
  // @@protoc_insertion_point(field_list:gnmi.ScalarArray.element)
  return element_;
}

// -------------------------------------------------------------------

// SubscribeRequest

// .gnmi.SubscriptionList subscribe = 1;
inline bool SubscribeRequest::_internal_has_subscribe() const {
  return request_case() == kSubscribe;
}
inline bool SubscribeRequest::has_subscribe() const {
  return _internal_has_subscribe();
}
inline void SubscribeRequest::set_has_subscribe() {
  _oneof_case_[0] = kSubscribe;
}
inline void SubscribeRequest::clear_subscribe() {
  if (_internal_has_subscribe()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.subscribe_;
    }
    clear_has_request();
  }
}
inline ::gnmi::SubscriptionList* SubscribeRequest::release_subscribe() {
  // @@protoc_insertion_point(field_release:gnmi.SubscribeRequest.subscribe)
  if (_internal_has_subscribe()) {
    clear_has_request();
      ::gnmi::SubscriptionList* temp = request_.subscribe_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.subscribe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gnmi::SubscriptionList& SubscribeRequest::_internal_subscribe() const {
  return _internal_has_subscribe()
      ? *request_.subscribe_
      : reinterpret_cast< ::gnmi::SubscriptionList&>(::gnmi::_SubscriptionList_default_instance_);
}
inline const ::gnmi::SubscriptionList& SubscribeRequest::subscribe() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscribeRequest.subscribe)
  return _internal_subscribe();
}
inline ::gnmi::SubscriptionList* SubscribeRequest::unsafe_arena_release_subscribe() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnmi.SubscribeRequest.subscribe)
  if (_internal_has_subscribe()) {
    clear_has_request();
    ::gnmi::SubscriptionList* temp = request_.subscribe_;
    request_.subscribe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubscribeRequest::unsafe_arena_set_allocated_subscribe(::gnmi::SubscriptionList* subscribe) {
  clear_request();
  if (subscribe) {
    set_has_subscribe();
    request_.subscribe_ = subscribe;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.SubscribeRequest.subscribe)
}
inline ::gnmi::SubscriptionList* SubscribeRequest::_internal_mutable_subscribe() {
  if (!_internal_has_subscribe()) {
    clear_request();
    set_has_subscribe();
    request_.subscribe_ = CreateMaybeMessage< ::gnmi::SubscriptionList >(GetArenaForAllocation());
  }
  return request_.subscribe_;
}
inline ::gnmi::SubscriptionList* SubscribeRequest::mutable_subscribe() {
  ::gnmi::SubscriptionList* _msg = _internal_mutable_subscribe();
  // @@protoc_insertion_point(field_mutable:gnmi.SubscribeRequest.subscribe)
  return _msg;
}

// .gnmi.Poll poll = 3;
inline bool SubscribeRequest::_internal_has_poll() const {
  return request_case() == kPoll;
}
inline bool SubscribeRequest::has_poll() const {
  return _internal_has_poll();
}
inline void SubscribeRequest::set_has_poll() {
  _oneof_case_[0] = kPoll;
}
inline void SubscribeRequest::clear_poll() {
  if (_internal_has_poll()) {
    if (GetArenaForAllocation() == nullptr) {
      delete request_.poll_;
    }
    clear_has_request();
  }
}
inline ::gnmi::Poll* SubscribeRequest::release_poll() {
  // @@protoc_insertion_point(field_release:gnmi.SubscribeRequest.poll)
  if (_internal_has_poll()) {
    clear_has_request();
      ::gnmi::Poll* temp = request_.poll_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.poll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gnmi::Poll& SubscribeRequest::_internal_poll() const {
  return _internal_has_poll()
      ? *request_.poll_
      : reinterpret_cast< ::gnmi::Poll&>(::gnmi::_Poll_default_instance_);
}
inline const ::gnmi::Poll& SubscribeRequest::poll() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscribeRequest.poll)
  return _internal_poll();
}
inline ::gnmi::Poll* SubscribeRequest::unsafe_arena_release_poll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnmi.SubscribeRequest.poll)
  if (_internal_has_poll()) {
    clear_has_request();
    ::gnmi::Poll* temp = request_.poll_;
    request_.poll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubscribeRequest::unsafe_arena_set_allocated_poll(::gnmi::Poll* poll) {
  clear_request();
  if (poll) {
    set_has_poll();
    request_.poll_ = poll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.SubscribeRequest.poll)
}
inline ::gnmi::Poll* SubscribeRequest::_internal_mutable_poll() {
  if (!_internal_has_poll()) {
    clear_request();
    set_has_poll();
    request_.poll_ = CreateMaybeMessage< ::gnmi::Poll >(GetArenaForAllocation());
  }
  return request_.poll_;
}
inline ::gnmi::Poll* SubscribeRequest::mutable_poll() {
  ::gnmi::Poll* _msg = _internal_mutable_poll();
  // @@protoc_insertion_point(field_mutable:gnmi.SubscribeRequest.poll)
  return _msg;
}

// repeated .gnmi_ext.Extension extension = 5;
inline int SubscribeRequest::_internal_extension_size() const {
  return extension_.size();
}
inline int SubscribeRequest::extension_size() const {
  return _internal_extension_size();
}
inline ::gnmi_ext::Extension* SubscribeRequest::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SubscribeRequest.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
SubscribeRequest::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SubscribeRequest.extension)
  return &extension_;
}
inline const ::gnmi_ext::Extension& SubscribeRequest::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::gnmi_ext::Extension& SubscribeRequest::extension(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SubscribeRequest.extension)
  return _internal_extension(index);
}
inline ::gnmi_ext::Extension* SubscribeRequest::_internal_add_extension() {
  return extension_.Add();
}
inline ::gnmi_ext::Extension* SubscribeRequest::add_extension() {
  ::gnmi_ext::Extension* _add = _internal_add_extension();
  // @@protoc_insertion_point(field_add:gnmi.SubscribeRequest.extension)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
SubscribeRequest::extension() const {
  // @@protoc_insertion_point(field_list:gnmi.SubscribeRequest.extension)
  return extension_;
}

inline bool SubscribeRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void SubscribeRequest::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline SubscribeRequest::RequestCase SubscribeRequest::request_case() const {
  return SubscribeRequest::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Poll

// -------------------------------------------------------------------

// SubscribeResponse

// .gnmi.Notification update = 1;
inline bool SubscribeResponse::_internal_has_update() const {
  return response_case() == kUpdate;
}
inline bool SubscribeResponse::has_update() const {
  return _internal_has_update();
}
inline void SubscribeResponse::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
inline void SubscribeResponse::clear_update() {
  if (_internal_has_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.update_;
    }
    clear_has_response();
  }
}
inline ::gnmi::Notification* SubscribeResponse::release_update() {
  // @@protoc_insertion_point(field_release:gnmi.SubscribeResponse.update)
  if (_internal_has_update()) {
    clear_has_response();
      ::gnmi::Notification* temp = response_.update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gnmi::Notification& SubscribeResponse::_internal_update() const {
  return _internal_has_update()
      ? *response_.update_
      : reinterpret_cast< ::gnmi::Notification&>(::gnmi::_Notification_default_instance_);
}
inline const ::gnmi::Notification& SubscribeResponse::update() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscribeResponse.update)
  return _internal_update();
}
inline ::gnmi::Notification* SubscribeResponse::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnmi.SubscribeResponse.update)
  if (_internal_has_update()) {
    clear_has_response();
    ::gnmi::Notification* temp = response_.update_;
    response_.update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubscribeResponse::unsafe_arena_set_allocated_update(::gnmi::Notification* update) {
  clear_response();
  if (update) {
    set_has_update();
    response_.update_ = update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.SubscribeResponse.update)
}
inline ::gnmi::Notification* SubscribeResponse::_internal_mutable_update() {
  if (!_internal_has_update()) {
    clear_response();
    set_has_update();
    response_.update_ = CreateMaybeMessage< ::gnmi::Notification >(GetArenaForAllocation());
  }
  return response_.update_;
}
inline ::gnmi::Notification* SubscribeResponse::mutable_update() {
  ::gnmi::Notification* _msg = _internal_mutable_update();
  // @@protoc_insertion_point(field_mutable:gnmi.SubscribeResponse.update)
  return _msg;
}

// bool sync_response = 3;
inline bool SubscribeResponse::_internal_has_sync_response() const {
  return response_case() == kSyncResponse;
}
inline bool SubscribeResponse::has_sync_response() const {
  return _internal_has_sync_response();
}
inline void SubscribeResponse::set_has_sync_response() {
  _oneof_case_[0] = kSyncResponse;
}
inline void SubscribeResponse::clear_sync_response() {
  if (_internal_has_sync_response()) {
    response_.sync_response_ = false;
    clear_has_response();
  }
}
inline bool SubscribeResponse::_internal_sync_response() const {
  if (_internal_has_sync_response()) {
    return response_.sync_response_;
  }
  return false;
}
inline void SubscribeResponse::_internal_set_sync_response(bool value) {
  if (!_internal_has_sync_response()) {
    clear_response();
    set_has_sync_response();
  }
  response_.sync_response_ = value;
}
inline bool SubscribeResponse::sync_response() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscribeResponse.sync_response)
  return _internal_sync_response();
}
inline void SubscribeResponse::set_sync_response(bool value) {
  _internal_set_sync_response(value);
  // @@protoc_insertion_point(field_set:gnmi.SubscribeResponse.sync_response)
}

// .gnmi.Error error = 4 [deprecated = true];
inline bool SubscribeResponse::_internal_has_error() const {
  return response_case() == kError;
}
inline bool SubscribeResponse::has_error() const {
  return _internal_has_error();
}
inline void SubscribeResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void SubscribeResponse::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_.error_;
    }
    clear_has_response();
  }
}
inline ::gnmi::Error* SubscribeResponse::release_error() {
  // @@protoc_insertion_point(field_release:gnmi.SubscribeResponse.error)
  if (_internal_has_error()) {
    clear_has_response();
      ::gnmi::Error* temp = response_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gnmi::Error& SubscribeResponse::_internal_error() const {
  return _internal_has_error()
      ? *response_.error_
      : reinterpret_cast< ::gnmi::Error&>(::gnmi::_Error_default_instance_);
}
inline const ::gnmi::Error& SubscribeResponse::error() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscribeResponse.error)
  return _internal_error();
}
inline ::gnmi::Error* SubscribeResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:gnmi.SubscribeResponse.error)
  if (_internal_has_error()) {
    clear_has_response();
    ::gnmi::Error* temp = response_.error_;
    response_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SubscribeResponse::unsafe_arena_set_allocated_error(::gnmi::Error* error) {
  clear_response();
  if (error) {
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.SubscribeResponse.error)
}
inline ::gnmi::Error* SubscribeResponse::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_response();
    set_has_error();
    response_.error_ = CreateMaybeMessage< ::gnmi::Error >(GetArenaForAllocation());
  }
  return response_.error_;
}
inline ::gnmi::Error* SubscribeResponse::mutable_error() {
  ::gnmi::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:gnmi.SubscribeResponse.error)
  return _msg;
}

// repeated .gnmi_ext.Extension extension = 5;
inline int SubscribeResponse::_internal_extension_size() const {
  return extension_.size();
}
inline int SubscribeResponse::extension_size() const {
  return _internal_extension_size();
}
inline ::gnmi_ext::Extension* SubscribeResponse::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SubscribeResponse.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
SubscribeResponse::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SubscribeResponse.extension)
  return &extension_;
}
inline const ::gnmi_ext::Extension& SubscribeResponse::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::gnmi_ext::Extension& SubscribeResponse::extension(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SubscribeResponse.extension)
  return _internal_extension(index);
}
inline ::gnmi_ext::Extension* SubscribeResponse::_internal_add_extension() {
  return extension_.Add();
}
inline ::gnmi_ext::Extension* SubscribeResponse::add_extension() {
  ::gnmi_ext::Extension* _add = _internal_add_extension();
  // @@protoc_insertion_point(field_add:gnmi.SubscribeResponse.extension)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
SubscribeResponse::extension() const {
  // @@protoc_insertion_point(field_list:gnmi.SubscribeResponse.extension)
  return extension_;
}

inline bool SubscribeResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void SubscribeResponse::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline SubscribeResponse::ResponseCase SubscribeResponse::response_case() const {
  return SubscribeResponse::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SubscriptionList

// .gnmi.Path prefix = 1;
inline bool SubscriptionList::_internal_has_prefix() const {
  return this != internal_default_instance() && prefix_ != nullptr;
}
inline bool SubscriptionList::has_prefix() const {
  return _internal_has_prefix();
}
inline void SubscriptionList::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
inline const ::gnmi::Path& SubscriptionList::_internal_prefix() const {
  const ::gnmi::Path* p = prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Path&>(
      ::gnmi::_Path_default_instance_);
}
inline const ::gnmi::Path& SubscriptionList::prefix() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscriptionList.prefix)
  return _internal_prefix();
}
inline void SubscriptionList::unsafe_arena_set_allocated_prefix(
    ::gnmi::Path* prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix_);
  }
  prefix_ = prefix;
  if (prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.SubscriptionList.prefix)
}
inline ::gnmi::Path* SubscriptionList::release_prefix() {
  
  ::gnmi::Path* temp = prefix_;
  prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Path* SubscriptionList::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_release:gnmi.SubscriptionList.prefix)
  
  ::gnmi::Path* temp = prefix_;
  prefix_ = nullptr;
  return temp;
}
inline ::gnmi::Path* SubscriptionList::_internal_mutable_prefix() {
  
  if (prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Path>(GetArenaForAllocation());
    prefix_ = p;
  }
  return prefix_;
}
inline ::gnmi::Path* SubscriptionList::mutable_prefix() {
  ::gnmi::Path* _msg = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:gnmi.SubscriptionList.prefix)
  return _msg;
}
inline void SubscriptionList::set_allocated_prefix(::gnmi::Path* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prefix_;
  }
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Path>::GetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    
  } else {
    
  }
  prefix_ = prefix;
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscriptionList.prefix)
}

// repeated .gnmi.Subscription subscription = 2;
inline int SubscriptionList::_internal_subscription_size() const {
  return subscription_.size();
}
inline int SubscriptionList::subscription_size() const {
  return _internal_subscription_size();
}
inline void SubscriptionList::clear_subscription() {
  subscription_.Clear();
}
inline ::gnmi::Subscription* SubscriptionList::mutable_subscription(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SubscriptionList.subscription)
  return subscription_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Subscription >*
SubscriptionList::mutable_subscription() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SubscriptionList.subscription)
  return &subscription_;
}
inline const ::gnmi::Subscription& SubscriptionList::_internal_subscription(int index) const {
  return subscription_.Get(index);
}
inline const ::gnmi::Subscription& SubscriptionList::subscription(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SubscriptionList.subscription)
  return _internal_subscription(index);
}
inline ::gnmi::Subscription* SubscriptionList::_internal_add_subscription() {
  return subscription_.Add();
}
inline ::gnmi::Subscription* SubscriptionList::add_subscription() {
  ::gnmi::Subscription* _add = _internal_add_subscription();
  // @@protoc_insertion_point(field_add:gnmi.SubscriptionList.subscription)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Subscription >&
SubscriptionList::subscription() const {
  // @@protoc_insertion_point(field_list:gnmi.SubscriptionList.subscription)
  return subscription_;
}

// .gnmi.QOSMarking qos = 4;
inline bool SubscriptionList::_internal_has_qos() const {
  return this != internal_default_instance() && qos_ != nullptr;
}
inline bool SubscriptionList::has_qos() const {
  return _internal_has_qos();
}
inline void SubscriptionList::clear_qos() {
  if (GetArenaForAllocation() == nullptr && qos_ != nullptr) {
    delete qos_;
  }
  qos_ = nullptr;
}
inline const ::gnmi::QOSMarking& SubscriptionList::_internal_qos() const {
  const ::gnmi::QOSMarking* p = qos_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::QOSMarking&>(
      ::gnmi::_QOSMarking_default_instance_);
}
inline const ::gnmi::QOSMarking& SubscriptionList::qos() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscriptionList.qos)
  return _internal_qos();
}
inline void SubscriptionList::unsafe_arena_set_allocated_qos(
    ::gnmi::QOSMarking* qos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_);
  }
  qos_ = qos;
  if (qos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.SubscriptionList.qos)
}
inline ::gnmi::QOSMarking* SubscriptionList::release_qos() {
  
  ::gnmi::QOSMarking* temp = qos_;
  qos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::QOSMarking* SubscriptionList::unsafe_arena_release_qos() {
  // @@protoc_insertion_point(field_release:gnmi.SubscriptionList.qos)
  
  ::gnmi::QOSMarking* temp = qos_;
  qos_ = nullptr;
  return temp;
}
inline ::gnmi::QOSMarking* SubscriptionList::_internal_mutable_qos() {
  
  if (qos_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::QOSMarking>(GetArenaForAllocation());
    qos_ = p;
  }
  return qos_;
}
inline ::gnmi::QOSMarking* SubscriptionList::mutable_qos() {
  ::gnmi::QOSMarking* _msg = _internal_mutable_qos();
  // @@protoc_insertion_point(field_mutable:gnmi.SubscriptionList.qos)
  return _msg;
}
inline void SubscriptionList::set_allocated_qos(::gnmi::QOSMarking* qos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete qos_;
  }
  if (qos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::QOSMarking>::GetOwningArena(qos);
    if (message_arena != submessage_arena) {
      qos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qos, submessage_arena);
    }
    
  } else {
    
  }
  qos_ = qos;
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscriptionList.qos)
}

// .gnmi.SubscriptionList.Mode mode = 5;
inline void SubscriptionList::clear_mode() {
  mode_ = 0;
}
inline ::gnmi::SubscriptionList_Mode SubscriptionList::_internal_mode() const {
  return static_cast< ::gnmi::SubscriptionList_Mode >(mode_);
}
inline ::gnmi::SubscriptionList_Mode SubscriptionList::mode() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscriptionList.mode)
  return _internal_mode();
}
inline void SubscriptionList::_internal_set_mode(::gnmi::SubscriptionList_Mode value) {
  
  mode_ = value;
}
inline void SubscriptionList::set_mode(::gnmi::SubscriptionList_Mode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:gnmi.SubscriptionList.mode)
}

// bool allow_aggregation = 6;
inline void SubscriptionList::clear_allow_aggregation() {
  allow_aggregation_ = false;
}
inline bool SubscriptionList::_internal_allow_aggregation() const {
  return allow_aggregation_;
}
inline bool SubscriptionList::allow_aggregation() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscriptionList.allow_aggregation)
  return _internal_allow_aggregation();
}
inline void SubscriptionList::_internal_set_allow_aggregation(bool value) {
  
  allow_aggregation_ = value;
}
inline void SubscriptionList::set_allow_aggregation(bool value) {
  _internal_set_allow_aggregation(value);
  // @@protoc_insertion_point(field_set:gnmi.SubscriptionList.allow_aggregation)
}

// repeated .gnmi.ModelData use_models = 7;
inline int SubscriptionList::_internal_use_models_size() const {
  return use_models_.size();
}
inline int SubscriptionList::use_models_size() const {
  return _internal_use_models_size();
}
inline void SubscriptionList::clear_use_models() {
  use_models_.Clear();
}
inline ::gnmi::ModelData* SubscriptionList::mutable_use_models(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SubscriptionList.use_models)
  return use_models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >*
SubscriptionList::mutable_use_models() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SubscriptionList.use_models)
  return &use_models_;
}
inline const ::gnmi::ModelData& SubscriptionList::_internal_use_models(int index) const {
  return use_models_.Get(index);
}
inline const ::gnmi::ModelData& SubscriptionList::use_models(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SubscriptionList.use_models)
  return _internal_use_models(index);
}
inline ::gnmi::ModelData* SubscriptionList::_internal_add_use_models() {
  return use_models_.Add();
}
inline ::gnmi::ModelData* SubscriptionList::add_use_models() {
  ::gnmi::ModelData* _add = _internal_add_use_models();
  // @@protoc_insertion_point(field_add:gnmi.SubscriptionList.use_models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >&
SubscriptionList::use_models() const {
  // @@protoc_insertion_point(field_list:gnmi.SubscriptionList.use_models)
  return use_models_;
}

// .gnmi.Encoding encoding = 8;
inline void SubscriptionList::clear_encoding() {
  encoding_ = 0;
}
inline ::gnmi::Encoding SubscriptionList::_internal_encoding() const {
  return static_cast< ::gnmi::Encoding >(encoding_);
}
inline ::gnmi::Encoding SubscriptionList::encoding() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscriptionList.encoding)
  return _internal_encoding();
}
inline void SubscriptionList::_internal_set_encoding(::gnmi::Encoding value) {
  
  encoding_ = value;
}
inline void SubscriptionList::set_encoding(::gnmi::Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:gnmi.SubscriptionList.encoding)
}

// bool updates_only = 9;
inline void SubscriptionList::clear_updates_only() {
  updates_only_ = false;
}
inline bool SubscriptionList::_internal_updates_only() const {
  return updates_only_;
}
inline bool SubscriptionList::updates_only() const {
  // @@protoc_insertion_point(field_get:gnmi.SubscriptionList.updates_only)
  return _internal_updates_only();
}
inline void SubscriptionList::_internal_set_updates_only(bool value) {
  
  updates_only_ = value;
}
inline void SubscriptionList::set_updates_only(bool value) {
  _internal_set_updates_only(value);
  // @@protoc_insertion_point(field_set:gnmi.SubscriptionList.updates_only)
}

// -------------------------------------------------------------------

// Subscription

// .gnmi.Path path = 1;
inline bool Subscription::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool Subscription::has_path() const {
  return _internal_has_path();
}
inline void Subscription::clear_path() {
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::gnmi::Path& Subscription::_internal_path() const {
  const ::gnmi::Path* p = path_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Path&>(
      ::gnmi::_Path_default_instance_);
}
inline const ::gnmi::Path& Subscription::path() const {
  // @@protoc_insertion_point(field_get:gnmi.Subscription.path)
  return _internal_path();
}
inline void Subscription::unsafe_arena_set_allocated_path(
    ::gnmi::Path* path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.Subscription.path)
}
inline ::gnmi::Path* Subscription::release_path() {
  
  ::gnmi::Path* temp = path_;
  path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Path* Subscription::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:gnmi.Subscription.path)
  
  ::gnmi::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::gnmi::Path* Subscription::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Path>(GetArenaForAllocation());
    path_ = p;
  }
  return path_;
}
inline ::gnmi::Path* Subscription::mutable_path() {
  ::gnmi::Path* _msg = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:gnmi.Subscription.path)
  return _msg;
}
inline void Subscription::set_allocated_path(::gnmi::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Path>::GetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:gnmi.Subscription.path)
}

// .gnmi.SubscriptionMode mode = 2;
inline void Subscription::clear_mode() {
  mode_ = 0;
}
inline ::gnmi::SubscriptionMode Subscription::_internal_mode() const {
  return static_cast< ::gnmi::SubscriptionMode >(mode_);
}
inline ::gnmi::SubscriptionMode Subscription::mode() const {
  // @@protoc_insertion_point(field_get:gnmi.Subscription.mode)
  return _internal_mode();
}
inline void Subscription::_internal_set_mode(::gnmi::SubscriptionMode value) {
  
  mode_ = value;
}
inline void Subscription::set_mode(::gnmi::SubscriptionMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:gnmi.Subscription.mode)
}

// uint64 sample_interval = 3;
inline void Subscription::clear_sample_interval() {
  sample_interval_ = uint64_t{0u};
}
inline uint64_t Subscription::_internal_sample_interval() const {
  return sample_interval_;
}
inline uint64_t Subscription::sample_interval() const {
  // @@protoc_insertion_point(field_get:gnmi.Subscription.sample_interval)
  return _internal_sample_interval();
}
inline void Subscription::_internal_set_sample_interval(uint64_t value) {
  
  sample_interval_ = value;
}
inline void Subscription::set_sample_interval(uint64_t value) {
  _internal_set_sample_interval(value);
  // @@protoc_insertion_point(field_set:gnmi.Subscription.sample_interval)
}

// bool suppress_redundant = 4;
inline void Subscription::clear_suppress_redundant() {
  suppress_redundant_ = false;
}
inline bool Subscription::_internal_suppress_redundant() const {
  return suppress_redundant_;
}
inline bool Subscription::suppress_redundant() const {
  // @@protoc_insertion_point(field_get:gnmi.Subscription.suppress_redundant)
  return _internal_suppress_redundant();
}
inline void Subscription::_internal_set_suppress_redundant(bool value) {
  
  suppress_redundant_ = value;
}
inline void Subscription::set_suppress_redundant(bool value) {
  _internal_set_suppress_redundant(value);
  // @@protoc_insertion_point(field_set:gnmi.Subscription.suppress_redundant)
}

// uint64 heartbeat_interval = 5;
inline void Subscription::clear_heartbeat_interval() {
  heartbeat_interval_ = uint64_t{0u};
}
inline uint64_t Subscription::_internal_heartbeat_interval() const {
  return heartbeat_interval_;
}
inline uint64_t Subscription::heartbeat_interval() const {
  // @@protoc_insertion_point(field_get:gnmi.Subscription.heartbeat_interval)
  return _internal_heartbeat_interval();
}
inline void Subscription::_internal_set_heartbeat_interval(uint64_t value) {
  
  heartbeat_interval_ = value;
}
inline void Subscription::set_heartbeat_interval(uint64_t value) {
  _internal_set_heartbeat_interval(value);
  // @@protoc_insertion_point(field_set:gnmi.Subscription.heartbeat_interval)
}

// -------------------------------------------------------------------

// QOSMarking

// uint32 marking = 1;
inline void QOSMarking::clear_marking() {
  marking_ = 0u;
}
inline uint32_t QOSMarking::_internal_marking() const {
  return marking_;
}
inline uint32_t QOSMarking::marking() const {
  // @@protoc_insertion_point(field_get:gnmi.QOSMarking.marking)
  return _internal_marking();
}
inline void QOSMarking::_internal_set_marking(uint32_t value) {
  
  marking_ = value;
}
inline void QOSMarking::set_marking(uint32_t value) {
  _internal_set_marking(value);
  // @@protoc_insertion_point(field_set:gnmi.QOSMarking.marking)
}

// -------------------------------------------------------------------

// SetRequest

// .gnmi.Path prefix = 1;
inline bool SetRequest::_internal_has_prefix() const {
  return this != internal_default_instance() && prefix_ != nullptr;
}
inline bool SetRequest::has_prefix() const {
  return _internal_has_prefix();
}
inline void SetRequest::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
inline const ::gnmi::Path& SetRequest::_internal_prefix() const {
  const ::gnmi::Path* p = prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Path&>(
      ::gnmi::_Path_default_instance_);
}
inline const ::gnmi::Path& SetRequest::prefix() const {
  // @@protoc_insertion_point(field_get:gnmi.SetRequest.prefix)
  return _internal_prefix();
}
inline void SetRequest::unsafe_arena_set_allocated_prefix(
    ::gnmi::Path* prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix_);
  }
  prefix_ = prefix;
  if (prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.SetRequest.prefix)
}
inline ::gnmi::Path* SetRequest::release_prefix() {
  
  ::gnmi::Path* temp = prefix_;
  prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Path* SetRequest::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_release:gnmi.SetRequest.prefix)
  
  ::gnmi::Path* temp = prefix_;
  prefix_ = nullptr;
  return temp;
}
inline ::gnmi::Path* SetRequest::_internal_mutable_prefix() {
  
  if (prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Path>(GetArenaForAllocation());
    prefix_ = p;
  }
  return prefix_;
}
inline ::gnmi::Path* SetRequest::mutable_prefix() {
  ::gnmi::Path* _msg = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:gnmi.SetRequest.prefix)
  return _msg;
}
inline void SetRequest::set_allocated_prefix(::gnmi::Path* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prefix_;
  }
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Path>::GetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    
  } else {
    
  }
  prefix_ = prefix;
  // @@protoc_insertion_point(field_set_allocated:gnmi.SetRequest.prefix)
}

// repeated .gnmi.Path delete = 2;
inline int SetRequest::_internal_delete__size() const {
  return delete__.size();
}
inline int SetRequest::delete__size() const {
  return _internal_delete__size();
}
inline void SetRequest::clear_delete_() {
  delete__.Clear();
}
inline ::gnmi::Path* SetRequest::mutable_delete_(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SetRequest.delete)
  return delete__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >*
SetRequest::mutable_delete_() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SetRequest.delete)
  return &delete__;
}
inline const ::gnmi::Path& SetRequest::_internal_delete_(int index) const {
  return delete__.Get(index);
}
inline const ::gnmi::Path& SetRequest::delete_(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SetRequest.delete)
  return _internal_delete_(index);
}
inline ::gnmi::Path* SetRequest::_internal_add_delete_() {
  return delete__.Add();
}
inline ::gnmi::Path* SetRequest::add_delete_() {
  ::gnmi::Path* _add = _internal_add_delete_();
  // @@protoc_insertion_point(field_add:gnmi.SetRequest.delete)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >&
SetRequest::delete_() const {
  // @@protoc_insertion_point(field_list:gnmi.SetRequest.delete)
  return delete__;
}

// repeated .gnmi.Update replace = 3;
inline int SetRequest::_internal_replace_size() const {
  return replace_.size();
}
inline int SetRequest::replace_size() const {
  return _internal_replace_size();
}
inline void SetRequest::clear_replace() {
  replace_.Clear();
}
inline ::gnmi::Update* SetRequest::mutable_replace(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SetRequest.replace)
  return replace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >*
SetRequest::mutable_replace() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SetRequest.replace)
  return &replace_;
}
inline const ::gnmi::Update& SetRequest::_internal_replace(int index) const {
  return replace_.Get(index);
}
inline const ::gnmi::Update& SetRequest::replace(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SetRequest.replace)
  return _internal_replace(index);
}
inline ::gnmi::Update* SetRequest::_internal_add_replace() {
  return replace_.Add();
}
inline ::gnmi::Update* SetRequest::add_replace() {
  ::gnmi::Update* _add = _internal_add_replace();
  // @@protoc_insertion_point(field_add:gnmi.SetRequest.replace)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >&
SetRequest::replace() const {
  // @@protoc_insertion_point(field_list:gnmi.SetRequest.replace)
  return replace_;
}

// repeated .gnmi.Update update = 4;
inline int SetRequest::_internal_update_size() const {
  return update_.size();
}
inline int SetRequest::update_size() const {
  return _internal_update_size();
}
inline void SetRequest::clear_update() {
  update_.Clear();
}
inline ::gnmi::Update* SetRequest::mutable_update(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SetRequest.update)
  return update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >*
SetRequest::mutable_update() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SetRequest.update)
  return &update_;
}
inline const ::gnmi::Update& SetRequest::_internal_update(int index) const {
  return update_.Get(index);
}
inline const ::gnmi::Update& SetRequest::update(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SetRequest.update)
  return _internal_update(index);
}
inline ::gnmi::Update* SetRequest::_internal_add_update() {
  return update_.Add();
}
inline ::gnmi::Update* SetRequest::add_update() {
  ::gnmi::Update* _add = _internal_add_update();
  // @@protoc_insertion_point(field_add:gnmi.SetRequest.update)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >&
SetRequest::update() const {
  // @@protoc_insertion_point(field_list:gnmi.SetRequest.update)
  return update_;
}

// repeated .gnmi.Update union_replace = 6;
inline int SetRequest::_internal_union_replace_size() const {
  return union_replace_.size();
}
inline int SetRequest::union_replace_size() const {
  return _internal_union_replace_size();
}
inline void SetRequest::clear_union_replace() {
  union_replace_.Clear();
}
inline ::gnmi::Update* SetRequest::mutable_union_replace(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SetRequest.union_replace)
  return union_replace_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >*
SetRequest::mutable_union_replace() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SetRequest.union_replace)
  return &union_replace_;
}
inline const ::gnmi::Update& SetRequest::_internal_union_replace(int index) const {
  return union_replace_.Get(index);
}
inline const ::gnmi::Update& SetRequest::union_replace(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SetRequest.union_replace)
  return _internal_union_replace(index);
}
inline ::gnmi::Update* SetRequest::_internal_add_union_replace() {
  return union_replace_.Add();
}
inline ::gnmi::Update* SetRequest::add_union_replace() {
  ::gnmi::Update* _add = _internal_add_union_replace();
  // @@protoc_insertion_point(field_add:gnmi.SetRequest.union_replace)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Update >&
SetRequest::union_replace() const {
  // @@protoc_insertion_point(field_list:gnmi.SetRequest.union_replace)
  return union_replace_;
}

// repeated .gnmi_ext.Extension extension = 5;
inline int SetRequest::_internal_extension_size() const {
  return extension_.size();
}
inline int SetRequest::extension_size() const {
  return _internal_extension_size();
}
inline ::gnmi_ext::Extension* SetRequest::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SetRequest.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
SetRequest::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SetRequest.extension)
  return &extension_;
}
inline const ::gnmi_ext::Extension& SetRequest::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::gnmi_ext::Extension& SetRequest::extension(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SetRequest.extension)
  return _internal_extension(index);
}
inline ::gnmi_ext::Extension* SetRequest::_internal_add_extension() {
  return extension_.Add();
}
inline ::gnmi_ext::Extension* SetRequest::add_extension() {
  ::gnmi_ext::Extension* _add = _internal_add_extension();
  // @@protoc_insertion_point(field_add:gnmi.SetRequest.extension)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
SetRequest::extension() const {
  // @@protoc_insertion_point(field_list:gnmi.SetRequest.extension)
  return extension_;
}

// -------------------------------------------------------------------

// SetResponse

// .gnmi.Path prefix = 1;
inline bool SetResponse::_internal_has_prefix() const {
  return this != internal_default_instance() && prefix_ != nullptr;
}
inline bool SetResponse::has_prefix() const {
  return _internal_has_prefix();
}
inline void SetResponse::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
inline const ::gnmi::Path& SetResponse::_internal_prefix() const {
  const ::gnmi::Path* p = prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Path&>(
      ::gnmi::_Path_default_instance_);
}
inline const ::gnmi::Path& SetResponse::prefix() const {
  // @@protoc_insertion_point(field_get:gnmi.SetResponse.prefix)
  return _internal_prefix();
}
inline void SetResponse::unsafe_arena_set_allocated_prefix(
    ::gnmi::Path* prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix_);
  }
  prefix_ = prefix;
  if (prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.SetResponse.prefix)
}
inline ::gnmi::Path* SetResponse::release_prefix() {
  
  ::gnmi::Path* temp = prefix_;
  prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Path* SetResponse::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_release:gnmi.SetResponse.prefix)
  
  ::gnmi::Path* temp = prefix_;
  prefix_ = nullptr;
  return temp;
}
inline ::gnmi::Path* SetResponse::_internal_mutable_prefix() {
  
  if (prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Path>(GetArenaForAllocation());
    prefix_ = p;
  }
  return prefix_;
}
inline ::gnmi::Path* SetResponse::mutable_prefix() {
  ::gnmi::Path* _msg = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:gnmi.SetResponse.prefix)
  return _msg;
}
inline void SetResponse::set_allocated_prefix(::gnmi::Path* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prefix_;
  }
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Path>::GetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    
  } else {
    
  }
  prefix_ = prefix;
  // @@protoc_insertion_point(field_set_allocated:gnmi.SetResponse.prefix)
}

// repeated .gnmi.UpdateResult response = 2;
inline int SetResponse::_internal_response_size() const {
  return response_.size();
}
inline int SetResponse::response_size() const {
  return _internal_response_size();
}
inline void SetResponse::clear_response() {
  response_.Clear();
}
inline ::gnmi::UpdateResult* SetResponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SetResponse.response)
  return response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::UpdateResult >*
SetResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SetResponse.response)
  return &response_;
}
inline const ::gnmi::UpdateResult& SetResponse::_internal_response(int index) const {
  return response_.Get(index);
}
inline const ::gnmi::UpdateResult& SetResponse::response(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SetResponse.response)
  return _internal_response(index);
}
inline ::gnmi::UpdateResult* SetResponse::_internal_add_response() {
  return response_.Add();
}
inline ::gnmi::UpdateResult* SetResponse::add_response() {
  ::gnmi::UpdateResult* _add = _internal_add_response();
  // @@protoc_insertion_point(field_add:gnmi.SetResponse.response)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::UpdateResult >&
SetResponse::response() const {
  // @@protoc_insertion_point(field_list:gnmi.SetResponse.response)
  return response_;
}

// .gnmi.Error message = 3 [deprecated = true];
inline bool SetResponse::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool SetResponse::has_message() const {
  return _internal_has_message();
}
inline void SetResponse::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::gnmi::Error& SetResponse::_internal_message() const {
  const ::gnmi::Error* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Error&>(
      ::gnmi::_Error_default_instance_);
}
inline const ::gnmi::Error& SetResponse::message() const {
  // @@protoc_insertion_point(field_get:gnmi.SetResponse.message)
  return _internal_message();
}
inline void SetResponse::unsafe_arena_set_allocated_message(
    ::gnmi::Error* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.SetResponse.message)
}
inline ::gnmi::Error* SetResponse::release_message() {
  
  ::gnmi::Error* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Error* SetResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:gnmi.SetResponse.message)
  
  ::gnmi::Error* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::gnmi::Error* SetResponse::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Error>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::gnmi::Error* SetResponse::mutable_message() {
  ::gnmi::Error* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:gnmi.SetResponse.message)
  return _msg;
}
inline void SetResponse::set_allocated_message(::gnmi::Error* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Error>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:gnmi.SetResponse.message)
}

// int64 timestamp = 4;
inline void SetResponse::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t SetResponse::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t SetResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:gnmi.SetResponse.timestamp)
  return _internal_timestamp();
}
inline void SetResponse::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void SetResponse::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gnmi.SetResponse.timestamp)
}

// repeated .gnmi_ext.Extension extension = 5;
inline int SetResponse::_internal_extension_size() const {
  return extension_.size();
}
inline int SetResponse::extension_size() const {
  return _internal_extension_size();
}
inline ::gnmi_ext::Extension* SetResponse::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.SetResponse.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
SetResponse::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.SetResponse.extension)
  return &extension_;
}
inline const ::gnmi_ext::Extension& SetResponse::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::gnmi_ext::Extension& SetResponse::extension(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.SetResponse.extension)
  return _internal_extension(index);
}
inline ::gnmi_ext::Extension* SetResponse::_internal_add_extension() {
  return extension_.Add();
}
inline ::gnmi_ext::Extension* SetResponse::add_extension() {
  ::gnmi_ext::Extension* _add = _internal_add_extension();
  // @@protoc_insertion_point(field_add:gnmi.SetResponse.extension)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
SetResponse::extension() const {
  // @@protoc_insertion_point(field_list:gnmi.SetResponse.extension)
  return extension_;
}

// -------------------------------------------------------------------

// UpdateResult

// int64 timestamp = 1 [deprecated = true];
inline void UpdateResult::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline int64_t UpdateResult::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t UpdateResult::timestamp() const {
  // @@protoc_insertion_point(field_get:gnmi.UpdateResult.timestamp)
  return _internal_timestamp();
}
inline void UpdateResult::_internal_set_timestamp(int64_t value) {
  
  timestamp_ = value;
}
inline void UpdateResult::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gnmi.UpdateResult.timestamp)
}

// .gnmi.Path path = 2;
inline bool UpdateResult::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool UpdateResult::has_path() const {
  return _internal_has_path();
}
inline void UpdateResult::clear_path() {
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::gnmi::Path& UpdateResult::_internal_path() const {
  const ::gnmi::Path* p = path_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Path&>(
      ::gnmi::_Path_default_instance_);
}
inline const ::gnmi::Path& UpdateResult::path() const {
  // @@protoc_insertion_point(field_get:gnmi.UpdateResult.path)
  return _internal_path();
}
inline void UpdateResult::unsafe_arena_set_allocated_path(
    ::gnmi::Path* path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.UpdateResult.path)
}
inline ::gnmi::Path* UpdateResult::release_path() {
  
  ::gnmi::Path* temp = path_;
  path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Path* UpdateResult::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:gnmi.UpdateResult.path)
  
  ::gnmi::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::gnmi::Path* UpdateResult::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Path>(GetArenaForAllocation());
    path_ = p;
  }
  return path_;
}
inline ::gnmi::Path* UpdateResult::mutable_path() {
  ::gnmi::Path* _msg = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:gnmi.UpdateResult.path)
  return _msg;
}
inline void UpdateResult::set_allocated_path(::gnmi::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Path>::GetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:gnmi.UpdateResult.path)
}

// .gnmi.Error message = 3 [deprecated = true];
inline bool UpdateResult::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool UpdateResult::has_message() const {
  return _internal_has_message();
}
inline void UpdateResult::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::gnmi::Error& UpdateResult::_internal_message() const {
  const ::gnmi::Error* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Error&>(
      ::gnmi::_Error_default_instance_);
}
inline const ::gnmi::Error& UpdateResult::message() const {
  // @@protoc_insertion_point(field_get:gnmi.UpdateResult.message)
  return _internal_message();
}
inline void UpdateResult::unsafe_arena_set_allocated_message(
    ::gnmi::Error* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.UpdateResult.message)
}
inline ::gnmi::Error* UpdateResult::release_message() {
  
  ::gnmi::Error* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Error* UpdateResult::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:gnmi.UpdateResult.message)
  
  ::gnmi::Error* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::gnmi::Error* UpdateResult::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Error>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::gnmi::Error* UpdateResult::mutable_message() {
  ::gnmi::Error* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:gnmi.UpdateResult.message)
  return _msg;
}
inline void UpdateResult::set_allocated_message(::gnmi::Error* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Error>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:gnmi.UpdateResult.message)
}

// .gnmi.UpdateResult.Operation op = 4;
inline void UpdateResult::clear_op() {
  op_ = 0;
}
inline ::gnmi::UpdateResult_Operation UpdateResult::_internal_op() const {
  return static_cast< ::gnmi::UpdateResult_Operation >(op_);
}
inline ::gnmi::UpdateResult_Operation UpdateResult::op() const {
  // @@protoc_insertion_point(field_get:gnmi.UpdateResult.op)
  return _internal_op();
}
inline void UpdateResult::_internal_set_op(::gnmi::UpdateResult_Operation value) {
  
  op_ = value;
}
inline void UpdateResult::set_op(::gnmi::UpdateResult_Operation value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:gnmi.UpdateResult.op)
}

// -------------------------------------------------------------------

// GetRequest

// .gnmi.Path prefix = 1;
inline bool GetRequest::_internal_has_prefix() const {
  return this != internal_default_instance() && prefix_ != nullptr;
}
inline bool GetRequest::has_prefix() const {
  return _internal_has_prefix();
}
inline void GetRequest::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
inline const ::gnmi::Path& GetRequest::_internal_prefix() const {
  const ::gnmi::Path* p = prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Path&>(
      ::gnmi::_Path_default_instance_);
}
inline const ::gnmi::Path& GetRequest::prefix() const {
  // @@protoc_insertion_point(field_get:gnmi.GetRequest.prefix)
  return _internal_prefix();
}
inline void GetRequest::unsafe_arena_set_allocated_prefix(
    ::gnmi::Path* prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix_);
  }
  prefix_ = prefix;
  if (prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.GetRequest.prefix)
}
inline ::gnmi::Path* GetRequest::release_prefix() {
  
  ::gnmi::Path* temp = prefix_;
  prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Path* GetRequest::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_release:gnmi.GetRequest.prefix)
  
  ::gnmi::Path* temp = prefix_;
  prefix_ = nullptr;
  return temp;
}
inline ::gnmi::Path* GetRequest::_internal_mutable_prefix() {
  
  if (prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Path>(GetArenaForAllocation());
    prefix_ = p;
  }
  return prefix_;
}
inline ::gnmi::Path* GetRequest::mutable_prefix() {
  ::gnmi::Path* _msg = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:gnmi.GetRequest.prefix)
  return _msg;
}
inline void GetRequest::set_allocated_prefix(::gnmi::Path* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prefix_;
  }
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Path>::GetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    
  } else {
    
  }
  prefix_ = prefix;
  // @@protoc_insertion_point(field_set_allocated:gnmi.GetRequest.prefix)
}

// repeated .gnmi.Path path = 2;
inline int GetRequest::_internal_path_size() const {
  return path_.size();
}
inline int GetRequest::path_size() const {
  return _internal_path_size();
}
inline void GetRequest::clear_path() {
  path_.Clear();
}
inline ::gnmi::Path* GetRequest::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.GetRequest.path)
  return path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >*
GetRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.GetRequest.path)
  return &path_;
}
inline const ::gnmi::Path& GetRequest::_internal_path(int index) const {
  return path_.Get(index);
}
inline const ::gnmi::Path& GetRequest::path(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.GetRequest.path)
  return _internal_path(index);
}
inline ::gnmi::Path* GetRequest::_internal_add_path() {
  return path_.Add();
}
inline ::gnmi::Path* GetRequest::add_path() {
  ::gnmi::Path* _add = _internal_add_path();
  // @@protoc_insertion_point(field_add:gnmi.GetRequest.path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Path >&
GetRequest::path() const {
  // @@protoc_insertion_point(field_list:gnmi.GetRequest.path)
  return path_;
}

// .gnmi.GetRequest.DataType type = 3;
inline void GetRequest::clear_type() {
  type_ = 0;
}
inline ::gnmi::GetRequest_DataType GetRequest::_internal_type() const {
  return static_cast< ::gnmi::GetRequest_DataType >(type_);
}
inline ::gnmi::GetRequest_DataType GetRequest::type() const {
  // @@protoc_insertion_point(field_get:gnmi.GetRequest.type)
  return _internal_type();
}
inline void GetRequest::_internal_set_type(::gnmi::GetRequest_DataType value) {
  
  type_ = value;
}
inline void GetRequest::set_type(::gnmi::GetRequest_DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gnmi.GetRequest.type)
}

// .gnmi.Encoding encoding = 5;
inline void GetRequest::clear_encoding() {
  encoding_ = 0;
}
inline ::gnmi::Encoding GetRequest::_internal_encoding() const {
  return static_cast< ::gnmi::Encoding >(encoding_);
}
inline ::gnmi::Encoding GetRequest::encoding() const {
  // @@protoc_insertion_point(field_get:gnmi.GetRequest.encoding)
  return _internal_encoding();
}
inline void GetRequest::_internal_set_encoding(::gnmi::Encoding value) {
  
  encoding_ = value;
}
inline void GetRequest::set_encoding(::gnmi::Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:gnmi.GetRequest.encoding)
}

// repeated .gnmi.ModelData use_models = 6;
inline int GetRequest::_internal_use_models_size() const {
  return use_models_.size();
}
inline int GetRequest::use_models_size() const {
  return _internal_use_models_size();
}
inline void GetRequest::clear_use_models() {
  use_models_.Clear();
}
inline ::gnmi::ModelData* GetRequest::mutable_use_models(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.GetRequest.use_models)
  return use_models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >*
GetRequest::mutable_use_models() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.GetRequest.use_models)
  return &use_models_;
}
inline const ::gnmi::ModelData& GetRequest::_internal_use_models(int index) const {
  return use_models_.Get(index);
}
inline const ::gnmi::ModelData& GetRequest::use_models(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.GetRequest.use_models)
  return _internal_use_models(index);
}
inline ::gnmi::ModelData* GetRequest::_internal_add_use_models() {
  return use_models_.Add();
}
inline ::gnmi::ModelData* GetRequest::add_use_models() {
  ::gnmi::ModelData* _add = _internal_add_use_models();
  // @@protoc_insertion_point(field_add:gnmi.GetRequest.use_models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >&
GetRequest::use_models() const {
  // @@protoc_insertion_point(field_list:gnmi.GetRequest.use_models)
  return use_models_;
}

// repeated .gnmi_ext.Extension extension = 7;
inline int GetRequest::_internal_extension_size() const {
  return extension_.size();
}
inline int GetRequest::extension_size() const {
  return _internal_extension_size();
}
inline ::gnmi_ext::Extension* GetRequest::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.GetRequest.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
GetRequest::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.GetRequest.extension)
  return &extension_;
}
inline const ::gnmi_ext::Extension& GetRequest::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::gnmi_ext::Extension& GetRequest::extension(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.GetRequest.extension)
  return _internal_extension(index);
}
inline ::gnmi_ext::Extension* GetRequest::_internal_add_extension() {
  return extension_.Add();
}
inline ::gnmi_ext::Extension* GetRequest::add_extension() {
  ::gnmi_ext::Extension* _add = _internal_add_extension();
  // @@protoc_insertion_point(field_add:gnmi.GetRequest.extension)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
GetRequest::extension() const {
  // @@protoc_insertion_point(field_list:gnmi.GetRequest.extension)
  return extension_;
}

// -------------------------------------------------------------------

// GetResponse

// repeated .gnmi.Notification notification = 1;
inline int GetResponse::_internal_notification_size() const {
  return notification_.size();
}
inline int GetResponse::notification_size() const {
  return _internal_notification_size();
}
inline void GetResponse::clear_notification() {
  notification_.Clear();
}
inline ::gnmi::Notification* GetResponse::mutable_notification(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.GetResponse.notification)
  return notification_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Notification >*
GetResponse::mutable_notification() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.GetResponse.notification)
  return &notification_;
}
inline const ::gnmi::Notification& GetResponse::_internal_notification(int index) const {
  return notification_.Get(index);
}
inline const ::gnmi::Notification& GetResponse::notification(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.GetResponse.notification)
  return _internal_notification(index);
}
inline ::gnmi::Notification* GetResponse::_internal_add_notification() {
  return notification_.Add();
}
inline ::gnmi::Notification* GetResponse::add_notification() {
  ::gnmi::Notification* _add = _internal_add_notification();
  // @@protoc_insertion_point(field_add:gnmi.GetResponse.notification)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::Notification >&
GetResponse::notification() const {
  // @@protoc_insertion_point(field_list:gnmi.GetResponse.notification)
  return notification_;
}

// .gnmi.Error error = 2 [deprecated = true];
inline bool GetResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool GetResponse::has_error() const {
  return _internal_has_error();
}
inline void GetResponse::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::gnmi::Error& GetResponse::_internal_error() const {
  const ::gnmi::Error* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::gnmi::Error&>(
      ::gnmi::_Error_default_instance_);
}
inline const ::gnmi::Error& GetResponse::error() const {
  // @@protoc_insertion_point(field_get:gnmi.GetResponse.error)
  return _internal_error();
}
inline void GetResponse::unsafe_arena_set_allocated_error(
    ::gnmi::Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi.GetResponse.error)
}
inline ::gnmi::Error* GetResponse::release_error() {
  
  ::gnmi::Error* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gnmi::Error* GetResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:gnmi.GetResponse.error)
  
  ::gnmi::Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::gnmi::Error* GetResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::gnmi::Error>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::gnmi::Error* GetResponse::mutable_error() {
  ::gnmi::Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:gnmi.GetResponse.error)
  return _msg;
}
inline void GetResponse::set_allocated_error(::gnmi::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Error>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:gnmi.GetResponse.error)
}

// repeated .gnmi_ext.Extension extension = 3;
inline int GetResponse::_internal_extension_size() const {
  return extension_.size();
}
inline int GetResponse::extension_size() const {
  return _internal_extension_size();
}
inline ::gnmi_ext::Extension* GetResponse::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.GetResponse.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
GetResponse::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.GetResponse.extension)
  return &extension_;
}
inline const ::gnmi_ext::Extension& GetResponse::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::gnmi_ext::Extension& GetResponse::extension(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.GetResponse.extension)
  return _internal_extension(index);
}
inline ::gnmi_ext::Extension* GetResponse::_internal_add_extension() {
  return extension_.Add();
}
inline ::gnmi_ext::Extension* GetResponse::add_extension() {
  ::gnmi_ext::Extension* _add = _internal_add_extension();
  // @@protoc_insertion_point(field_add:gnmi.GetResponse.extension)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
GetResponse::extension() const {
  // @@protoc_insertion_point(field_list:gnmi.GetResponse.extension)
  return extension_;
}

// -------------------------------------------------------------------

// CapabilityRequest

// repeated .gnmi_ext.Extension extension = 1;
inline int CapabilityRequest::_internal_extension_size() const {
  return extension_.size();
}
inline int CapabilityRequest::extension_size() const {
  return _internal_extension_size();
}
inline ::gnmi_ext::Extension* CapabilityRequest::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.CapabilityRequest.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
CapabilityRequest::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.CapabilityRequest.extension)
  return &extension_;
}
inline const ::gnmi_ext::Extension& CapabilityRequest::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::gnmi_ext::Extension& CapabilityRequest::extension(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.CapabilityRequest.extension)
  return _internal_extension(index);
}
inline ::gnmi_ext::Extension* CapabilityRequest::_internal_add_extension() {
  return extension_.Add();
}
inline ::gnmi_ext::Extension* CapabilityRequest::add_extension() {
  ::gnmi_ext::Extension* _add = _internal_add_extension();
  // @@protoc_insertion_point(field_add:gnmi.CapabilityRequest.extension)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
CapabilityRequest::extension() const {
  // @@protoc_insertion_point(field_list:gnmi.CapabilityRequest.extension)
  return extension_;
}

// -------------------------------------------------------------------

// CapabilityResponse

// repeated .gnmi.ModelData supported_models = 1;
inline int CapabilityResponse::_internal_supported_models_size() const {
  return supported_models_.size();
}
inline int CapabilityResponse::supported_models_size() const {
  return _internal_supported_models_size();
}
inline void CapabilityResponse::clear_supported_models() {
  supported_models_.Clear();
}
inline ::gnmi::ModelData* CapabilityResponse::mutable_supported_models(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.CapabilityResponse.supported_models)
  return supported_models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >*
CapabilityResponse::mutable_supported_models() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.CapabilityResponse.supported_models)
  return &supported_models_;
}
inline const ::gnmi::ModelData& CapabilityResponse::_internal_supported_models(int index) const {
  return supported_models_.Get(index);
}
inline const ::gnmi::ModelData& CapabilityResponse::supported_models(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.CapabilityResponse.supported_models)
  return _internal_supported_models(index);
}
inline ::gnmi::ModelData* CapabilityResponse::_internal_add_supported_models() {
  return supported_models_.Add();
}
inline ::gnmi::ModelData* CapabilityResponse::add_supported_models() {
  ::gnmi::ModelData* _add = _internal_add_supported_models();
  // @@protoc_insertion_point(field_add:gnmi.CapabilityResponse.supported_models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >&
CapabilityResponse::supported_models() const {
  // @@protoc_insertion_point(field_list:gnmi.CapabilityResponse.supported_models)
  return supported_models_;
}

// repeated .gnmi.Encoding supported_encodings = 2;
inline int CapabilityResponse::_internal_supported_encodings_size() const {
  return supported_encodings_.size();
}
inline int CapabilityResponse::supported_encodings_size() const {
  return _internal_supported_encodings_size();
}
inline void CapabilityResponse::clear_supported_encodings() {
  supported_encodings_.Clear();
}
inline ::gnmi::Encoding CapabilityResponse::_internal_supported_encodings(int index) const {
  return static_cast< ::gnmi::Encoding >(supported_encodings_.Get(index));
}
inline ::gnmi::Encoding CapabilityResponse::supported_encodings(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.CapabilityResponse.supported_encodings)
  return _internal_supported_encodings(index);
}
inline void CapabilityResponse::set_supported_encodings(int index, ::gnmi::Encoding value) {
  supported_encodings_.Set(index, value);
  // @@protoc_insertion_point(field_set:gnmi.CapabilityResponse.supported_encodings)
}
inline void CapabilityResponse::_internal_add_supported_encodings(::gnmi::Encoding value) {
  supported_encodings_.Add(value);
}
inline void CapabilityResponse::add_supported_encodings(::gnmi::Encoding value) {
  _internal_add_supported_encodings(value);
  // @@protoc_insertion_point(field_add:gnmi.CapabilityResponse.supported_encodings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CapabilityResponse::supported_encodings() const {
  // @@protoc_insertion_point(field_list:gnmi.CapabilityResponse.supported_encodings)
  return supported_encodings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CapabilityResponse::_internal_mutable_supported_encodings() {
  return &supported_encodings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CapabilityResponse::mutable_supported_encodings() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.CapabilityResponse.supported_encodings)
  return _internal_mutable_supported_encodings();
}

// string gNMI_version = 3;
inline void CapabilityResponse::clear_gnmi_version() {
  gnmi_version_.ClearToEmpty();
}
inline const std::string& CapabilityResponse::gnmi_version() const {
  // @@protoc_insertion_point(field_get:gnmi.CapabilityResponse.gNMI_version)
  return _internal_gnmi_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CapabilityResponse::set_gnmi_version(ArgT0&& arg0, ArgT... args) {
 
 gnmi_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.CapabilityResponse.gNMI_version)
}
inline std::string* CapabilityResponse::mutable_gnmi_version() {
  std::string* _s = _internal_mutable_gnmi_version();
  // @@protoc_insertion_point(field_mutable:gnmi.CapabilityResponse.gNMI_version)
  return _s;
}
inline const std::string& CapabilityResponse::_internal_gnmi_version() const {
  return gnmi_version_.Get();
}
inline void CapabilityResponse::_internal_set_gnmi_version(const std::string& value) {
  
  gnmi_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CapabilityResponse::_internal_mutable_gnmi_version() {
  
  return gnmi_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CapabilityResponse::release_gnmi_version() {
  // @@protoc_insertion_point(field_release:gnmi.CapabilityResponse.gNMI_version)
  return gnmi_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CapabilityResponse::set_allocated_gnmi_version(std::string* gnmi_version) {
  if (gnmi_version != nullptr) {
    
  } else {
    
  }
  gnmi_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gnmi_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (gnmi_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    gnmi_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnmi.CapabilityResponse.gNMI_version)
}

// repeated .gnmi_ext.Extension extension = 4;
inline int CapabilityResponse::_internal_extension_size() const {
  return extension_.size();
}
inline int CapabilityResponse::extension_size() const {
  return _internal_extension_size();
}
inline ::gnmi_ext::Extension* CapabilityResponse::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:gnmi.CapabilityResponse.extension)
  return extension_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >*
CapabilityResponse::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:gnmi.CapabilityResponse.extension)
  return &extension_;
}
inline const ::gnmi_ext::Extension& CapabilityResponse::_internal_extension(int index) const {
  return extension_.Get(index);
}
inline const ::gnmi_ext::Extension& CapabilityResponse::extension(int index) const {
  // @@protoc_insertion_point(field_get:gnmi.CapabilityResponse.extension)
  return _internal_extension(index);
}
inline ::gnmi_ext::Extension* CapabilityResponse::_internal_add_extension() {
  return extension_.Add();
}
inline ::gnmi_ext::Extension* CapabilityResponse::add_extension() {
  ::gnmi_ext::Extension* _add = _internal_add_extension();
  // @@protoc_insertion_point(field_add:gnmi.CapabilityResponse.extension)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi_ext::Extension >&
CapabilityResponse::extension() const {
  // @@protoc_insertion_point(field_list:gnmi.CapabilityResponse.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ModelData

// string name = 1;
inline void ModelData::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ModelData::name() const {
  // @@protoc_insertion_point(field_get:gnmi.ModelData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelData::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.ModelData.name)
}
inline std::string* ModelData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:gnmi.ModelData.name)
  return _s;
}
inline const std::string& ModelData::_internal_name() const {
  return name_.Get();
}
inline void ModelData::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelData::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelData::release_name() {
  // @@protoc_insertion_point(field_release:gnmi.ModelData.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnmi.ModelData.name)
}

// string organization = 2;
inline void ModelData::clear_organization() {
  organization_.ClearToEmpty();
}
inline const std::string& ModelData::organization() const {
  // @@protoc_insertion_point(field_get:gnmi.ModelData.organization)
  return _internal_organization();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelData::set_organization(ArgT0&& arg0, ArgT... args) {
 
 organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.ModelData.organization)
}
inline std::string* ModelData::mutable_organization() {
  std::string* _s = _internal_mutable_organization();
  // @@protoc_insertion_point(field_mutable:gnmi.ModelData.organization)
  return _s;
}
inline const std::string& ModelData::_internal_organization() const {
  return organization_.Get();
}
inline void ModelData::_internal_set_organization(const std::string& value) {
  
  organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelData::_internal_mutable_organization() {
  
  return organization_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelData::release_organization() {
  // @@protoc_insertion_point(field_release:gnmi.ModelData.organization)
  return organization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelData::set_allocated_organization(std::string* organization) {
  if (organization != nullptr) {
    
  } else {
    
  }
  organization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (organization_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnmi.ModelData.organization)
}

// string version = 3;
inline void ModelData::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ModelData::version() const {
  // @@protoc_insertion_point(field_get:gnmi.ModelData.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelData::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gnmi.ModelData.version)
}
inline std::string* ModelData::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:gnmi.ModelData.version)
  return _s;
}
inline const std::string& ModelData::_internal_version() const {
  return version_.Get();
}
inline void ModelData::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelData::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelData::release_version() {
  // @@protoc_insertion_point(field_release:gnmi.ModelData.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelData::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gnmi.ModelData.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnmi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gnmi::SubscriptionList_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gnmi::SubscriptionList_Mode>() {
  return ::gnmi::SubscriptionList_Mode_descriptor();
}
template <> struct is_proto_enum< ::gnmi::UpdateResult_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gnmi::UpdateResult_Operation>() {
  return ::gnmi::UpdateResult_Operation_descriptor();
}
template <> struct is_proto_enum< ::gnmi::GetRequest_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gnmi::GetRequest_DataType>() {
  return ::gnmi::GetRequest_DataType_descriptor();
}
template <> struct is_proto_enum< ::gnmi::Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gnmi::Encoding>() {
  return ::gnmi::Encoding_descriptor();
}
template <> struct is_proto_enum< ::gnmi::SubscriptionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gnmi::SubscriptionMode>() {
  return ::gnmi::SubscriptionMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gnmi_2eproto
