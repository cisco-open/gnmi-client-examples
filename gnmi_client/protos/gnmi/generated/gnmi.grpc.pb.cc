// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gnmi.proto

#include "gnmi.pb.h"
#include "gnmi.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gnmi {

static const char* gNMI_method_names[] = {
  "/gnmi.gNMI/Capabilities",
  "/gnmi.gNMI/Get",
  "/gnmi.gNMI/Set",
  "/gnmi.gNMI/Subscribe",
};

std::unique_ptr< gNMI::Stub> gNMI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< gNMI::Stub> stub(new gNMI::Stub(channel, options));
  return stub;
}

gNMI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Capabilities_(gNMI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(gNMI_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Set_(gNMI_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Subscribe_(gNMI_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status gNMI::Stub::Capabilities(::grpc::ClientContext* context, const ::gnmi::CapabilityRequest& request, ::gnmi::CapabilityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gnmi::CapabilityRequest, ::gnmi::CapabilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Capabilities_, context, request, response);
}

void gNMI::Stub::async::Capabilities(::grpc::ClientContext* context, const ::gnmi::CapabilityRequest* request, ::gnmi::CapabilityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gnmi::CapabilityRequest, ::gnmi::CapabilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Capabilities_, context, request, response, std::move(f));
}

void gNMI::Stub::async::Capabilities(::grpc::ClientContext* context, const ::gnmi::CapabilityRequest* request, ::gnmi::CapabilityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Capabilities_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gnmi::CapabilityResponse>* gNMI::Stub::PrepareAsyncCapabilitiesRaw(::grpc::ClientContext* context, const ::gnmi::CapabilityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gnmi::CapabilityResponse, ::gnmi::CapabilityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Capabilities_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gnmi::CapabilityResponse>* gNMI::Stub::AsyncCapabilitiesRaw(::grpc::ClientContext* context, const ::gnmi::CapabilityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCapabilitiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status gNMI::Stub::Get(::grpc::ClientContext* context, const ::gnmi::GetRequest& request, ::gnmi::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gnmi::GetRequest, ::gnmi::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void gNMI::Stub::async::Get(::grpc::ClientContext* context, const ::gnmi::GetRequest* request, ::gnmi::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gnmi::GetRequest, ::gnmi::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void gNMI::Stub::async::Get(::grpc::ClientContext* context, const ::gnmi::GetRequest* request, ::gnmi::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gnmi::GetResponse>* gNMI::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::gnmi::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gnmi::GetResponse, ::gnmi::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gnmi::GetResponse>* gNMI::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::gnmi::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status gNMI::Stub::Set(::grpc::ClientContext* context, const ::gnmi::SetRequest& request, ::gnmi::SetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gnmi::SetRequest, ::gnmi::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void gNMI::Stub::async::Set(::grpc::ClientContext* context, const ::gnmi::SetRequest* request, ::gnmi::SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gnmi::SetRequest, ::gnmi::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void gNMI::Stub::async::Set(::grpc::ClientContext* context, const ::gnmi::SetRequest* request, ::gnmi::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gnmi::SetResponse>* gNMI::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::gnmi::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gnmi::SetResponse, ::gnmi::SetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gnmi::SetResponse>* gNMI::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::gnmi::SetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::gnmi::SubscribeRequest, ::gnmi::SubscribeResponse>* gNMI::Stub::SubscribeRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::gnmi::SubscribeRequest, ::gnmi::SubscribeResponse>::Create(channel_.get(), rpcmethod_Subscribe_, context);
}

void gNMI::Stub::async::Subscribe(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::gnmi::SubscribeRequest,::gnmi::SubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::gnmi::SubscribeRequest,::gnmi::SubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::gnmi::SubscribeRequest, ::gnmi::SubscribeResponse>* gNMI::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::gnmi::SubscribeRequest, ::gnmi::SubscribeResponse>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::gnmi::SubscribeRequest, ::gnmi::SubscribeResponse>* gNMI::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::gnmi::SubscribeRequest, ::gnmi::SubscribeResponse>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, false, nullptr);
}

gNMI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gNMI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gNMI::Service, ::gnmi::CapabilityRequest, ::gnmi::CapabilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gNMI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gnmi::CapabilityRequest* req,
             ::gnmi::CapabilityResponse* resp) {
               return service->Capabilities(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gNMI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gNMI::Service, ::gnmi::GetRequest, ::gnmi::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gNMI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gnmi::GetRequest* req,
             ::gnmi::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gNMI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< gNMI::Service, ::gnmi::SetRequest, ::gnmi::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](gNMI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gnmi::SetRequest* req,
             ::gnmi::SetResponse* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      gNMI_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< gNMI::Service, ::gnmi::SubscribeRequest, ::gnmi::SubscribeResponse>(
          [](gNMI::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::gnmi::SubscribeResponse,
             ::gnmi::SubscribeRequest>* stream) {
               return service->Subscribe(ctx, stream);
             }, this)));
}

gNMI::Service::~Service() {
}

::grpc::Status gNMI::Service::Capabilities(::grpc::ServerContext* context, const ::gnmi::CapabilityRequest* request, ::gnmi::CapabilityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gNMI::Service::Get(::grpc::ServerContext* context, const ::gnmi::GetRequest* request, ::gnmi::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gNMI::Service::Set(::grpc::ServerContext* context, const ::gnmi::SetRequest* request, ::gnmi::SetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status gNMI::Service::Subscribe(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::gnmi::SubscribeResponse, ::gnmi::SubscribeRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gnmi

