// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnmi_ext.proto

#include "gnmi_ext.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace gnmi_ext {
constexpr Extension::Extension(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ExtensionDefaultTypeInternal {
  constexpr ExtensionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtensionDefaultTypeInternal() {}
  union {
    Extension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtensionDefaultTypeInternal _Extension_default_instance_;
constexpr RegisteredExtension::RegisteredExtension(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0)
{}
struct RegisteredExtensionDefaultTypeInternal {
  constexpr RegisteredExtensionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegisteredExtensionDefaultTypeInternal() {}
  union {
    RegisteredExtension _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegisteredExtensionDefaultTypeInternal _RegisteredExtension_default_instance_;
constexpr MasterArbitration::MasterArbitration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr)
  , election_id_(nullptr){}
struct MasterArbitrationDefaultTypeInternal {
  constexpr MasterArbitrationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MasterArbitrationDefaultTypeInternal() {}
  union {
    MasterArbitration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MasterArbitrationDefaultTypeInternal _MasterArbitration_default_instance_;
constexpr Uint128::Uint128(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : high_(uint64_t{0u})
  , low_(uint64_t{0u}){}
struct Uint128DefaultTypeInternal {
  constexpr Uint128DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Uint128DefaultTypeInternal() {}
  union {
    Uint128 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Uint128DefaultTypeInternal _Uint128_default_instance_;
constexpr Role::Role(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RoleDefaultTypeInternal {
  constexpr RoleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoleDefaultTypeInternal() {}
  union {
    Role _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoleDefaultTypeInternal _Role_default_instance_;
constexpr History::History(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct HistoryDefaultTypeInternal {
  constexpr HistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HistoryDefaultTypeInternal() {}
  union {
    History _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HistoryDefaultTypeInternal _History_default_instance_;
constexpr TimeRange::TimeRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(int64_t{0})
  , end_(int64_t{0}){}
struct TimeRangeDefaultTypeInternal {
  constexpr TimeRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeRangeDefaultTypeInternal() {}
  union {
    TimeRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
constexpr Commit::Commit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct CommitDefaultTypeInternal {
  constexpr CommitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitDefaultTypeInternal() {}
  union {
    Commit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitDefaultTypeInternal _Commit_default_instance_;
constexpr CommitRequest::CommitRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rollback_duration_(nullptr){}
struct CommitRequestDefaultTypeInternal {
  constexpr CommitRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitRequestDefaultTypeInternal() {}
  union {
    CommitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitRequestDefaultTypeInternal _CommitRequest_default_instance_;
constexpr CommitConfirm::CommitConfirm(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CommitConfirmDefaultTypeInternal {
  constexpr CommitConfirmDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitConfirmDefaultTypeInternal() {}
  union {
    CommitConfirm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitConfirmDefaultTypeInternal _CommitConfirm_default_instance_;
constexpr CommitCancel::CommitCancel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CommitCancelDefaultTypeInternal {
  constexpr CommitCancelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitCancelDefaultTypeInternal() {}
  union {
    CommitCancel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitCancelDefaultTypeInternal _CommitCancel_default_instance_;
constexpr CommitSetRollbackDuration::CommitSetRollbackDuration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rollback_duration_(nullptr){}
struct CommitSetRollbackDurationDefaultTypeInternal {
  constexpr CommitSetRollbackDurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitSetRollbackDurationDefaultTypeInternal() {}
  union {
    CommitSetRollbackDuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitSetRollbackDurationDefaultTypeInternal _CommitSetRollbackDuration_default_instance_;
constexpr Depth::Depth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : level_(0u){}
struct DepthDefaultTypeInternal {
  constexpr DepthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DepthDefaultTypeInternal() {}
  union {
    Depth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DepthDefaultTypeInternal _Depth_default_instance_;
}  // namespace gnmi_ext
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gnmi_5fext_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gnmi_5fext_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gnmi_5fext_2eproto = nullptr;

const uint32_t TableStruct_gnmi_5fext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Extension, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Extension, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Extension, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::RegisteredExtension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::RegisteredExtension, id_),
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::RegisteredExtension, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::MasterArbitration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::MasterArbitration, role_),
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::MasterArbitration, election_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Uint128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Uint128, high_),
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Uint128, low_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Role, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Role, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::History, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::History, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::History, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::TimeRange, start_),
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::TimeRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Commit, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Commit, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Commit, id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Commit, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::CommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::CommitRequest, rollback_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::CommitConfirm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::CommitCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::CommitSetRollbackDuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::CommitSetRollbackDuration, rollback_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Depth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi_ext::Depth, level_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gnmi_ext::Extension)},
  { 12, -1, -1, sizeof(::gnmi_ext::RegisteredExtension)},
  { 20, -1, -1, sizeof(::gnmi_ext::MasterArbitration)},
  { 28, -1, -1, sizeof(::gnmi_ext::Uint128)},
  { 36, -1, -1, sizeof(::gnmi_ext::Role)},
  { 43, -1, -1, sizeof(::gnmi_ext::History)},
  { 52, -1, -1, sizeof(::gnmi_ext::TimeRange)},
  { 60, -1, -1, sizeof(::gnmi_ext::Commit)},
  { 72, -1, -1, sizeof(::gnmi_ext::CommitRequest)},
  { 79, -1, -1, sizeof(::gnmi_ext::CommitConfirm)},
  { 85, -1, -1, sizeof(::gnmi_ext::CommitCancel)},
  { 91, -1, -1, sizeof(::gnmi_ext::CommitSetRollbackDuration)},
  { 98, -1, -1, sizeof(::gnmi_ext::Depth)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_Extension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_RegisteredExtension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_MasterArbitration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_Uint128_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_Role_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_History_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_TimeRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_Commit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_CommitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_CommitConfirm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_CommitCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_CommitSetRollbackDuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi_ext::_Depth_default_instance_),
};

const char descriptor_table_protodef_gnmi_5fext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016gnmi_ext.proto\022\010gnmi_ext\032\036google/proto"
  "buf/duration.proto\"\362\001\n\tExtension\0227\n\016regi"
  "stered_ext\030\001 \001(\0132\035.gnmi_ext.RegisteredEx"
  "tensionH\000\0229\n\022master_arbitration\030\002 \001(\0132\033."
  "gnmi_ext.MasterArbitrationH\000\022$\n\007history\030"
  "\003 \001(\0132\021.gnmi_ext.HistoryH\000\022\"\n\006commit\030\004 \001"
  "(\0132\020.gnmi_ext.CommitH\000\022 \n\005depth\030\005 \001(\0132\017."
  "gnmi_ext.DepthH\000B\005\n\003ext\"E\n\023RegisteredExt"
  "ension\022!\n\002id\030\001 \001(\0162\025.gnmi_ext.ExtensionI"
  "D\022\013\n\003msg\030\002 \001(\014\"Y\n\021MasterArbitration\022\034\n\004r"
  "ole\030\001 \001(\0132\016.gnmi_ext.Role\022&\n\013election_id"
  "\030\002 \001(\0132\021.gnmi_ext.Uint128\"$\n\007Uint128\022\014\n\004"
  "high\030\001 \001(\004\022\013\n\003low\030\002 \001(\004\"\022\n\004Role\022\n\n\002id\030\001 "
  "\001(\t\"S\n\007History\022\027\n\rsnapshot_time\030\001 \001(\003H\000\022"
  "$\n\005range\030\002 \001(\0132\023.gnmi_ext.TimeRangeH\000B\t\n"
  "\007request\"\'\n\tTimeRange\022\r\n\005start\030\001 \001(\003\022\013\n\003"
  "end\030\002 \001(\003\"\345\001\n\006Commit\022\n\n\002id\030\001 \001(\t\022)\n\006comm"
  "it\030\002 \001(\0132\027.gnmi_ext.CommitRequestH\000\022*\n\007c"
  "onfirm\030\003 \001(\0132\027.gnmi_ext.CommitConfirmH\000\022"
  "(\n\006cancel\030\004 \001(\0132\026.gnmi_ext.CommitCancelH"
  "\000\022D\n\025set_rollback_duration\030\005 \001(\0132#.gnmi_"
  "ext.CommitSetRollbackDurationH\000B\010\n\006actio"
  "n\"E\n\rCommitRequest\0224\n\021rollback_duration\030"
  "\001 \001(\0132\031.google.protobuf.Duration\"\017\n\rComm"
  "itConfirm\"\016\n\014CommitCancel\"Q\n\031CommitSetRo"
  "llbackDuration\0224\n\021rollback_duration\030\001 \001("
  "\0132\031.google.protobuf.Duration\"\026\n\005Depth\022\r\n"
  "\005level\030\001 \001(\r*3\n\013ExtensionID\022\r\n\tEID_UNSET"
  "\020\000\022\025\n\020EID_EXPERIMENTAL\020\347\007B+Z)github.com/"
  "openconfig/gnmi/proto/gnmi_extb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gnmi_5fext_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gnmi_5fext_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gnmi_5fext_2eproto = {
  false, false, 1198, descriptor_table_protodef_gnmi_5fext_2eproto, "gnmi_ext.proto", 
  &descriptor_table_gnmi_5fext_2eproto_once, descriptor_table_gnmi_5fext_2eproto_deps, 1, 13,
  schemas, file_default_instances, TableStruct_gnmi_5fext_2eproto::offsets,
  file_level_metadata_gnmi_5fext_2eproto, file_level_enum_descriptors_gnmi_5fext_2eproto, file_level_service_descriptors_gnmi_5fext_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gnmi_5fext_2eproto_getter() {
  return &descriptor_table_gnmi_5fext_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gnmi_5fext_2eproto(&descriptor_table_gnmi_5fext_2eproto);
namespace gnmi_ext {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExtensionID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gnmi_5fext_2eproto);
  return file_level_enum_descriptors_gnmi_5fext_2eproto[0];
}
bool ExtensionID_IsValid(int value) {
  switch (value) {
    case 0:
    case 999:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Extension::_Internal {
 public:
  static const ::gnmi_ext::RegisteredExtension& registered_ext(const Extension* msg);
  static const ::gnmi_ext::MasterArbitration& master_arbitration(const Extension* msg);
  static const ::gnmi_ext::History& history(const Extension* msg);
  static const ::gnmi_ext::Commit& commit(const Extension* msg);
  static const ::gnmi_ext::Depth& depth(const Extension* msg);
};

const ::gnmi_ext::RegisteredExtension&
Extension::_Internal::registered_ext(const Extension* msg) {
  return *msg->ext_.registered_ext_;
}
const ::gnmi_ext::MasterArbitration&
Extension::_Internal::master_arbitration(const Extension* msg) {
  return *msg->ext_.master_arbitration_;
}
const ::gnmi_ext::History&
Extension::_Internal::history(const Extension* msg) {
  return *msg->ext_.history_;
}
const ::gnmi_ext::Commit&
Extension::_Internal::commit(const Extension* msg) {
  return *msg->ext_.commit_;
}
const ::gnmi_ext::Depth&
Extension::_Internal::depth(const Extension* msg) {
  return *msg->ext_.depth_;
}
void Extension::set_allocated_registered_ext(::gnmi_ext::RegisteredExtension* registered_ext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (registered_ext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi_ext::RegisteredExtension>::GetOwningArena(registered_ext);
    if (message_arena != submessage_arena) {
      registered_ext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registered_ext, submessage_arena);
    }
    set_has_registered_ext();
    ext_.registered_ext_ = registered_ext;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.Extension.registered_ext)
}
void Extension::set_allocated_master_arbitration(::gnmi_ext::MasterArbitration* master_arbitration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (master_arbitration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi_ext::MasterArbitration>::GetOwningArena(master_arbitration);
    if (message_arena != submessage_arena) {
      master_arbitration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_arbitration, submessage_arena);
    }
    set_has_master_arbitration();
    ext_.master_arbitration_ = master_arbitration;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.Extension.master_arbitration)
}
void Extension::set_allocated_history(::gnmi_ext::History* history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi_ext::History>::GetOwningArena(history);
    if (message_arena != submessage_arena) {
      history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history, submessage_arena);
    }
    set_has_history();
    ext_.history_ = history;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.Extension.history)
}
void Extension::set_allocated_commit(::gnmi_ext::Commit* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi_ext::Commit>::GetOwningArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    set_has_commit();
    ext_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.Extension.commit)
}
void Extension::set_allocated_depth(::gnmi_ext::Depth* depth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (depth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi_ext::Depth>::GetOwningArena(depth);
    if (message_arena != submessage_arena) {
      depth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, depth, submessage_arena);
    }
    set_has_depth();
    ext_.depth_ = depth;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.Extension.depth)
}
Extension::Extension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.Extension)
}
Extension::Extension(const Extension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ext();
  switch (from.ext_case()) {
    case kRegisteredExt: {
      _internal_mutable_registered_ext()->::gnmi_ext::RegisteredExtension::MergeFrom(from._internal_registered_ext());
      break;
    }
    case kMasterArbitration: {
      _internal_mutable_master_arbitration()->::gnmi_ext::MasterArbitration::MergeFrom(from._internal_master_arbitration());
      break;
    }
    case kHistory: {
      _internal_mutable_history()->::gnmi_ext::History::MergeFrom(from._internal_history());
      break;
    }
    case kCommit: {
      _internal_mutable_commit()->::gnmi_ext::Commit::MergeFrom(from._internal_commit());
      break;
    }
    case kDepth: {
      _internal_mutable_depth()->::gnmi_ext::Depth::MergeFrom(from._internal_depth());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.Extension)
}

inline void Extension::SharedCtor() {
clear_has_ext();
}

Extension::~Extension() {
  // @@protoc_insertion_point(destructor:gnmi_ext.Extension)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Extension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ext()) {
    clear_ext();
  }
}

void Extension::ArenaDtor(void* object) {
  Extension* _this = reinterpret_cast< Extension* >(object);
  (void)_this;
}
void Extension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Extension::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:gnmi_ext.Extension)
  switch (ext_case()) {
    case kRegisteredExt: {
      if (GetArenaForAllocation() == nullptr) {
        delete ext_.registered_ext_;
      }
      break;
    }
    case kMasterArbitration: {
      if (GetArenaForAllocation() == nullptr) {
        delete ext_.master_arbitration_;
      }
      break;
    }
    case kHistory: {
      if (GetArenaForAllocation() == nullptr) {
        delete ext_.history_;
      }
      break;
    }
    case kCommit: {
      if (GetArenaForAllocation() == nullptr) {
        delete ext_.commit_;
      }
      break;
    }
    case kDepth: {
      if (GetArenaForAllocation() == nullptr) {
        delete ext_.depth_;
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXT_NOT_SET;
}


void Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.Extension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ext();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi_ext.RegisteredExtension registered_ext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_registered_ext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi_ext.MasterArbitration master_arbitration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_master_arbitration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi_ext.History history = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi_ext.Commit commit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi_ext.Depth depth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Extension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.Extension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi_ext.RegisteredExtension registered_ext = 1;
  if (_internal_has_registered_ext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::registered_ext(this), target, stream);
  }

  // .gnmi_ext.MasterArbitration master_arbitration = 2;
  if (_internal_has_master_arbitration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::master_arbitration(this), target, stream);
  }

  // .gnmi_ext.History history = 3;
  if (_internal_has_history()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::history(this), target, stream);
  }

  // .gnmi_ext.Commit commit = 4;
  if (_internal_has_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::commit(this), target, stream);
  }

  // .gnmi_ext.Depth depth = 5;
  if (_internal_has_depth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::depth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.Extension)
  return target;
}

size_t Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.Extension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ext_case()) {
    // .gnmi_ext.RegisteredExtension registered_ext = 1;
    case kRegisteredExt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_.registered_ext_);
      break;
    }
    // .gnmi_ext.MasterArbitration master_arbitration = 2;
    case kMasterArbitration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_.master_arbitration_);
      break;
    }
    // .gnmi_ext.History history = 3;
    case kHistory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_.history_);
      break;
    }
    // .gnmi_ext.Commit commit = 4;
    case kCommit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_.commit_);
      break;
    }
    // .gnmi_ext.Depth depth = 5;
    case kDepth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_.depth_);
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Extension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Extension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Extension::GetClassData() const { return &_class_data_; }

void Extension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Extension *>(to)->MergeFrom(
      static_cast<const Extension &>(from));
}


void Extension::MergeFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ext_case()) {
    case kRegisteredExt: {
      _internal_mutable_registered_ext()->::gnmi_ext::RegisteredExtension::MergeFrom(from._internal_registered_ext());
      break;
    }
    case kMasterArbitration: {
      _internal_mutable_master_arbitration()->::gnmi_ext::MasterArbitration::MergeFrom(from._internal_master_arbitration());
      break;
    }
    case kHistory: {
      _internal_mutable_history()->::gnmi_ext::History::MergeFrom(from._internal_history());
      break;
    }
    case kCommit: {
      _internal_mutable_commit()->::gnmi_ext::Commit::MergeFrom(from._internal_commit());
      break;
    }
    case kDepth: {
      _internal_mutable_depth()->::gnmi_ext::Depth::MergeFrom(from._internal_depth());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Extension::CopyFrom(const Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extension::IsInitialized() const {
  return true;
}

void Extension::InternalSwap(Extension* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ext_, other->ext_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extension::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[0]);
}

// ===================================================================

class RegisteredExtension::_Internal {
 public:
};

RegisteredExtension::RegisteredExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.RegisteredExtension)
}
RegisteredExtension::RegisteredExtension(const RegisteredExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.RegisteredExtension)
}

inline void RegisteredExtension::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = 0;
}

RegisteredExtension::~RegisteredExtension() {
  // @@protoc_insertion_point(destructor:gnmi_ext.RegisteredExtension)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RegisteredExtension::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisteredExtension::ArenaDtor(void* object) {
  RegisteredExtension* _this = reinterpret_cast< RegisteredExtension* >(object);
  (void)_this;
}
void RegisteredExtension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisteredExtension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegisteredExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.RegisteredExtension)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisteredExtension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi_ext.ExtensionID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::gnmi_ext::ExtensionID>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisteredExtension::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.RegisteredExtension)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi_ext.ExtensionID id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // bytes msg = 2;
  if (!this->_internal_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.RegisteredExtension)
  return target;
}

size_t RegisteredExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.RegisteredExtension)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // .gnmi_ext.ExtensionID id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisteredExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RegisteredExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisteredExtension::GetClassData() const { return &_class_data_; }

void RegisteredExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RegisteredExtension *>(to)->MergeFrom(
      static_cast<const RegisteredExtension &>(from));
}


void RegisteredExtension::MergeFrom(const RegisteredExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.RegisteredExtension)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisteredExtension::CopyFrom(const RegisteredExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.RegisteredExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredExtension::IsInitialized() const {
  return true;
}

void RegisteredExtension::InternalSwap(RegisteredExtension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisteredExtension::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[1]);
}

// ===================================================================

class MasterArbitration::_Internal {
 public:
  static const ::gnmi_ext::Role& role(const MasterArbitration* msg);
  static const ::gnmi_ext::Uint128& election_id(const MasterArbitration* msg);
};

const ::gnmi_ext::Role&
MasterArbitration::_Internal::role(const MasterArbitration* msg) {
  return *msg->role_;
}
const ::gnmi_ext::Uint128&
MasterArbitration::_Internal::election_id(const MasterArbitration* msg) {
  return *msg->election_id_;
}
MasterArbitration::MasterArbitration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.MasterArbitration)
}
MasterArbitration::MasterArbitration(const MasterArbitration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::gnmi_ext::Role(*from.role_);
  } else {
    role_ = nullptr;
  }
  if (from._internal_has_election_id()) {
    election_id_ = new ::gnmi_ext::Uint128(*from.election_id_);
  } else {
    election_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.MasterArbitration)
}

inline void MasterArbitration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&election_id_) -
    reinterpret_cast<char*>(&role_)) + sizeof(election_id_));
}

MasterArbitration::~MasterArbitration() {
  // @@protoc_insertion_point(destructor:gnmi_ext.MasterArbitration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MasterArbitration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
  if (this != internal_default_instance()) delete election_id_;
}

void MasterArbitration::ArenaDtor(void* object) {
  MasterArbitration* _this = reinterpret_cast< MasterArbitration* >(object);
  (void)_this;
}
void MasterArbitration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MasterArbitration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MasterArbitration::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.MasterArbitration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  if (GetArenaForAllocation() == nullptr && election_id_ != nullptr) {
    delete election_id_;
  }
  election_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MasterArbitration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi_ext.Role role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi_ext.Uint128 election_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_election_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MasterArbitration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.MasterArbitration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi_ext.Role role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // .gnmi_ext.Uint128 election_id = 2;
  if (this->_internal_has_election_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::election_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.MasterArbitration)
  return target;
}

size_t MasterArbitration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.MasterArbitration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gnmi_ext.Role role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .gnmi_ext.Uint128 election_id = 2;
  if (this->_internal_has_election_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *election_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MasterArbitration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MasterArbitration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MasterArbitration::GetClassData() const { return &_class_data_; }

void MasterArbitration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MasterArbitration *>(to)->MergeFrom(
      static_cast<const MasterArbitration &>(from));
}


void MasterArbitration::MergeFrom(const MasterArbitration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.MasterArbitration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::gnmi_ext::Role::MergeFrom(from._internal_role());
  }
  if (from._internal_has_election_id()) {
    _internal_mutable_election_id()->::gnmi_ext::Uint128::MergeFrom(from._internal_election_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MasterArbitration::CopyFrom(const MasterArbitration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.MasterArbitration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterArbitration::IsInitialized() const {
  return true;
}

void MasterArbitration::InternalSwap(MasterArbitration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MasterArbitration, election_id_)
      + sizeof(MasterArbitration::election_id_)
      - PROTOBUF_FIELD_OFFSET(MasterArbitration, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterArbitration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[2]);
}

// ===================================================================

class Uint128::_Internal {
 public:
};

Uint128::Uint128(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.Uint128)
}
Uint128::Uint128(const Uint128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&high_, &from.high_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.Uint128)
}

inline void Uint128::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&high_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
}

Uint128::~Uint128() {
  // @@protoc_insertion_point(destructor:gnmi_ext.Uint128)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Uint128::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Uint128::ArenaDtor(void* object) {
  Uint128* _this = reinterpret_cast< Uint128* >(object);
  (void)_this;
}
void Uint128::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uint128::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Uint128::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.Uint128)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&high_)) + sizeof(low_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uint128::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uint128::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.Uint128)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->_internal_high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_high(), target);
  }

  // uint64 low = 2;
  if (this->_internal_low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_low(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.Uint128)
  return target;
}

size_t Uint128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.Uint128)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->_internal_high() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_high());
  }

  // uint64 low = 2;
  if (this->_internal_low() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_low());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uint128::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Uint128::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uint128::GetClassData() const { return &_class_data_; }

void Uint128::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Uint128 *>(to)->MergeFrom(
      static_cast<const Uint128 &>(from));
}


void Uint128::MergeFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.Uint128)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from._internal_low() != 0) {
    _internal_set_low(from._internal_low());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uint128::CopyFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.Uint128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint128::IsInitialized() const {
  return true;
}

void Uint128::InternalSwap(Uint128* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Uint128, low_)
      + sizeof(Uint128::low_)
      - PROTOBUF_FIELD_OFFSET(Uint128, high_)>(
          reinterpret_cast<char*>(&high_),
          reinterpret_cast<char*>(&other->high_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint128::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[3]);
}

// ===================================================================

class Role::_Internal {
 public:
};

Role::Role(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.Role)
}
Role::Role(const Role& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.Role)
}

inline void Role::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:gnmi_ext.Role)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Role::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Role::ArenaDtor(void* object) {
  Role* _this = reinterpret_cast< Role* >(object);
  (void)_this;
}
void Role::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Role::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Role::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.Role)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Role::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi_ext.Role.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Role::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.Role)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi_ext.Role.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.Role)
  return target;
}

size_t Role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.Role)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Role::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Role::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Role::GetClassData() const { return &_class_data_; }

void Role::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Role *>(to)->MergeFrom(
      static_cast<const Role &>(from));
}


void Role::MergeFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.Role)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Role::CopyFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  return true;
}

void Role::InternalSwap(Role* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Role::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[4]);
}

// ===================================================================

class History::_Internal {
 public:
  static const ::gnmi_ext::TimeRange& range(const History* msg);
};

const ::gnmi_ext::TimeRange&
History::_Internal::range(const History* msg) {
  return *msg->request_.range_;
}
void History::set_allocated_range(::gnmi_ext::TimeRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi_ext::TimeRange>::GetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    request_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.History.range)
}
History::History(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.History)
}
History::History(const History& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kSnapshotTime: {
      _internal_set_snapshot_time(from._internal_snapshot_time());
      break;
    }
    case kRange: {
      _internal_mutable_range()->::gnmi_ext::TimeRange::MergeFrom(from._internal_range());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.History)
}

inline void History::SharedCtor() {
clear_has_request();
}

History::~History() {
  // @@protoc_insertion_point(destructor:gnmi_ext.History)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void History::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void History::ArenaDtor(void* object) {
  History* _this = reinterpret_cast< History* >(object);
  (void)_this;
}
void History::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void History::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void History::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:gnmi_ext.History)
  switch (request_case()) {
    case kSnapshotTime: {
      // No need to clear
      break;
    }
    case kRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.range_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void History::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.History)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* History::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 snapshot_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_snapshot_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi_ext.TimeRange range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* History::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.History)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 snapshot_time = 1;
  if (_internal_has_snapshot_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_snapshot_time(), target);
  }

  // .gnmi_ext.TimeRange range = 2;
  if (_internal_has_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.History)
  return target;
}

size_t History::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.History)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // int64 snapshot_time = 1;
    case kSnapshotTime: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_snapshot_time());
      break;
    }
    // .gnmi_ext.TimeRange range = 2;
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.range_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData History::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    History::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*History::GetClassData() const { return &_class_data_; }

void History::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<History *>(to)->MergeFrom(
      static_cast<const History &>(from));
}


void History::MergeFrom(const History& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.History)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kSnapshotTime: {
      _internal_set_snapshot_time(from._internal_snapshot_time());
      break;
    }
    case kRange: {
      _internal_mutable_range()->::gnmi_ext::TimeRange::MergeFrom(from._internal_range());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void History::CopyFrom(const History& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool History::IsInitialized() const {
  return true;
}

void History::InternalSwap(History* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata History::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[5]);
}

// ===================================================================

class TimeRange::_Internal {
 public:
};

TimeRange::TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.TimeRange)
}

inline void TimeRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:gnmi_ext.TimeRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TimeRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeRange::ArenaDtor(void* object) {
  TimeRange* _this = reinterpret_cast< TimeRange* >(object);
  (void)_this;
}
void TimeRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.TimeRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.TimeRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_start(), target);
  }

  // int64 end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.TimeRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_start());
  }

  // int64 end = 2;
  if (this->_internal_end() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TimeRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeRange::GetClassData() const { return &_class_data_; }

void TimeRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TimeRange *>(to)->MergeFrom(
      static_cast<const TimeRange &>(from));
}


void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  return true;
}

void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeRange, end_)
      + sizeof(TimeRange::end_)
      - PROTOBUF_FIELD_OFFSET(TimeRange, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[6]);
}

// ===================================================================

class Commit::_Internal {
 public:
  static const ::gnmi_ext::CommitRequest& commit(const Commit* msg);
  static const ::gnmi_ext::CommitConfirm& confirm(const Commit* msg);
  static const ::gnmi_ext::CommitCancel& cancel(const Commit* msg);
  static const ::gnmi_ext::CommitSetRollbackDuration& set_rollback_duration(const Commit* msg);
};

const ::gnmi_ext::CommitRequest&
Commit::_Internal::commit(const Commit* msg) {
  return *msg->action_.commit_;
}
const ::gnmi_ext::CommitConfirm&
Commit::_Internal::confirm(const Commit* msg) {
  return *msg->action_.confirm_;
}
const ::gnmi_ext::CommitCancel&
Commit::_Internal::cancel(const Commit* msg) {
  return *msg->action_.cancel_;
}
const ::gnmi_ext::CommitSetRollbackDuration&
Commit::_Internal::set_rollback_duration(const Commit* msg) {
  return *msg->action_.set_rollback_duration_;
}
void Commit::set_allocated_commit(::gnmi_ext::CommitRequest* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi_ext::CommitRequest>::GetOwningArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    set_has_commit();
    action_.commit_ = commit;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.Commit.commit)
}
void Commit::set_allocated_confirm(::gnmi_ext::CommitConfirm* confirm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (confirm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi_ext::CommitConfirm>::GetOwningArena(confirm);
    if (message_arena != submessage_arena) {
      confirm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirm, submessage_arena);
    }
    set_has_confirm();
    action_.confirm_ = confirm;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.Commit.confirm)
}
void Commit::set_allocated_cancel(::gnmi_ext::CommitCancel* cancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (cancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi_ext::CommitCancel>::GetOwningArena(cancel);
    if (message_arena != submessage_arena) {
      cancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel, submessage_arena);
    }
    set_has_cancel();
    action_.cancel_ = cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.Commit.cancel)
}
void Commit::set_allocated_set_rollback_duration(::gnmi_ext::CommitSetRollbackDuration* set_rollback_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (set_rollback_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi_ext::CommitSetRollbackDuration>::GetOwningArena(set_rollback_duration);
    if (message_arena != submessage_arena) {
      set_rollback_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_rollback_duration, submessage_arena);
    }
    set_has_set_rollback_duration();
    action_.set_rollback_duration_ = set_rollback_duration;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi_ext.Commit.set_rollback_duration)
}
Commit::Commit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.Commit)
}
Commit::Commit(const Commit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  clear_has_action();
  switch (from.action_case()) {
    case kCommit: {
      _internal_mutable_commit()->::gnmi_ext::CommitRequest::MergeFrom(from._internal_commit());
      break;
    }
    case kConfirm: {
      _internal_mutable_confirm()->::gnmi_ext::CommitConfirm::MergeFrom(from._internal_confirm());
      break;
    }
    case kCancel: {
      _internal_mutable_cancel()->::gnmi_ext::CommitCancel::MergeFrom(from._internal_cancel());
      break;
    }
    case kSetRollbackDuration: {
      _internal_mutable_set_rollback_duration()->::gnmi_ext::CommitSetRollbackDuration::MergeFrom(from._internal_set_rollback_duration());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.Commit)
}

inline void Commit::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_action();
}

Commit::~Commit() {
  // @@protoc_insertion_point(destructor:gnmi_ext.Commit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Commit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_action()) {
    clear_action();
  }
}

void Commit::ArenaDtor(void* object) {
  Commit* _this = reinterpret_cast< Commit* >(object);
  (void)_this;
}
void Commit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Commit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Commit::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:gnmi_ext.Commit)
  switch (action_case()) {
    case kCommit: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.commit_;
      }
      break;
    }
    case kConfirm: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.confirm_;
      }
      break;
    }
    case kCancel: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.cancel_;
      }
      break;
    }
    case kSetRollbackDuration: {
      if (GetArenaForAllocation() == nullptr) {
        delete action_.set_rollback_duration_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void Commit::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.Commit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Commit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi_ext.Commit.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi_ext.CommitRequest commit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi_ext.CommitConfirm confirm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi_ext.CommitCancel cancel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi_ext.CommitSetRollbackDuration set_rollback_duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_rollback_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Commit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.Commit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi_ext.Commit.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .gnmi_ext.CommitRequest commit = 2;
  if (_internal_has_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::commit(this), target, stream);
  }

  // .gnmi_ext.CommitConfirm confirm = 3;
  if (_internal_has_confirm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::confirm(this), target, stream);
  }

  // .gnmi_ext.CommitCancel cancel = 4;
  if (_internal_has_cancel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cancel(this), target, stream);
  }

  // .gnmi_ext.CommitSetRollbackDuration set_rollback_duration = 5;
  if (_internal_has_set_rollback_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::set_rollback_duration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.Commit)
  return target;
}

size_t Commit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.Commit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  switch (action_case()) {
    // .gnmi_ext.CommitRequest commit = 2;
    case kCommit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.commit_);
      break;
    }
    // .gnmi_ext.CommitConfirm confirm = 3;
    case kConfirm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.confirm_);
      break;
    }
    // .gnmi_ext.CommitCancel cancel = 4;
    case kCancel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.cancel_);
      break;
    }
    // .gnmi_ext.CommitSetRollbackDuration set_rollback_duration = 5;
    case kSetRollbackDuration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.set_rollback_duration_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Commit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Commit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Commit::GetClassData() const { return &_class_data_; }

void Commit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Commit *>(to)->MergeFrom(
      static_cast<const Commit &>(from));
}


void Commit::MergeFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.Commit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  switch (from.action_case()) {
    case kCommit: {
      _internal_mutable_commit()->::gnmi_ext::CommitRequest::MergeFrom(from._internal_commit());
      break;
    }
    case kConfirm: {
      _internal_mutable_confirm()->::gnmi_ext::CommitConfirm::MergeFrom(from._internal_confirm());
      break;
    }
    case kCancel: {
      _internal_mutable_cancel()->::gnmi_ext::CommitCancel::MergeFrom(from._internal_cancel());
      break;
    }
    case kSetRollbackDuration: {
      _internal_mutable_set_rollback_duration()->::gnmi_ext::CommitSetRollbackDuration::MergeFrom(from._internal_set_rollback_duration());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Commit::CopyFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.Commit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commit::IsInitialized() const {
  return true;
}

void Commit::InternalSwap(Commit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Commit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[7]);
}

// ===================================================================

class CommitRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& rollback_duration(const CommitRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
CommitRequest::_Internal::rollback_duration(const CommitRequest* msg) {
  return *msg->rollback_duration_;
}
void CommitRequest::clear_rollback_duration() {
  if (GetArenaForAllocation() == nullptr && rollback_duration_ != nullptr) {
    delete rollback_duration_;
  }
  rollback_duration_ = nullptr;
}
CommitRequest::CommitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.CommitRequest)
}
CommitRequest::CommitRequest(const CommitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rollback_duration()) {
    rollback_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.rollback_duration_);
  } else {
    rollback_duration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.CommitRequest)
}

inline void CommitRequest::SharedCtor() {
rollback_duration_ = nullptr;
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:gnmi_ext.CommitRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete rollback_duration_;
}

void CommitRequest::ArenaDtor(void* object) {
  CommitRequest* _this = reinterpret_cast< CommitRequest* >(object);
  (void)_this;
}
void CommitRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.CommitRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && rollback_duration_ != nullptr) {
    delete rollback_duration_;
  }
  rollback_duration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration rollback_duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.CommitRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration rollback_duration = 1;
  if (this->_internal_has_rollback_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rollback_duration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.CommitRequest)
  return target;
}

size_t CommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.CommitRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration rollback_duration = 1;
  if (this->_internal_has_rollback_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rollback_duration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitRequest::GetClassData() const { return &_class_data_; }

void CommitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommitRequest *>(to)->MergeFrom(
      static_cast<const CommitRequest &>(from));
}


void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rollback_duration()) {
    _internal_mutable_rollback_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_rollback_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {
  return true;
}

void CommitRequest::InternalSwap(CommitRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rollback_duration_, other->rollback_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[8]);
}

// ===================================================================

class CommitConfirm::_Internal {
 public:
};

CommitConfirm::CommitConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.CommitConfirm)
}
CommitConfirm::CommitConfirm(const CommitConfirm& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.CommitConfirm)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitConfirm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitConfirm::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CommitConfirm::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[9]);
}

// ===================================================================

class CommitCancel::_Internal {
 public:
};

CommitCancel::CommitCancel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.CommitCancel)
}
CommitCancel::CommitCancel(const CommitCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.CommitCancel)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitCancel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitCancel::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CommitCancel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[10]);
}

// ===================================================================

class CommitSetRollbackDuration::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& rollback_duration(const CommitSetRollbackDuration* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
CommitSetRollbackDuration::_Internal::rollback_duration(const CommitSetRollbackDuration* msg) {
  return *msg->rollback_duration_;
}
void CommitSetRollbackDuration::clear_rollback_duration() {
  if (GetArenaForAllocation() == nullptr && rollback_duration_ != nullptr) {
    delete rollback_duration_;
  }
  rollback_duration_ = nullptr;
}
CommitSetRollbackDuration::CommitSetRollbackDuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.CommitSetRollbackDuration)
}
CommitSetRollbackDuration::CommitSetRollbackDuration(const CommitSetRollbackDuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rollback_duration()) {
    rollback_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.rollback_duration_);
  } else {
    rollback_duration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.CommitSetRollbackDuration)
}

inline void CommitSetRollbackDuration::SharedCtor() {
rollback_duration_ = nullptr;
}

CommitSetRollbackDuration::~CommitSetRollbackDuration() {
  // @@protoc_insertion_point(destructor:gnmi_ext.CommitSetRollbackDuration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommitSetRollbackDuration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete rollback_duration_;
}

void CommitSetRollbackDuration::ArenaDtor(void* object) {
  CommitSetRollbackDuration* _this = reinterpret_cast< CommitSetRollbackDuration* >(object);
  (void)_this;
}
void CommitSetRollbackDuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitSetRollbackDuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommitSetRollbackDuration::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.CommitSetRollbackDuration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && rollback_duration_ != nullptr) {
    delete rollback_duration_;
  }
  rollback_duration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitSetRollbackDuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration rollback_duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitSetRollbackDuration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.CommitSetRollbackDuration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration rollback_duration = 1;
  if (this->_internal_has_rollback_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rollback_duration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.CommitSetRollbackDuration)
  return target;
}

size_t CommitSetRollbackDuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.CommitSetRollbackDuration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration rollback_duration = 1;
  if (this->_internal_has_rollback_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rollback_duration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitSetRollbackDuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommitSetRollbackDuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitSetRollbackDuration::GetClassData() const { return &_class_data_; }

void CommitSetRollbackDuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommitSetRollbackDuration *>(to)->MergeFrom(
      static_cast<const CommitSetRollbackDuration &>(from));
}


void CommitSetRollbackDuration::MergeFrom(const CommitSetRollbackDuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.CommitSetRollbackDuration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rollback_duration()) {
    _internal_mutable_rollback_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_rollback_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitSetRollbackDuration::CopyFrom(const CommitSetRollbackDuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.CommitSetRollbackDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitSetRollbackDuration::IsInitialized() const {
  return true;
}

void CommitSetRollbackDuration::InternalSwap(CommitSetRollbackDuration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rollback_duration_, other->rollback_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitSetRollbackDuration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[11]);
}

// ===================================================================

class Depth::_Internal {
 public:
};

Depth::Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi_ext.Depth)
}
Depth::Depth(const Depth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:gnmi_ext.Depth)
}

inline void Depth::SharedCtor() {
level_ = 0u;
}

Depth::~Depth() {
  // @@protoc_insertion_point(destructor:gnmi_ext.Depth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Depth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Depth::ArenaDtor(void* object) {
  Depth* _this = reinterpret_cast< Depth* >(object);
  (void)_this;
}
void Depth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Depth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Depth::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi_ext.Depth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Depth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Depth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi_ext.Depth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi_ext.Depth)
  return target;
}

size_t Depth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi_ext.Depth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Depth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Depth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Depth::GetClassData() const { return &_class_data_; }

void Depth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Depth *>(to)->MergeFrom(
      static_cast<const Depth &>(from));
}


void Depth::MergeFrom(const Depth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi_ext.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Depth::CopyFrom(const Depth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi_ext.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Depth::IsInitialized() const {
  return true;
}

void Depth::InternalSwap(Depth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Depth::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_5fext_2eproto_getter, &descriptor_table_gnmi_5fext_2eproto_once,
      file_level_metadata_gnmi_5fext_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace gnmi_ext
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gnmi_ext::Extension* Arena::CreateMaybeMessage< ::gnmi_ext::Extension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::Extension >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::RegisteredExtension* Arena::CreateMaybeMessage< ::gnmi_ext::RegisteredExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::RegisteredExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::MasterArbitration* Arena::CreateMaybeMessage< ::gnmi_ext::MasterArbitration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::MasterArbitration >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::Uint128* Arena::CreateMaybeMessage< ::gnmi_ext::Uint128 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::Uint128 >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::Role* Arena::CreateMaybeMessage< ::gnmi_ext::Role >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::Role >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::History* Arena::CreateMaybeMessage< ::gnmi_ext::History >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::History >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::TimeRange* Arena::CreateMaybeMessage< ::gnmi_ext::TimeRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::Commit* Arena::CreateMaybeMessage< ::gnmi_ext::Commit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::Commit >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::CommitRequest* Arena::CreateMaybeMessage< ::gnmi_ext::CommitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::CommitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::CommitConfirm* Arena::CreateMaybeMessage< ::gnmi_ext::CommitConfirm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::CommitConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::CommitCancel* Arena::CreateMaybeMessage< ::gnmi_ext::CommitCancel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::CommitCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::CommitSetRollbackDuration* Arena::CreateMaybeMessage< ::gnmi_ext::CommitSetRollbackDuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::CommitSetRollbackDuration >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi_ext::Depth* Arena::CreateMaybeMessage< ::gnmi_ext::Depth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi_ext::Depth >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
