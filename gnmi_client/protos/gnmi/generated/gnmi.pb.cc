// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gnmi.proto

#include "gnmi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace gnmi {
constexpr Notification::Notification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_()
  , delete__()
  , prefix_(nullptr)
  , timestamp_(int64_t{0})
  , atomic_(false){}
struct NotificationDefaultTypeInternal {
  constexpr NotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotificationDefaultTypeInternal() {}
  union {
    Notification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotificationDefaultTypeInternal _Notification_default_instance_;
constexpr Update::Update(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(nullptr)
  , value_(nullptr)
  , val_(nullptr)
  , duplicates_(0u){}
struct UpdateDefaultTypeInternal {
  constexpr UpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateDefaultTypeInternal() {}
  union {
    Update _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateDefaultTypeInternal _Update_default_instance_;
constexpr TypedValue::TypedValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TypedValueDefaultTypeInternal {
  constexpr TypedValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TypedValueDefaultTypeInternal() {}
  union {
    TypedValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TypedValueDefaultTypeInternal _TypedValue_default_instance_;
constexpr Path::Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_()
  , elem_()
  , origin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PathDefaultTypeInternal {
  constexpr PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathDefaultTypeInternal _Path_default_instance_;
constexpr PathElem_KeyEntry_DoNotUse::PathElem_KeyEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PathElem_KeyEntry_DoNotUseDefaultTypeInternal {
  constexpr PathElem_KeyEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathElem_KeyEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PathElem_KeyEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathElem_KeyEntry_DoNotUseDefaultTypeInternal _PathElem_KeyEntry_DoNotUse_default_instance_;
constexpr PathElem::PathElem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PathElemDefaultTypeInternal {
  constexpr PathElemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathElemDefaultTypeInternal() {}
  union {
    PathElem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathElemDefaultTypeInternal _PathElem_default_instance_;
constexpr Value::Value(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct ValueDefaultTypeInternal {
  constexpr ValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValueDefaultTypeInternal() {}
  union {
    Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValueDefaultTypeInternal _Value_default_instance_;
constexpr Error::Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr)
  , code_(0u){}
struct ErrorDefaultTypeInternal {
  constexpr ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorDefaultTypeInternal() {}
  union {
    Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorDefaultTypeInternal _Error_default_instance_;
constexpr Decimal64::Decimal64(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : digits_(int64_t{0})
  , precision_(0u){}
struct Decimal64DefaultTypeInternal {
  constexpr Decimal64DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Decimal64DefaultTypeInternal() {}
  union {
    Decimal64 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Decimal64DefaultTypeInternal _Decimal64_default_instance_;
constexpr ScalarArray::ScalarArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : element_(){}
struct ScalarArrayDefaultTypeInternal {
  constexpr ScalarArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarArrayDefaultTypeInternal() {}
  union {
    ScalarArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarArrayDefaultTypeInternal _ScalarArray_default_instance_;
constexpr SubscribeRequest::SubscribeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extension_()
  , _oneof_case_{}{}
struct SubscribeRequestDefaultTypeInternal {
  constexpr SubscribeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeRequestDefaultTypeInternal() {}
  union {
    SubscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
constexpr Poll::Poll(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PollDefaultTypeInternal {
  constexpr PollDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PollDefaultTypeInternal() {}
  union {
    Poll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PollDefaultTypeInternal _Poll_default_instance_;
constexpr SubscribeResponse::SubscribeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extension_()
  , _oneof_case_{}{}
struct SubscribeResponseDefaultTypeInternal {
  constexpr SubscribeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeResponseDefaultTypeInternal() {}
  union {
    SubscribeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeResponseDefaultTypeInternal _SubscribeResponse_default_instance_;
constexpr SubscriptionList::SubscriptionList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscription_()
  , use_models_()
  , prefix_(nullptr)
  , qos_(nullptr)
  , mode_(0)

  , allow_aggregation_(false)
  , updates_only_(false)
  , encoding_(0)
{}
struct SubscriptionListDefaultTypeInternal {
  constexpr SubscriptionListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscriptionListDefaultTypeInternal() {}
  union {
    SubscriptionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscriptionListDefaultTypeInternal _SubscriptionList_default_instance_;
constexpr Subscription::Subscription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(nullptr)
  , sample_interval_(uint64_t{0u})
  , mode_(0)

  , suppress_redundant_(false)
  , heartbeat_interval_(uint64_t{0u}){}
struct SubscriptionDefaultTypeInternal {
  constexpr SubscriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscriptionDefaultTypeInternal() {}
  union {
    Subscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscriptionDefaultTypeInternal _Subscription_default_instance_;
constexpr QOSMarking::QOSMarking(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : marking_(0u){}
struct QOSMarkingDefaultTypeInternal {
  constexpr QOSMarkingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QOSMarkingDefaultTypeInternal() {}
  union {
    QOSMarking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QOSMarkingDefaultTypeInternal _QOSMarking_default_instance_;
constexpr SetRequest::SetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delete__()
  , replace_()
  , update_()
  , extension_()
  , union_replace_()
  , prefix_(nullptr){}
struct SetRequestDefaultTypeInternal {
  constexpr SetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetRequestDefaultTypeInternal() {}
  union {
    SetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetRequestDefaultTypeInternal _SetRequest_default_instance_;
constexpr SetResponse::SetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_()
  , extension_()
  , prefix_(nullptr)
  , message_(nullptr)
  , timestamp_(int64_t{0}){}
struct SetResponseDefaultTypeInternal {
  constexpr SetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetResponseDefaultTypeInternal() {}
  union {
    SetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetResponseDefaultTypeInternal _SetResponse_default_instance_;
constexpr UpdateResult::UpdateResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(nullptr)
  , message_(nullptr)
  , timestamp_(int64_t{0})
  , op_(0)
{}
struct UpdateResultDefaultTypeInternal {
  constexpr UpdateResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateResultDefaultTypeInternal() {}
  union {
    UpdateResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateResultDefaultTypeInternal _UpdateResult_default_instance_;
constexpr GetRequest::GetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_()
  , use_models_()
  , extension_()
  , prefix_(nullptr)
  , type_(0)

  , encoding_(0)
{}
struct GetRequestDefaultTypeInternal {
  constexpr GetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetRequestDefaultTypeInternal _GetRequest_default_instance_;
constexpr GetResponse::GetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notification_()
  , extension_()
  , error_(nullptr){}
struct GetResponseDefaultTypeInternal {
  constexpr GetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetResponseDefaultTypeInternal() {}
  union {
    GetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetResponseDefaultTypeInternal _GetResponse_default_instance_;
constexpr CapabilityRequest::CapabilityRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extension_(){}
struct CapabilityRequestDefaultTypeInternal {
  constexpr CapabilityRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CapabilityRequestDefaultTypeInternal() {}
  union {
    CapabilityRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CapabilityRequestDefaultTypeInternal _CapabilityRequest_default_instance_;
constexpr CapabilityResponse::CapabilityResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : supported_models_()
  , supported_encodings_()
  , _supported_encodings_cached_byte_size_(0)
  , extension_()
  , gnmi_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CapabilityResponseDefaultTypeInternal {
  constexpr CapabilityResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CapabilityResponseDefaultTypeInternal() {}
  union {
    CapabilityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CapabilityResponseDefaultTypeInternal _CapabilityResponse_default_instance_;
constexpr ModelData::ModelData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ModelDataDefaultTypeInternal {
  constexpr ModelDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelDataDefaultTypeInternal() {}
  union {
    ModelData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelDataDefaultTypeInternal _ModelData_default_instance_;
}  // namespace gnmi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gnmi_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gnmi_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gnmi_2eproto = nullptr;

const uint32_t TableStruct_gnmi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, timestamp_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, prefix_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, update_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, delete__),
  PROTOBUF_FIELD_OFFSET(::gnmi::Notification, atomic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::Update, path_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Update, value_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Update, val_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Update, duplicates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::TypedValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gnmi::TypedValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::gnmi::TypedValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::Path, element_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Path, origin_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Path, elem_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Path, target_),
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem_KeyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem_KeyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem_KeyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem_KeyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem, name_),
  PROTOBUF_FIELD_OFFSET(::gnmi::PathElem, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::Value, value_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Value, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::Error, code_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Error, message_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Error, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Decimal64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::Decimal64, digits_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Decimal64, precision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::ScalarArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::ScalarArray, element_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeRequest, extension_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Poll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeResponse, extension_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscribeResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, prefix_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, subscription_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, qos_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, mode_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, allow_aggregation_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, use_models_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, encoding_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SubscriptionList, updates_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, path_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, mode_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, sample_interval_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, suppress_redundant_),
  PROTOBUF_FIELD_OFFSET(::gnmi::Subscription, heartbeat_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::QOSMarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::QOSMarking, marking_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, prefix_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, delete__),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, replace_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, update_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, union_replace_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetRequest, extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, prefix_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, response_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, message_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::gnmi::SetResponse, extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::UpdateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::UpdateResult, timestamp_),
  PROTOBUF_FIELD_OFFSET(::gnmi::UpdateResult, path_),
  PROTOBUF_FIELD_OFFSET(::gnmi::UpdateResult, message_),
  PROTOBUF_FIELD_OFFSET(::gnmi::UpdateResult, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, prefix_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, path_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, type_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, encoding_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, use_models_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetRequest, extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::GetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::GetResponse, notification_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetResponse, error_),
  PROTOBUF_FIELD_OFFSET(::gnmi::GetResponse, extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityRequest, extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityResponse, supported_models_),
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityResponse, supported_encodings_),
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityResponse, gnmi_version_),
  PROTOBUF_FIELD_OFFSET(::gnmi::CapabilityResponse, extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gnmi::ModelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gnmi::ModelData, name_),
  PROTOBUF_FIELD_OFFSET(::gnmi::ModelData, organization_),
  PROTOBUF_FIELD_OFFSET(::gnmi::ModelData, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gnmi::Notification)},
  { 11, -1, -1, sizeof(::gnmi::Update)},
  { 21, -1, -1, sizeof(::gnmi::TypedValue)},
  { 42, -1, -1, sizeof(::gnmi::Path)},
  { 52, 60, -1, sizeof(::gnmi::PathElem_KeyEntry_DoNotUse)},
  { 62, -1, -1, sizeof(::gnmi::PathElem)},
  { 70, -1, -1, sizeof(::gnmi::Value)},
  { 78, -1, -1, sizeof(::gnmi::Error)},
  { 87, -1, -1, sizeof(::gnmi::Decimal64)},
  { 95, -1, -1, sizeof(::gnmi::ScalarArray)},
  { 102, -1, -1, sizeof(::gnmi::SubscribeRequest)},
  { 112, -1, -1, sizeof(::gnmi::Poll)},
  { 118, -1, -1, sizeof(::gnmi::SubscribeResponse)},
  { 129, -1, -1, sizeof(::gnmi::SubscriptionList)},
  { 143, -1, -1, sizeof(::gnmi::Subscription)},
  { 154, -1, -1, sizeof(::gnmi::QOSMarking)},
  { 161, -1, -1, sizeof(::gnmi::SetRequest)},
  { 173, -1, -1, sizeof(::gnmi::SetResponse)},
  { 184, -1, -1, sizeof(::gnmi::UpdateResult)},
  { 194, -1, -1, sizeof(::gnmi::GetRequest)},
  { 206, -1, -1, sizeof(::gnmi::GetResponse)},
  { 215, -1, -1, sizeof(::gnmi::CapabilityRequest)},
  { 222, -1, -1, sizeof(::gnmi::CapabilityResponse)},
  { 232, -1, -1, sizeof(::gnmi::ModelData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Notification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Update_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_TypedValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_PathElem_KeyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_PathElem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Decimal64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_ScalarArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Poll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_SubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_SubscriptionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_Subscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_QOSMarking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_SetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_SetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_UpdateResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_GetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_GetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_CapabilityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_CapabilityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gnmi::_ModelData_default_instance_),
};

const char descriptor_table_protodef_gnmi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ngnmi.proto\022\004gnmi\032\031google/protobuf/any."
  "proto\032 google/protobuf/descriptor.proto\032"
  "\016gnmi_ext.proto\"\224\001\n\014Notification\022\021\n\ttime"
  "stamp\030\001 \001(\003\022\032\n\006prefix\030\002 \001(\0132\n.gnmi.Path\022"
  "\034\n\006update\030\004 \003(\0132\014.gnmi.Update\022\032\n\006delete\030"
  "\005 \003(\0132\n.gnmi.Path\022\016\n\006atomic\030\006 \001(\010J\004\010\003\020\004R"
  "\005alias\"u\n\006Update\022\030\n\004path\030\001 \001(\0132\n.gnmi.Pa"
  "th\022\036\n\005value\030\002 \001(\0132\013.gnmi.ValueB\002\030\001\022\035\n\003va"
  "l\030\003 \001(\0132\020.gnmi.TypedValue\022\022\n\nduplicates\030"
  "\004 \001(\r\"\203\003\n\nTypedValue\022\024\n\nstring_val\030\001 \001(\t"
  "H\000\022\021\n\007int_val\030\002 \001(\003H\000\022\022\n\010uint_val\030\003 \001(\004H"
  "\000\022\022\n\010bool_val\030\004 \001(\010H\000\022\023\n\tbytes_val\030\005 \001(\014"
  "H\000\022\027\n\tfloat_val\030\006 \001(\002B\002\030\001H\000\022\024\n\ndouble_va"
  "l\030\016 \001(\001H\000\022*\n\013decimal_val\030\007 \001(\0132\017.gnmi.De"
  "cimal64B\002\030\001H\000\022)\n\014leaflist_val\030\010 \001(\0132\021.gn"
  "mi.ScalarArrayH\000\022\'\n\007any_val\030\t \001(\0132\024.goog"
  "le.protobuf.AnyH\000\022\022\n\010json_val\030\n \001(\014H\000\022\027\n"
  "\rjson_ietf_val\030\013 \001(\014H\000\022\023\n\tascii_val\030\014 \001("
  "\tH\000\022\025\n\013proto_bytes\030\r \001(\014H\000B\007\n\005value\"Y\n\004P"
  "ath\022\023\n\007element\030\001 \003(\tB\002\030\001\022\016\n\006origin\030\002 \001(\t"
  "\022\034\n\004elem\030\003 \003(\0132\016.gnmi.PathElem\022\016\n\006target"
  "\030\004 \001(\t\"j\n\010PathElem\022\014\n\004name\030\001 \001(\t\022$\n\003key\030"
  "\002 \003(\0132\027.gnmi.PathElem.KeyEntry\032*\n\010KeyEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"8\n\005Va"
  "lue\022\r\n\005value\030\001 \001(\014\022\034\n\004type\030\002 \001(\0162\016.gnmi."
  "Encoding:\002\030\001\"N\n\005Error\022\014\n\004code\030\001 \001(\r\022\017\n\007m"
  "essage\030\002 \001(\t\022\"\n\004data\030\003 \001(\0132\024.google.prot"
  "obuf.Any:\002\030\001\"2\n\tDecimal64\022\016\n\006digits\030\001 \001("
  "\003\022\021\n\tprecision\030\002 \001(\r:\002\030\001\"0\n\013ScalarArray\022"
  "!\n\007element\030\001 \003(\0132\020.gnmi.TypedValue\"\235\001\n\020S"
  "ubscribeRequest\022+\n\tsubscribe\030\001 \001(\0132\026.gnm"
  "i.SubscriptionListH\000\022\032\n\004poll\030\003 \001(\0132\n.gnm"
  "i.PollH\000\022&\n\textension\030\005 \003(\0132\023.gnmi_ext.E"
  "xtensionB\t\n\007requestJ\004\010\004\020\005R\007aliases\"\006\n\004Po"
  "ll\"\250\001\n\021SubscribeResponse\022$\n\006update\030\001 \001(\013"
  "2\022.gnmi.NotificationH\000\022\027\n\rsync_response\030"
  "\003 \001(\010H\000\022 \n\005error\030\004 \001(\0132\013.gnmi.ErrorB\002\030\001H"
  "\000\022&\n\textension\030\005 \003(\0132\023.gnmi_ext.Extensio"
  "nB\n\n\010response\"\325\002\n\020SubscriptionList\022\032\n\006pr"
  "efix\030\001 \001(\0132\n.gnmi.Path\022(\n\014subscription\030\002"
  " \003(\0132\022.gnmi.Subscription\022\035\n\003qos\030\004 \001(\0132\020."
  "gnmi.QOSMarking\022)\n\004mode\030\005 \001(\0162\033.gnmi.Sub"
  "scriptionList.Mode\022\031\n\021allow_aggregation\030"
  "\006 \001(\010\022#\n\nuse_models\030\007 \003(\0132\017.gnmi.ModelDa"
  "ta\022 \n\010encoding\030\010 \001(\0162\016.gnmi.Encoding\022\024\n\014"
  "updates_only\030\t \001(\010\"&\n\004Mode\022\n\n\006STREAM\020\000\022\010"
  "\n\004ONCE\020\001\022\010\n\004POLL\020\002J\004\010\003\020\004R\013use_aliases\"\237\001"
  "\n\014Subscription\022\030\n\004path\030\001 \001(\0132\n.gnmi.Path"
  "\022$\n\004mode\030\002 \001(\0162\026.gnmi.SubscriptionMode\022\027"
  "\n\017sample_interval\030\003 \001(\004\022\032\n\022suppress_redu"
  "ndant\030\004 \001(\010\022\032\n\022heartbeat_interval\030\005 \001(\004\""
  "\035\n\nQOSMarking\022\017\n\007marking\030\001 \001(\r\"\316\001\n\nSetRe"
  "quest\022\032\n\006prefix\030\001 \001(\0132\n.gnmi.Path\022\032\n\006del"
  "ete\030\002 \003(\0132\n.gnmi.Path\022\035\n\007replace\030\003 \003(\0132\014"
  ".gnmi.Update\022\034\n\006update\030\004 \003(\0132\014.gnmi.Upda"
  "te\022#\n\runion_replace\030\006 \003(\0132\014.gnmi.Update\022"
  "&\n\textension\030\005 \003(\0132\023.gnmi_ext.Extension\""
  "\254\001\n\013SetResponse\022\032\n\006prefix\030\001 \001(\0132\n.gnmi.P"
  "ath\022$\n\010response\030\002 \003(\0132\022.gnmi.UpdateResul"
  "t\022 \n\007message\030\003 \001(\0132\013.gnmi.ErrorB\002\030\001\022\021\n\tt"
  "imestamp\030\004 \001(\003\022&\n\textension\030\005 \003(\0132\023.gnmi"
  "_ext.Extension\"\335\001\n\014UpdateResult\022\025\n\ttimes"
  "tamp\030\001 \001(\003B\002\030\001\022\030\n\004path\030\002 \001(\0132\n.gnmi.Path"
  "\022 \n\007message\030\003 \001(\0132\013.gnmi.ErrorB\002\030\001\022(\n\002op"
  "\030\004 \001(\0162\034.gnmi.UpdateResult.Operation\"P\n\t"
  "Operation\022\013\n\007INVALID\020\000\022\n\n\006DELETE\020\001\022\013\n\007RE"
  "PLACE\020\002\022\n\n\006UPDATE\020\003\022\021\n\rUNION_REPLACE\020\004\"\227"
  "\002\n\nGetRequest\022\032\n\006prefix\030\001 \001(\0132\n.gnmi.Pat"
  "h\022\030\n\004path\030\002 \003(\0132\n.gnmi.Path\022\'\n\004type\030\003 \001("
  "\0162\031.gnmi.GetRequest.DataType\022 \n\010encoding"
  "\030\005 \001(\0162\016.gnmi.Encoding\022#\n\nuse_models\030\006 \003"
  "(\0132\017.gnmi.ModelData\022&\n\textension\030\007 \003(\0132\023"
  ".gnmi_ext.Extension\";\n\010DataType\022\007\n\003ALL\020\000"
  "\022\n\n\006CONFIG\020\001\022\t\n\005STATE\020\002\022\017\n\013OPERATIONAL\020\003"
  "\"\177\n\013GetResponse\022(\n\014notification\030\001 \003(\0132\022."
  "gnmi.Notification\022\036\n\005error\030\002 \001(\0132\013.gnmi."
  "ErrorB\002\030\001\022&\n\textension\030\003 \003(\0132\023.gnmi_ext."
  "Extension\";\n\021CapabilityRequest\022&\n\textens"
  "ion\030\001 \003(\0132\023.gnmi_ext.Extension\"\252\001\n\022Capab"
  "ilityResponse\022)\n\020supported_models\030\001 \003(\0132"
  "\017.gnmi.ModelData\022+\n\023supported_encodings\030"
  "\002 \003(\0162\016.gnmi.Encoding\022\024\n\014gNMI_version\030\003 "
  "\001(\t\022&\n\textension\030\004 \003(\0132\023.gnmi_ext.Extens"
  "ion\"@\n\tModelData\022\014\n\004name\030\001 \001(\t\022\024\n\014organi"
  "zation\030\002 \001(\t\022\017\n\007version\030\003 \001(\t*D\n\010Encodin"
  "g\022\010\n\004JSON\020\000\022\t\n\005BYTES\020\001\022\t\n\005PROTO\020\002\022\t\n\005ASC"
  "II\020\003\022\r\n\tJSON_IETF\020\004*A\n\020SubscriptionMode\022"
  "\022\n\016TARGET_DEFINED\020\000\022\r\n\tON_CHANGE\020\001\022\n\n\006SA"
  "MPLE\020\0022\343\001\n\004gNMI\022A\n\014Capabilities\022\027.gnmi.C"
  "apabilityRequest\032\030.gnmi.CapabilityRespon"
  "se\022*\n\003Get\022\020.gnmi.GetRequest\032\021.gnmi.GetRe"
  "sponse\022*\n\003Set\022\020.gnmi.SetRequest\032\021.gnmi.S"
  "etResponse\022@\n\tSubscribe\022\026.gnmi.Subscribe"
  "Request\032\027.gnmi.SubscribeResponse(\0010\001:3\n\014"
  "gnmi_service\022\034.google.protobuf.FileOptio"
  "ns\030\351\007 \001(\tBT\n\025com.github.gnmi.protoB\tGnmi"
  "ProtoP\001Z%github.com/openconfig/gnmi/prot"
  "o/gnmi\312>\0060.10.0b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gnmi_2eproto_deps[3] = {
  &::descriptor_table_gnmi_5fext_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gnmi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gnmi_2eproto = {
  false, false, 3903, descriptor_table_protodef_gnmi_2eproto, "gnmi.proto", 
  &descriptor_table_gnmi_2eproto_once, descriptor_table_gnmi_2eproto_deps, 3, 24,
  schemas, file_default_instances, TableStruct_gnmi_2eproto::offsets,
  file_level_metadata_gnmi_2eproto, file_level_enum_descriptors_gnmi_2eproto, file_level_service_descriptors_gnmi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_gnmi_2eproto_getter() {
  return &descriptor_table_gnmi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gnmi_2eproto(&descriptor_table_gnmi_2eproto);
namespace gnmi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionList_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gnmi_2eproto);
  return file_level_enum_descriptors_gnmi_2eproto[0];
}
bool SubscriptionList_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SubscriptionList_Mode SubscriptionList::STREAM;
constexpr SubscriptionList_Mode SubscriptionList::ONCE;
constexpr SubscriptionList_Mode SubscriptionList::POLL;
constexpr SubscriptionList_Mode SubscriptionList::Mode_MIN;
constexpr SubscriptionList_Mode SubscriptionList::Mode_MAX;
constexpr int SubscriptionList::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateResult_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gnmi_2eproto);
  return file_level_enum_descriptors_gnmi_2eproto[1];
}
bool UpdateResult_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UpdateResult_Operation UpdateResult::INVALID;
constexpr UpdateResult_Operation UpdateResult::DELETE;
constexpr UpdateResult_Operation UpdateResult::REPLACE;
constexpr UpdateResult_Operation UpdateResult::UPDATE;
constexpr UpdateResult_Operation UpdateResult::UNION_REPLACE;
constexpr UpdateResult_Operation UpdateResult::Operation_MIN;
constexpr UpdateResult_Operation UpdateResult::Operation_MAX;
constexpr int UpdateResult::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetRequest_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gnmi_2eproto);
  return file_level_enum_descriptors_gnmi_2eproto[2];
}
bool GetRequest_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GetRequest_DataType GetRequest::ALL;
constexpr GetRequest_DataType GetRequest::CONFIG;
constexpr GetRequest_DataType GetRequest::STATE;
constexpr GetRequest_DataType GetRequest::OPERATIONAL;
constexpr GetRequest_DataType GetRequest::DataType_MIN;
constexpr GetRequest_DataType GetRequest::DataType_MAX;
constexpr int GetRequest::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gnmi_2eproto);
  return file_level_enum_descriptors_gnmi_2eproto[3];
}
bool Encoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gnmi_2eproto);
  return file_level_enum_descriptors_gnmi_2eproto[4];
}
bool SubscriptionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Notification::_Internal {
 public:
  static const ::gnmi::Path& prefix(const Notification* msg);
};

const ::gnmi::Path&
Notification::_Internal::prefix(const Notification* msg) {
  return *msg->prefix_;
}
Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  update_(arena),
  delete__(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.Notification)
}
Notification::Notification(const Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      update_(from.update_),
      delete__(from.delete__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::gnmi::Path(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&atomic_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(atomic_));
  // @@protoc_insertion_point(copy_constructor:gnmi.Notification)
}

inline void Notification::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prefix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&atomic_) -
    reinterpret_cast<char*>(&prefix_)) + sizeof(atomic_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:gnmi.Notification)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Notification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
}

void Notification::ArenaDtor(void* object) {
  Notification* _this = reinterpret_cast< Notification* >(object);
  (void)_this;
}
void Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Notification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_.Clear();
  delete__.Clear();
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atomic_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(atomic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Path prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.Update update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.Path delete = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool atomic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          atomic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Notification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Notification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .gnmi.Path prefix = 2;
  if (this->_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prefix(this), target, stream);
  }

  // repeated .gnmi.Update update = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_update(i), target, stream);
  }

  // repeated .gnmi.Path delete = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_delete_(i), target, stream);
  }

  // bool atomic = 6;
  if (this->_internal_atomic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_atomic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Notification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Update update = 4;
  total_size += 1UL * this->_internal_update_size();
  for (const auto& msg : this->update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.Path delete = 5;
  total_size += 1UL * this->_internal_delete__size();
  for (const auto& msg : this->delete__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Path prefix = 2;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // bool atomic = 6;
  if (this->_internal_atomic() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Notification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Notification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Notification::GetClassData() const { return &_class_data_; }

void Notification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Notification *>(to)->MergeFrom(
      static_cast<const Notification &>(from));
}


void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  update_.MergeFrom(from.update_);
  delete__.MergeFrom(from.delete__);
  if (from._internal_has_prefix()) {
    _internal_mutable_prefix()->::gnmi::Path::MergeFrom(from._internal_prefix());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_atomic() != 0) {
    _internal_set_atomic(from._internal_atomic());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::InternalSwap(Notification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  update_.InternalSwap(&other->update_);
  delete__.InternalSwap(&other->delete__);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Notification, atomic_)
      + sizeof(Notification::atomic_)
      - PROTOBUF_FIELD_OFFSET(Notification, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[0]);
}

// ===================================================================

class Update::_Internal {
 public:
  static const ::gnmi::Path& path(const Update* msg);
  static const ::gnmi::Value& value(const Update* msg);
  static const ::gnmi::TypedValue& val(const Update* msg);
};

const ::gnmi::Path&
Update::_Internal::path(const Update* msg) {
  return *msg->path_;
}
const ::gnmi::Value&
Update::_Internal::value(const Update* msg) {
  return *msg->value_;
}
const ::gnmi::TypedValue&
Update::_Internal::val(const Update* msg) {
  return *msg->val_;
}
Update::Update(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.Update)
}
Update::Update(const Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::gnmi::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::gnmi::Value(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_val()) {
    val_ = new ::gnmi::TypedValue(*from.val_);
  } else {
    val_ = nullptr;
  }
  duplicates_ = from.duplicates_;
  // @@protoc_insertion_point(copy_constructor:gnmi.Update)
}

inline void Update::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duplicates_) -
    reinterpret_cast<char*>(&path_)) + sizeof(duplicates_));
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:gnmi.Update)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Update::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete val_;
}

void Update::ArenaDtor(void* object) {
  Update* _this = reinterpret_cast< Update* >(object);
  (void)_this;
}
void Update::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Update::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Update)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && val_ != nullptr) {
    delete val_;
  }
  val_ = nullptr;
  duplicates_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Update::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Value value = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.TypedValue val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_val(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 duplicates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          duplicates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Update::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Update)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path path = 1;
  if (this->_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  // .gnmi.Value value = 2 [deprecated = true];
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  // .gnmi.TypedValue val = 3;
  if (this->_internal_has_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::val(this), target, stream);
  }

  // uint32 duplicates = 4;
  if (this->_internal_duplicates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duplicates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Update)
  return target;
}

size_t Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Update)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gnmi.Path path = 1;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .gnmi.Value value = 2 [deprecated = true];
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .gnmi.TypedValue val = 3;
  if (this->_internal_has_val()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *val_);
  }

  // uint32 duplicates = 4;
  if (this->_internal_duplicates() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_duplicates());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Update::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Update::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Update::GetClassData() const { return &_class_data_; }

void Update::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Update *>(to)->MergeFrom(
      static_cast<const Update &>(from));
}


void Update::MergeFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Update)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_mutable_path()->::gnmi::Path::MergeFrom(from._internal_path());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::gnmi::Value::MergeFrom(from._internal_value());
  }
  if (from._internal_has_val()) {
    _internal_mutable_val()->::gnmi::TypedValue::MergeFrom(from._internal_val());
  }
  if (from._internal_duplicates() != 0) {
    _internal_set_duplicates(from._internal_duplicates());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Update::CopyFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  return true;
}

void Update::InternalSwap(Update* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Update, duplicates_)
      + sizeof(Update::duplicates_)
      - PROTOBUF_FIELD_OFFSET(Update, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Update::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[1]);
}

// ===================================================================

class TypedValue::_Internal {
 public:
  static const ::gnmi::Decimal64& decimal_val(const TypedValue* msg);
  static const ::gnmi::ScalarArray& leaflist_val(const TypedValue* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& any_val(const TypedValue* msg);
};

const ::gnmi::Decimal64&
TypedValue::_Internal::decimal_val(const TypedValue* msg) {
  return *msg->value_.decimal_val_;
}
const ::gnmi::ScalarArray&
TypedValue::_Internal::leaflist_val(const TypedValue* msg) {
  return *msg->value_.leaflist_val_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
TypedValue::_Internal::any_val(const TypedValue* msg) {
  return *msg->value_.any_val_;
}
void TypedValue::set_allocated_decimal_val(::gnmi::Decimal64* decimal_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (decimal_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Decimal64>::GetOwningArena(decimal_val);
    if (message_arena != submessage_arena) {
      decimal_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimal_val, submessage_arena);
    }
    set_has_decimal_val();
    value_.decimal_val_ = decimal_val;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.decimal_val)
}
void TypedValue::set_allocated_leaflist_val(::gnmi::ScalarArray* leaflist_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (leaflist_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::ScalarArray>::GetOwningArena(leaflist_val);
    if (message_arena != submessage_arena) {
      leaflist_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaflist_val, submessage_arena);
    }
    set_has_leaflist_val();
    value_.leaflist_val_ = leaflist_val;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.leaflist_val)
}
void TypedValue::set_allocated_any_val(::PROTOBUF_NAMESPACE_ID::Any* any_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (any_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(any_val));
    if (message_arena != submessage_arena) {
      any_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, any_val, submessage_arena);
    }
    set_has_any_val();
    value_.any_val_ = any_val;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.TypedValue.any_val)
}
void TypedValue::clear_any_val() {
  if (_internal_has_any_val()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.any_val_;
    }
    clear_has_value();
  }
}
TypedValue::TypedValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.TypedValue)
}
TypedValue::TypedValue(const TypedValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kStringVal: {
      _internal_set_string_val(from._internal_string_val());
      break;
    }
    case kIntVal: {
      _internal_set_int_val(from._internal_int_val());
      break;
    }
    case kUintVal: {
      _internal_set_uint_val(from._internal_uint_val());
      break;
    }
    case kBoolVal: {
      _internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case kBytesVal: {
      _internal_set_bytes_val(from._internal_bytes_val());
      break;
    }
    case kFloatVal: {
      _internal_set_float_val(from._internal_float_val());
      break;
    }
    case kDoubleVal: {
      _internal_set_double_val(from._internal_double_val());
      break;
    }
    case kDecimalVal: {
      _internal_mutable_decimal_val()->::gnmi::Decimal64::MergeFrom(from._internal_decimal_val());
      break;
    }
    case kLeaflistVal: {
      _internal_mutable_leaflist_val()->::gnmi::ScalarArray::MergeFrom(from._internal_leaflist_val());
      break;
    }
    case kAnyVal: {
      _internal_mutable_any_val()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_any_val());
      break;
    }
    case kJsonVal: {
      _internal_set_json_val(from._internal_json_val());
      break;
    }
    case kJsonIetfVal: {
      _internal_set_json_ietf_val(from._internal_json_ietf_val());
      break;
    }
    case kAsciiVal: {
      _internal_set_ascii_val(from._internal_ascii_val());
      break;
    }
    case kProtoBytes: {
      _internal_set_proto_bytes(from._internal_proto_bytes());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.TypedValue)
}

inline void TypedValue::SharedCtor() {
clear_has_value();
}

TypedValue::~TypedValue() {
  // @@protoc_insertion_point(destructor:gnmi.TypedValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TypedValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void TypedValue::ArenaDtor(void* object) {
  TypedValue* _this = reinterpret_cast< TypedValue* >(object);
  (void)_this;
}
void TypedValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypedValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypedValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:gnmi.TypedValue)
  switch (value_case()) {
    case kStringVal: {
      value_.string_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kIntVal: {
      // No need to clear
      break;
    }
    case kUintVal: {
      // No need to clear
      break;
    }
    case kBoolVal: {
      // No need to clear
      break;
    }
    case kBytesVal: {
      value_.bytes_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kFloatVal: {
      // No need to clear
      break;
    }
    case kDoubleVal: {
      // No need to clear
      break;
    }
    case kDecimalVal: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.decimal_val_;
      }
      break;
    }
    case kLeaflistVal: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.leaflist_val_;
      }
      break;
    }
    case kAnyVal: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.any_val_;
      }
      break;
    }
    case kJsonVal: {
      value_.json_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kJsonIetfVal: {
      value_.json_ietf_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kAsciiVal: {
      value_.ascii_val_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kProtoBytes: {
      value_.proto_bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void TypedValue::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.TypedValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypedValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string string_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_string_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.TypedValue.string_val"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int_val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_int_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uint_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_uint_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_bool_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bytes_val = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bytes_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float float_val = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _internal_set_float_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Decimal64 decimal_val = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal_val(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.ScalarArray leaflist_val = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaflist_val(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any any_val = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_any_val(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes json_val = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_json_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes json_ietf_val = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_json_ietf_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ascii_val = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_ascii_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.TypedValue.ascii_val"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes proto_bytes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_proto_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_val = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _internal_set_double_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypedValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.TypedValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string string_val = 1;
  if (_internal_has_string_val()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_val().data(), static_cast<int>(this->_internal_string_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.TypedValue.string_val");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_string_val(), target);
  }

  // int64 int_val = 2;
  if (_internal_has_int_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_int_val(), target);
  }

  // uint64 uint_val = 3;
  if (_internal_has_uint_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uint_val(), target);
  }

  // bool bool_val = 4;
  if (_internal_has_bool_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bool_val(), target);
  }

  // bytes bytes_val = 5;
  if (_internal_has_bytes_val()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_bytes_val(), target);
  }

  // float float_val = 6 [deprecated = true];
  if (_internal_has_float_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_float_val(), target);
  }

  // .gnmi.Decimal64 decimal_val = 7 [deprecated = true];
  if (_internal_has_decimal_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::decimal_val(this), target, stream);
  }

  // .gnmi.ScalarArray leaflist_val = 8;
  if (_internal_has_leaflist_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::leaflist_val(this), target, stream);
  }

  // .google.protobuf.Any any_val = 9;
  if (_internal_has_any_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::any_val(this), target, stream);
  }

  // bytes json_val = 10;
  if (_internal_has_json_val()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_json_val(), target);
  }

  // bytes json_ietf_val = 11;
  if (_internal_has_json_ietf_val()) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_json_ietf_val(), target);
  }

  // string ascii_val = 12;
  if (_internal_has_ascii_val()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ascii_val().data(), static_cast<int>(this->_internal_ascii_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.TypedValue.ascii_val");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_ascii_val(), target);
  }

  // bytes proto_bytes = 13;
  if (_internal_has_proto_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_proto_bytes(), target);
  }

  // double double_val = 14;
  if (_internal_has_double_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_double_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.TypedValue)
  return target;
}

size_t TypedValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.TypedValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string string_val = 1;
    case kStringVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_val());
      break;
    }
    // int64 int_val = 2;
    case kIntVal: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_int_val());
      break;
    }
    // uint64 uint_val = 3;
    case kUintVal: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_uint_val());
      break;
    }
    // bool bool_val = 4;
    case kBoolVal: {
      total_size += 1 + 1;
      break;
    }
    // bytes bytes_val = 5;
    case kBytesVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_val());
      break;
    }
    // float float_val = 6 [deprecated = true];
    case kFloatVal: {
      total_size += 1 + 4;
      break;
    }
    // double double_val = 14;
    case kDoubleVal: {
      total_size += 1 + 8;
      break;
    }
    // .gnmi.Decimal64 decimal_val = 7 [deprecated = true];
    case kDecimalVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.decimal_val_);
      break;
    }
    // .gnmi.ScalarArray leaflist_val = 8;
    case kLeaflistVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.leaflist_val_);
      break;
    }
    // .google.protobuf.Any any_val = 9;
    case kAnyVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.any_val_);
      break;
    }
    // bytes json_val = 10;
    case kJsonVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_json_val());
      break;
    }
    // bytes json_ietf_val = 11;
    case kJsonIetfVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_json_ietf_val());
      break;
    }
    // string ascii_val = 12;
    case kAsciiVal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ascii_val());
      break;
    }
    // bytes proto_bytes = 13;
    case kProtoBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_proto_bytes());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypedValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TypedValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypedValue::GetClassData() const { return &_class_data_; }

void TypedValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TypedValue *>(to)->MergeFrom(
      static_cast<const TypedValue &>(from));
}


void TypedValue::MergeFrom(const TypedValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.TypedValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kStringVal: {
      _internal_set_string_val(from._internal_string_val());
      break;
    }
    case kIntVal: {
      _internal_set_int_val(from._internal_int_val());
      break;
    }
    case kUintVal: {
      _internal_set_uint_val(from._internal_uint_val());
      break;
    }
    case kBoolVal: {
      _internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case kBytesVal: {
      _internal_set_bytes_val(from._internal_bytes_val());
      break;
    }
    case kFloatVal: {
      _internal_set_float_val(from._internal_float_val());
      break;
    }
    case kDoubleVal: {
      _internal_set_double_val(from._internal_double_val());
      break;
    }
    case kDecimalVal: {
      _internal_mutable_decimal_val()->::gnmi::Decimal64::MergeFrom(from._internal_decimal_val());
      break;
    }
    case kLeaflistVal: {
      _internal_mutable_leaflist_val()->::gnmi::ScalarArray::MergeFrom(from._internal_leaflist_val());
      break;
    }
    case kAnyVal: {
      _internal_mutable_any_val()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_any_val());
      break;
    }
    case kJsonVal: {
      _internal_set_json_val(from._internal_json_val());
      break;
    }
    case kJsonIetfVal: {
      _internal_set_json_ietf_val(from._internal_json_ietf_val());
      break;
    }
    case kAsciiVal: {
      _internal_set_ascii_val(from._internal_ascii_val());
      break;
    }
    case kProtoBytes: {
      _internal_set_proto_bytes(from._internal_proto_bytes());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypedValue::CopyFrom(const TypedValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.TypedValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypedValue::IsInitialized() const {
  return true;
}

void TypedValue::InternalSwap(TypedValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypedValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[2]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  element_(arena),
  elem_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_),
      elem_(from.elem_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_origin().empty()) {
    origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_origin(), 
      GetArenaForAllocation());
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.Path)
}

inline void Path::SharedCtor() {
origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:gnmi.Path)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  elem_.Clear();
  origin_.ClearToEmpty();
  target_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string element = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_element();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.Path.element"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_origin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.Path.origin"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.PathElem elem = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.Path.target"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string element = 1 [deprecated = true];
  for (int i = 0, n = this->_internal_element_size(); i < n; i++) {
    const auto& s = this->_internal_element(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.Path.element");
    target = stream->WriteString(1, s, target);
  }

  // string origin = 2;
  if (!this->_internal_origin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_origin().data(), static_cast<int>(this->_internal_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.Path.origin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_origin(), target);
  }

  // repeated .gnmi.PathElem elem = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elem_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_elem(i), target, stream);
  }

  // string target = 4;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.Path.target");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string element = 1 [deprecated = true];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(element_.size());
  for (int i = 0, n = element_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      element_.Get(i));
  }

  // repeated .gnmi.PathElem elem = 3;
  total_size += 1UL * this->_internal_elem_size();
  for (const auto& msg : this->elem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string origin = 2;
  if (!this->_internal_origin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origin());
  }

  // string target = 4;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }

void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Path *>(to)->MergeFrom(
      static_cast<const Path &>(from));
}


void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Path)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  elem_.MergeFrom(from.elem_);
  if (!from._internal_origin().empty()) {
    _internal_set_origin(from._internal_origin());
  }
  if (!from._internal_target().empty()) {
    _internal_set_target(from._internal_target());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
  elem_.InternalSwap(&other->elem_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &origin_, lhs_arena,
      &other->origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_, lhs_arena,
      &other->target_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[3]);
}

// ===================================================================

PathElem_KeyEntry_DoNotUse::PathElem_KeyEntry_DoNotUse() {}
PathElem_KeyEntry_DoNotUse::PathElem_KeyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PathElem_KeyEntry_DoNotUse::MergeFrom(const PathElem_KeyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PathElem_KeyEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[4]);
}

// ===================================================================

class PathElem::_Internal {
 public:
};

PathElem::PathElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  key_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.PathElem)
}
PathElem::PathElem(const PathElem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.MergeFrom(from.key_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.PathElem)
}

inline void PathElem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PathElem::~PathElem() {
  // @@protoc_insertion_point(destructor:gnmi.PathElem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PathElem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PathElem::ArenaDtor(void* object) {
  PathElem* _this = reinterpret_cast< PathElem* >(object);
  (void)_this;
  _this->key_. ~MapField();
}
inline void PathElem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &PathElem::ArenaDtor);
  }
}
void PathElem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PathElem::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.PathElem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathElem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.PathElem.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&key_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathElem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.PathElem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.PathElem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> key = 2;
  if (!this->_internal_key().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "gnmi.PathElem.KeyEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "gnmi.PathElem.KeyEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_key().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_key().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_key().begin();
          it != this->_internal_key().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PathElem_KeyEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_key().begin();
          it != this->_internal_key().end(); ++it) {
        target = PathElem_KeyEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.PathElem)
  return target;
}

size_t PathElem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.PathElem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> key = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_key_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_key().begin();
      it != this->_internal_key().end(); ++it) {
    total_size += PathElem_KeyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathElem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathElem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathElem::GetClassData() const { return &_class_data_; }

void PathElem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathElem *>(to)->MergeFrom(
      static_cast<const PathElem &>(from));
}


void PathElem::MergeFrom(const PathElem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.PathElem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathElem::CopyFrom(const PathElem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.PathElem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathElem::IsInitialized() const {
  return true;
}

void PathElem::InternalSwap(PathElem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  key_.InternalSwap(&other->key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PathElem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[5]);
}

// ===================================================================

class Value::_Internal {
 public:
};

Value::Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gnmi.Value)
}

inline void Value::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:gnmi.Value)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Value::ArenaDtor(void* object) {
  Value* _this = reinterpret_cast< Value* >(object);
  (void)_this;
}
void Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Encoding type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::gnmi::Encoding>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .gnmi.Encoding type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .gnmi.Encoding type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Value::GetClassData() const { return &_class_data_; }

void Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Value *>(to)->MergeFrom(
      static_cast<const Value &>(from));
}


void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Value)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[6]);
}

// ===================================================================

class Error::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& data(const Error* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Error::_Internal::data(const Error* msg) {
  return *msg->data_;
}
void Error::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
Error::Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.Error)
}
Error::Error(const Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:gnmi.Error)
}

inline void Error::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&data_)) + sizeof(code_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:gnmi.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void Error::ArenaDtor(void* object) {
  Error* _this = reinterpret_cast< Error* >(object);
  (void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Error)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.Error.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Error::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Error)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .google.protobuf.Any data = 3;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Error)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Any data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Error::GetClassData() const { return &_class_data_; }

void Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Error *>(to)->MergeFrom(
      static_cast<const Error &>(from));
}


void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Error)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  return true;
}

void Error::InternalSwap(Error* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Error, code_)
      + sizeof(Error::code_)
      - PROTOBUF_FIELD_OFFSET(Error, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[7]);
}

// ===================================================================

class Decimal64::_Internal {
 public:
};

Decimal64::Decimal64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.Decimal64)
}
Decimal64::Decimal64(const Decimal64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&digits_, &from.digits_,
    static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&digits_)) + sizeof(precision_));
  // @@protoc_insertion_point(copy_constructor:gnmi.Decimal64)
}

inline void Decimal64::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&digits_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&precision_) -
    reinterpret_cast<char*>(&digits_)) + sizeof(precision_));
}

Decimal64::~Decimal64() {
  // @@protoc_insertion_point(destructor:gnmi.Decimal64)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Decimal64::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Decimal64::ArenaDtor(void* object) {
  Decimal64* _this = reinterpret_cast< Decimal64* >(object);
  (void)_this;
}
void Decimal64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decimal64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Decimal64::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Decimal64)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&digits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&digits_)) + sizeof(precision_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decimal64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 digits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          digits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Decimal64::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Decimal64)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 digits = 1;
  if (this->_internal_digits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_digits(), target);
  }

  // uint32 precision = 2;
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_precision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Decimal64)
  return target;
}

size_t Decimal64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Decimal64)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 digits = 1;
  if (this->_internal_digits() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_digits());
  }

  // uint32 precision = 2;
  if (this->_internal_precision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_precision());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Decimal64::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Decimal64::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Decimal64::GetClassData() const { return &_class_data_; }

void Decimal64::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Decimal64 *>(to)->MergeFrom(
      static_cast<const Decimal64 &>(from));
}


void Decimal64::MergeFrom(const Decimal64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Decimal64)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_digits() != 0) {
    _internal_set_digits(from._internal_digits());
  }
  if (from._internal_precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Decimal64::CopyFrom(const Decimal64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Decimal64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal64::IsInitialized() const {
  return true;
}

void Decimal64::InternalSwap(Decimal64* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decimal64, precision_)
      + sizeof(Decimal64::precision_)
      - PROTOBUF_FIELD_OFFSET(Decimal64, digits_)>(
          reinterpret_cast<char*>(&digits_),
          reinterpret_cast<char*>(&other->digits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decimal64::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[8]);
}

// ===================================================================

class ScalarArray::_Internal {
 public:
};

ScalarArray::ScalarArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  element_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.ScalarArray)
}
ScalarArray::ScalarArray(const ScalarArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_(from.element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnmi.ScalarArray)
}

inline void ScalarArray::SharedCtor() {
}

ScalarArray::~ScalarArray() {
  // @@protoc_insertion_point(destructor:gnmi.ScalarArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScalarArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScalarArray::ArenaDtor(void* object) {
  ScalarArray* _this = reinterpret_cast< ScalarArray* >(object);
  (void)_this;
}
void ScalarArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScalarArray::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.ScalarArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gnmi.TypedValue element = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScalarArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.ScalarArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnmi.TypedValue element = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_element(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.ScalarArray)
  return target;
}

size_t ScalarArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.ScalarArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.TypedValue element = 1;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScalarArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScalarArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScalarArray::GetClassData() const { return &_class_data_; }

void ScalarArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScalarArray *>(to)->MergeFrom(
      static_cast<const ScalarArray &>(from));
}


void ScalarArray::MergeFrom(const ScalarArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.ScalarArray)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScalarArray::CopyFrom(const ScalarArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.ScalarArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarArray::IsInitialized() const {
  return true;
}

void ScalarArray::InternalSwap(ScalarArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  element_.InternalSwap(&other->element_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[9]);
}

// ===================================================================

class SubscribeRequest::_Internal {
 public:
  static const ::gnmi::SubscriptionList& subscribe(const SubscribeRequest* msg);
  static const ::gnmi::Poll& poll(const SubscribeRequest* msg);
};

const ::gnmi::SubscriptionList&
SubscribeRequest::_Internal::subscribe(const SubscribeRequest* msg) {
  return *msg->request_.subscribe_;
}
const ::gnmi::Poll&
SubscribeRequest::_Internal::poll(const SubscribeRequest* msg) {
  return *msg->request_.poll_;
}
void SubscribeRequest::set_allocated_subscribe(::gnmi::SubscriptionList* subscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (subscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::SubscriptionList>::GetOwningArena(subscribe);
    if (message_arena != submessage_arena) {
      subscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe, submessage_arena);
    }
    set_has_subscribe();
    request_.subscribe_ = subscribe;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscribeRequest.subscribe)
}
void SubscribeRequest::set_allocated_poll(::gnmi::Poll* poll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (poll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Poll>::GetOwningArena(poll);
    if (message_arena != submessage_arena) {
      poll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poll, submessage_arena);
    }
    set_has_poll();
    request_.poll_ = poll;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscribeRequest.poll)
}
void SubscribeRequest::clear_extension() {
  extension_.Clear();
}
SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kSubscribe: {
      _internal_mutable_subscribe()->::gnmi::SubscriptionList::MergeFrom(from._internal_subscribe());
      break;
    }
    case kPoll: {
      _internal_mutable_poll()->::gnmi::Poll::MergeFrom(from._internal_poll());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.SubscribeRequest)
}

inline void SubscribeRequest::SharedCtor() {
clear_has_request();
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:gnmi.SubscribeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void SubscribeRequest::ArenaDtor(void* object) {
  SubscribeRequest* _this = reinterpret_cast< SubscribeRequest* >(object);
  (void)_this;
}
void SubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:gnmi.SubscribeRequest)
  switch (request_case()) {
    case kSubscribe: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.subscribe_;
      }
      break;
    }
    case kPoll: {
      if (GetArenaForAllocation() == nullptr) {
        delete request_.poll_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi.SubscriptionList subscribe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Poll poll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_poll(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi_ext.Extension extension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.SubscriptionList subscribe = 1;
  if (_internal_has_subscribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subscribe(this), target, stream);
  }

  // .gnmi.Poll poll = 3;
  if (_internal_has_poll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::poll(this), target, stream);
  }

  // repeated .gnmi_ext.Extension extension = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.SubscribeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi_ext.Extension extension = 5;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (request_case()) {
    // .gnmi.SubscriptionList subscribe = 1;
    case kSubscribe: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.subscribe_);
      break;
    }
    // .gnmi.Poll poll = 3;
    case kPoll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.poll_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeRequest::GetClassData() const { return &_class_data_; }

void SubscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscribeRequest *>(to)->MergeFrom(
      static_cast<const SubscribeRequest &>(from));
}


void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  switch (from.request_case()) {
    case kSubscribe: {
      _internal_mutable_subscribe()->::gnmi::SubscriptionList::MergeFrom(from._internal_subscribe());
      break;
    }
    case kPoll: {
      _internal_mutable_poll()->::gnmi::Poll::MergeFrom(from._internal_poll());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extension_.InternalSwap(&other->extension_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[10]);
}

// ===================================================================

class Poll::_Internal {
 public:
};

Poll::Poll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:gnmi.Poll)
}
Poll::Poll(const Poll& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnmi.Poll)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Poll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Poll::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Poll::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[11]);
}

// ===================================================================

class SubscribeResponse::_Internal {
 public:
  static const ::gnmi::Notification& update(const SubscribeResponse* msg);
  static const ::gnmi::Error& error(const SubscribeResponse* msg);
};

const ::gnmi::Notification&
SubscribeResponse::_Internal::update(const SubscribeResponse* msg) {
  return *msg->response_.update_;
}
const ::gnmi::Error&
SubscribeResponse::_Internal::error(const SubscribeResponse* msg) {
  return *msg->response_.error_;
}
void SubscribeResponse::set_allocated_update(::gnmi::Notification* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Notification>::GetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    response_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscribeResponse.update)
}
void SubscribeResponse::set_allocated_error(::gnmi::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::gnmi::Error>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    response_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:gnmi.SubscribeResponse.error)
}
void SubscribeResponse::clear_extension() {
  extension_.Clear();
}
SubscribeResponse::SubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.SubscribeResponse)
}
SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kUpdate: {
      _internal_mutable_update()->::gnmi::Notification::MergeFrom(from._internal_update());
      break;
    }
    case kSyncResponse: {
      _internal_set_sync_response(from._internal_sync_response());
      break;
    }
    case kError: {
      _internal_mutable_error()->::gnmi::Error::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.SubscribeResponse)
}

inline void SubscribeResponse::SharedCtor() {
clear_has_response();
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:gnmi.SubscribeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void SubscribeResponse::ArenaDtor(void* object) {
  SubscribeResponse* _this = reinterpret_cast< SubscribeResponse* >(object);
  (void)_this;
}
void SubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:gnmi.SubscribeResponse)
  switch (response_case()) {
    case kUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.update_;
      }
      break;
    }
    case kSyncResponse: {
      // No need to clear
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.error_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void SubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.SubscribeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi.Notification update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sync_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_sync_response(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Error error = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi_ext.Extension extension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.SubscribeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Notification update = 1;
  if (_internal_has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::update(this), target, stream);
  }

  // bool sync_response = 3;
  if (_internal_has_sync_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_sync_response(), target);
  }

  // .gnmi.Error error = 4 [deprecated = true];
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::error(this), target, stream);
  }

  // repeated .gnmi_ext.Extension extension = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.SubscribeResponse)
  return target;
}

size_t SubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.SubscribeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi_ext.Extension extension = 5;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (response_case()) {
    // .gnmi.Notification update = 1;
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.update_);
      break;
    }
    // bool sync_response = 3;
    case kSyncResponse: {
      total_size += 1 + 1;
      break;
    }
    // .gnmi.Error error = 4 [deprecated = true];
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.error_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeResponse::GetClassData() const { return &_class_data_; }

void SubscribeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscribeResponse *>(to)->MergeFrom(
      static_cast<const SubscribeResponse &>(from));
}


void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  switch (from.response_case()) {
    case kUpdate: {
      _internal_mutable_update()->::gnmi::Notification::MergeFrom(from._internal_update());
      break;
    }
    case kSyncResponse: {
      _internal_set_sync_response(from._internal_sync_response());
      break;
    }
    case kError: {
      _internal_mutable_error()->::gnmi::Error::MergeFrom(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  return true;
}

void SubscribeResponse::InternalSwap(SubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extension_.InternalSwap(&other->extension_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[12]);
}

// ===================================================================

class SubscriptionList::_Internal {
 public:
  static const ::gnmi::Path& prefix(const SubscriptionList* msg);
  static const ::gnmi::QOSMarking& qos(const SubscriptionList* msg);
};

const ::gnmi::Path&
SubscriptionList::_Internal::prefix(const SubscriptionList* msg) {
  return *msg->prefix_;
}
const ::gnmi::QOSMarking&
SubscriptionList::_Internal::qos(const SubscriptionList* msg) {
  return *msg->qos_;
}
SubscriptionList::SubscriptionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subscription_(arena),
  use_models_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.SubscriptionList)
}
SubscriptionList::SubscriptionList(const SubscriptionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subscription_(from.subscription_),
      use_models_(from.use_models_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::gnmi::Path(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  if (from._internal_has_qos()) {
    qos_ = new ::gnmi::QOSMarking(*from.qos_);
  } else {
    qos_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:gnmi.SubscriptionList)
}

inline void SubscriptionList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prefix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&prefix_)) + sizeof(encoding_));
}

SubscriptionList::~SubscriptionList() {
  // @@protoc_insertion_point(destructor:gnmi.SubscriptionList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscriptionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
  if (this != internal_default_instance()) delete qos_;
}

void SubscriptionList::ArenaDtor(void* object) {
  SubscriptionList* _this = reinterpret_cast< SubscriptionList* >(object);
  (void)_this;
}
void SubscriptionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscriptionList::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.SubscriptionList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.Clear();
  use_models_.Clear();
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && qos_ != nullptr) {
    delete qos_;
  }
  qos_ = nullptr;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(encoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi.Path prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.Subscription subscription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscription(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .gnmi.QOSMarking qos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_qos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.SubscriptionList.Mode mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::gnmi::SubscriptionList_Mode>(val));
        } else
          goto handle_unusual;
        continue;
      // bool allow_aggregation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          allow_aggregation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.ModelData use_models = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_use_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Encoding encoding = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::gnmi::Encoding>(val));
        } else
          goto handle_unusual;
        continue;
      // bool updates_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          updates_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.SubscriptionList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path prefix = 1;
  if (this->_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // repeated .gnmi.Subscription subscription = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscription_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_subscription(i), target, stream);
  }

  // .gnmi.QOSMarking qos = 4;
  if (this->_internal_has_qos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::qos(this), target, stream);
  }

  // .gnmi.SubscriptionList.Mode mode = 5;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mode(), target);
  }

  // bool allow_aggregation = 6;
  if (this->_internal_allow_aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_allow_aggregation(), target);
  }

  // repeated .gnmi.ModelData use_models = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_use_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_use_models(i), target, stream);
  }

  // .gnmi.Encoding encoding = 8;
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_encoding(), target);
  }

  // bool updates_only = 9;
  if (this->_internal_updates_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_updates_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.SubscriptionList)
  return target;
}

size_t SubscriptionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.SubscriptionList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Subscription subscription = 2;
  total_size += 1UL * this->_internal_subscription_size();
  for (const auto& msg : this->subscription_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.ModelData use_models = 7;
  total_size += 1UL * this->_internal_use_models_size();
  for (const auto& msg : this->use_models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Path prefix = 1;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // .gnmi.QOSMarking qos = 4;
  if (this->_internal_has_qos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *qos_);
  }

  // .gnmi.SubscriptionList.Mode mode = 5;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool allow_aggregation = 6;
  if (this->_internal_allow_aggregation() != 0) {
    total_size += 1 + 1;
  }

  // bool updates_only = 9;
  if (this->_internal_updates_only() != 0) {
    total_size += 1 + 1;
  }

  // .gnmi.Encoding encoding = 8;
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscriptionList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionList::GetClassData() const { return &_class_data_; }

void SubscriptionList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscriptionList *>(to)->MergeFrom(
      static_cast<const SubscriptionList &>(from));
}


void SubscriptionList::MergeFrom(const SubscriptionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.SubscriptionList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subscription_.MergeFrom(from.subscription_);
  use_models_.MergeFrom(from.use_models_);
  if (from._internal_has_prefix()) {
    _internal_mutable_prefix()->::gnmi::Path::MergeFrom(from._internal_prefix());
  }
  if (from._internal_has_qos()) {
    _internal_mutable_qos()->::gnmi::QOSMarking::MergeFrom(from._internal_qos());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_allow_aggregation() != 0) {
    _internal_set_allow_aggregation(from._internal_allow_aggregation());
  }
  if (from._internal_updates_only() != 0) {
    _internal_set_updates_only(from._internal_updates_only());
  }
  if (from._internal_encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionList::CopyFrom(const SubscriptionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.SubscriptionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionList::IsInitialized() const {
  return true;
}

void SubscriptionList::InternalSwap(SubscriptionList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subscription_.InternalSwap(&other->subscription_);
  use_models_.InternalSwap(&other->use_models_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionList, encoding_)
      + sizeof(SubscriptionList::encoding_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionList, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[13]);
}

// ===================================================================

class Subscription::_Internal {
 public:
  static const ::gnmi::Path& path(const Subscription* msg);
};

const ::gnmi::Path&
Subscription::_Internal::path(const Subscription* msg) {
  return *msg->path_;
}
Subscription::Subscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::gnmi::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  ::memcpy(&sample_interval_, &from.sample_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_interval_) -
    reinterpret_cast<char*>(&sample_interval_)) + sizeof(heartbeat_interval_));
  // @@protoc_insertion_point(copy_constructor:gnmi.Subscription)
}

inline void Subscription::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heartbeat_interval_) -
    reinterpret_cast<char*>(&path_)) + sizeof(heartbeat_interval_));
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:gnmi.Subscription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Subscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_;
}

void Subscription::ArenaDtor(void* object) {
  Subscription* _this = reinterpret_cast< Subscription* >(object);
  (void)_this;
}
void Subscription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Subscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.Subscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  ::memset(&sample_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heartbeat_interval_) -
      reinterpret_cast<char*>(&sample_interval_)) + sizeof(heartbeat_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.SubscriptionMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::gnmi::SubscriptionMode>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 sample_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sample_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool suppress_redundant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          suppress_redundant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 heartbeat_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          heartbeat_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Subscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.Subscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path path = 1;
  if (this->_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path(this), target, stream);
  }

  // .gnmi.SubscriptionMode mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // uint64 sample_interval = 3;
  if (this->_internal_sample_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sample_interval(), target);
  }

  // bool suppress_redundant = 4;
  if (this->_internal_suppress_redundant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_suppress_redundant(), target);
  }

  // uint64 heartbeat_interval = 5;
  if (this->_internal_heartbeat_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_heartbeat_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.Subscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gnmi.Path path = 1;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // uint64 sample_interval = 3;
  if (this->_internal_sample_interval() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sample_interval());
  }

  // .gnmi.SubscriptionMode mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool suppress_redundant = 4;
  if (this->_internal_suppress_redundant() != 0) {
    total_size += 1 + 1;
  }

  // uint64 heartbeat_interval = 5;
  if (this->_internal_heartbeat_interval() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_heartbeat_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Subscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subscription::GetClassData() const { return &_class_data_; }

void Subscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Subscription *>(to)->MergeFrom(
      static_cast<const Subscription &>(from));
}


void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_mutable_path()->::gnmi::Path::MergeFrom(from._internal_path());
  }
  if (from._internal_sample_interval() != 0) {
    _internal_set_sample_interval(from._internal_sample_interval());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_suppress_redundant() != 0) {
    _internal_set_suppress_redundant(from._internal_suppress_redundant());
  }
  if (from._internal_heartbeat_interval() != 0) {
    _internal_set_heartbeat_interval(from._internal_heartbeat_interval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  return true;
}

void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subscription, heartbeat_interval_)
      + sizeof(Subscription::heartbeat_interval_)
      - PROTOBUF_FIELD_OFFSET(Subscription, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subscription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[14]);
}

// ===================================================================

class QOSMarking::_Internal {
 public:
};

QOSMarking::QOSMarking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.QOSMarking)
}
QOSMarking::QOSMarking(const QOSMarking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  marking_ = from.marking_;
  // @@protoc_insertion_point(copy_constructor:gnmi.QOSMarking)
}

inline void QOSMarking::SharedCtor() {
marking_ = 0u;
}

QOSMarking::~QOSMarking() {
  // @@protoc_insertion_point(destructor:gnmi.QOSMarking)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QOSMarking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QOSMarking::ArenaDtor(void* object) {
  QOSMarking* _this = reinterpret_cast< QOSMarking* >(object);
  (void)_this;
}
void QOSMarking::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QOSMarking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QOSMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.QOSMarking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marking_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QOSMarking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 marking = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          marking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QOSMarking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.QOSMarking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 marking = 1;
  if (this->_internal_marking() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_marking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.QOSMarking)
  return target;
}

size_t QOSMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.QOSMarking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 marking = 1;
  if (this->_internal_marking() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_marking());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QOSMarking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QOSMarking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QOSMarking::GetClassData() const { return &_class_data_; }

void QOSMarking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QOSMarking *>(to)->MergeFrom(
      static_cast<const QOSMarking &>(from));
}


void QOSMarking::MergeFrom(const QOSMarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.QOSMarking)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_marking() != 0) {
    _internal_set_marking(from._internal_marking());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QOSMarking::CopyFrom(const QOSMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.QOSMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QOSMarking::IsInitialized() const {
  return true;
}

void QOSMarking::InternalSwap(QOSMarking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(marking_, other->marking_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QOSMarking::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[15]);
}

// ===================================================================

class SetRequest::_Internal {
 public:
  static const ::gnmi::Path& prefix(const SetRequest* msg);
};

const ::gnmi::Path&
SetRequest::_Internal::prefix(const SetRequest* msg) {
  return *msg->prefix_;
}
void SetRequest::clear_extension() {
  extension_.Clear();
}
SetRequest::SetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  delete__(arena),
  replace_(arena),
  update_(arena),
  extension_(arena),
  union_replace_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.SetRequest)
}
SetRequest::SetRequest(const SetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      delete__(from.delete__),
      replace_(from.replace_),
      update_(from.update_),
      extension_(from.extension_),
      union_replace_(from.union_replace_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::gnmi::Path(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.SetRequest)
}

inline void SetRequest::SharedCtor() {
prefix_ = nullptr;
}

SetRequest::~SetRequest() {
  // @@protoc_insertion_point(destructor:gnmi.SetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
}

void SetRequest::ArenaDtor(void* object) {
  SetRequest* _this = reinterpret_cast< SetRequest* >(object);
  (void)_this;
}
void SetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.SetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delete__.Clear();
  replace_.Clear();
  update_.Clear();
  extension_.Clear();
  union_replace_.Clear();
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi.Path prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.Path delete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delete_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.Update replace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.Update update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi_ext.Extension extension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.Update union_replace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_union_replace(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.SetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path prefix = 1;
  if (this->_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // repeated .gnmi.Path delete = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delete__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_delete_(i), target, stream);
  }

  // repeated .gnmi.Update replace = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_replace(i), target, stream);
  }

  // repeated .gnmi.Update update = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_update(i), target, stream);
  }

  // repeated .gnmi_ext.Extension extension = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_extension(i), target, stream);
  }

  // repeated .gnmi.Update union_replace = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_union_replace_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_union_replace(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.SetRequest)
  return target;
}

size_t SetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.SetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Path delete = 2;
  total_size += 1UL * this->_internal_delete__size();
  for (const auto& msg : this->delete__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.Update replace = 3;
  total_size += 1UL * this->_internal_replace_size();
  for (const auto& msg : this->replace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.Update update = 4;
  total_size += 1UL * this->_internal_update_size();
  for (const auto& msg : this->update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi_ext.Extension extension = 5;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.Update union_replace = 6;
  total_size += 1UL * this->_internal_union_replace_size();
  for (const auto& msg : this->union_replace_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Path prefix = 1;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetRequest::GetClassData() const { return &_class_data_; }

void SetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetRequest *>(to)->MergeFrom(
      static_cast<const SetRequest &>(from));
}


void SetRequest::MergeFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.SetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  delete__.MergeFrom(from.delete__);
  replace_.MergeFrom(from.replace_);
  update_.MergeFrom(from.update_);
  extension_.MergeFrom(from.extension_);
  union_replace_.MergeFrom(from.union_replace_);
  if (from._internal_has_prefix()) {
    _internal_mutable_prefix()->::gnmi::Path::MergeFrom(from._internal_prefix());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetRequest::CopyFrom(const SetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.SetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRequest::IsInitialized() const {
  return true;
}

void SetRequest::InternalSwap(SetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  delete__.InternalSwap(&other->delete__);
  replace_.InternalSwap(&other->replace_);
  update_.InternalSwap(&other->update_);
  extension_.InternalSwap(&other->extension_);
  union_replace_.InternalSwap(&other->union_replace_);
  swap(prefix_, other->prefix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[16]);
}

// ===================================================================

class SetResponse::_Internal {
 public:
  static const ::gnmi::Path& prefix(const SetResponse* msg);
  static const ::gnmi::Error& message(const SetResponse* msg);
};

const ::gnmi::Path&
SetResponse::_Internal::prefix(const SetResponse* msg) {
  return *msg->prefix_;
}
const ::gnmi::Error&
SetResponse::_Internal::message(const SetResponse* msg) {
  return *msg->message_;
}
void SetResponse::clear_extension() {
  extension_.Clear();
}
SetResponse::SetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  response_(arena),
  extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.SetResponse)
}
SetResponse::SetResponse(const SetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      response_(from.response_),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::gnmi::Path(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::gnmi::Error(*from.message_);
  } else {
    message_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:gnmi.SetResponse)
}

inline void SetResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prefix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&prefix_)) + sizeof(timestamp_));
}

SetResponse::~SetResponse() {
  // @@protoc_insertion_point(destructor:gnmi.SetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
  if (this != internal_default_instance()) delete message_;
}

void SetResponse::ArenaDtor(void* object) {
  SetResponse* _this = reinterpret_cast< SetResponse* >(object);
  (void)_this;
}
void SetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.SetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.Clear();
  extension_.Clear();
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi.Path prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.UpdateResult response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Error message = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi_ext.Extension extension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.SetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path prefix = 1;
  if (this->_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // repeated .gnmi.UpdateResult response = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_response_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_response(i), target, stream);
  }

  // .gnmi.Error message = 3 [deprecated = true];
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // repeated .gnmi_ext.Extension extension = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.SetResponse)
  return target;
}

size_t SetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.SetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.UpdateResult response = 2;
  total_size += 1UL * this->_internal_response_size();
  for (const auto& msg : this->response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi_ext.Extension extension = 5;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Path prefix = 1;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // .gnmi.Error message = 3 [deprecated = true];
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetResponse::GetClassData() const { return &_class_data_; }

void SetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetResponse *>(to)->MergeFrom(
      static_cast<const SetResponse &>(from));
}


void SetResponse::MergeFrom(const SetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.SetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  response_.MergeFrom(from.response_);
  extension_.MergeFrom(from.extension_);
  if (from._internal_has_prefix()) {
    _internal_mutable_prefix()->::gnmi::Path::MergeFrom(from._internal_prefix());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::gnmi::Error::MergeFrom(from._internal_message());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetResponse::CopyFrom(const SetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.SetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResponse::IsInitialized() const {
  return true;
}

void SetResponse::InternalSwap(SetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  response_.InternalSwap(&other->response_);
  extension_.InternalSwap(&other->extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetResponse, timestamp_)
      + sizeof(SetResponse::timestamp_)
      - PROTOBUF_FIELD_OFFSET(SetResponse, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[17]);
}

// ===================================================================

class UpdateResult::_Internal {
 public:
  static const ::gnmi::Path& path(const UpdateResult* msg);
  static const ::gnmi::Error& message(const UpdateResult* msg);
};

const ::gnmi::Path&
UpdateResult::_Internal::path(const UpdateResult* msg) {
  return *msg->path_;
}
const ::gnmi::Error&
UpdateResult::_Internal::message(const UpdateResult* msg) {
  return *msg->message_;
}
UpdateResult::UpdateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.UpdateResult)
}
UpdateResult::UpdateResult(const UpdateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    path_ = new ::gnmi::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::gnmi::Error(*from.message_);
  } else {
    message_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:gnmi.UpdateResult)
}

inline void UpdateResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&path_)) + sizeof(op_));
}

UpdateResult::~UpdateResult() {
  // @@protoc_insertion_point(destructor:gnmi.UpdateResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete message_;
}

void UpdateResult::ArenaDtor(void* object) {
  UpdateResult* _this = reinterpret_cast< UpdateResult* >(object);
  (void)_this;
}
void UpdateResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.UpdateResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(op_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Path path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Error message = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gnmi.UpdateResult.Operation op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::gnmi::UpdateResult_Operation>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.UpdateResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1 [deprecated = true];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .gnmi.Path path = 2;
  if (this->_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::path(this), target, stream);
  }

  // .gnmi.Error message = 3 [deprecated = true];
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  // .gnmi.UpdateResult.Operation op = 4;
  if (this->_internal_op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.UpdateResult)
  return target;
}

size_t UpdateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.UpdateResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gnmi.Path path = 2;
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .gnmi.Error message = 3 [deprecated = true];
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // int64 timestamp = 1 [deprecated = true];
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .gnmi.UpdateResult.Operation op = 4;
  if (this->_internal_op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateResult::GetClassData() const { return &_class_data_; }

void UpdateResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateResult *>(to)->MergeFrom(
      static_cast<const UpdateResult &>(from));
}


void UpdateResult::MergeFrom(const UpdateResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.UpdateResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_mutable_path()->::gnmi::Path::MergeFrom(from._internal_path());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::gnmi::Error::MergeFrom(from._internal_message());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_op() != 0) {
    _internal_set_op(from._internal_op());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateResult::CopyFrom(const UpdateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.UpdateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResult::IsInitialized() const {
  return true;
}

void UpdateResult::InternalSwap(UpdateResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateResult, op_)
      + sizeof(UpdateResult::op_)
      - PROTOBUF_FIELD_OFFSET(UpdateResult, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[18]);
}

// ===================================================================

class GetRequest::_Internal {
 public:
  static const ::gnmi::Path& prefix(const GetRequest* msg);
};

const ::gnmi::Path&
GetRequest::_Internal::prefix(const GetRequest* msg) {
  return *msg->prefix_;
}
void GetRequest::clear_extension() {
  extension_.Clear();
}
GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  path_(arena),
  use_models_(arena),
  extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      path_(from.path_),
      use_models_(from.use_models_),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prefix()) {
    prefix_ = new ::gnmi::Path(*from.prefix_);
  } else {
    prefix_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&type_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:gnmi.GetRequest)
}

inline void GetRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prefix_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&prefix_)) + sizeof(encoding_));
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:gnmi.GetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete prefix_;
}

void GetRequest::ArenaDtor(void* object) {
  GetRequest* _this = reinterpret_cast< GetRequest* >(object);
  (void)_this;
}
void GetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.GetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.Clear();
  use_models_.Clear();
  extension_.Clear();
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&type_)) + sizeof(encoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gnmi.Path prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.Path path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .gnmi.GetRequest.DataType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::gnmi::GetRequest_DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Encoding encoding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::gnmi::Encoding>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.ModelData use_models = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_use_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi_ext.Extension extension = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.GetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gnmi.Path prefix = 1;
  if (this->_internal_has_prefix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prefix(this), target, stream);
  }

  // repeated .gnmi.Path path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_path(i), target, stream);
  }

  // .gnmi.GetRequest.DataType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .gnmi.Encoding encoding = 5;
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_encoding(), target);
  }

  // repeated .gnmi.ModelData use_models = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_use_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_use_models(i), target, stream);
  }

  // repeated .gnmi_ext.Extension extension = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.GetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Path path = 2;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.ModelData use_models = 6;
  total_size += 1UL * this->_internal_use_models_size();
  for (const auto& msg : this->use_models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi_ext.Extension extension = 7;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Path prefix = 1;
  if (this->_internal_has_prefix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prefix_);
  }

  // .gnmi.GetRequest.DataType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .gnmi.Encoding encoding = 5;
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRequest::GetClassData() const { return &_class_data_; }

void GetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetRequest *>(to)->MergeFrom(
      static_cast<const GetRequest &>(from));
}


void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.GetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  path_.MergeFrom(from.path_);
  use_models_.MergeFrom(from.use_models_);
  extension_.MergeFrom(from.extension_);
  if (from._internal_has_prefix()) {
    _internal_mutable_prefix()->::gnmi::Path::MergeFrom(from._internal_prefix());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  path_.InternalSwap(&other->path_);
  use_models_.InternalSwap(&other->use_models_);
  extension_.InternalSwap(&other->extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRequest, encoding_)
      + sizeof(GetRequest::encoding_)
      - PROTOBUF_FIELD_OFFSET(GetRequest, prefix_)>(
          reinterpret_cast<char*>(&prefix_),
          reinterpret_cast<char*>(&other->prefix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[19]);
}

// ===================================================================

class GetResponse::_Internal {
 public:
  static const ::gnmi::Error& error(const GetResponse* msg);
};

const ::gnmi::Error&
GetResponse::_Internal::error(const GetResponse* msg) {
  return *msg->error_;
}
void GetResponse::clear_extension() {
  extension_.Clear();
}
GetResponse::GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notification_(arena),
  extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notification_(from.notification_),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::gnmi::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.GetResponse)
}

inline void GetResponse::SharedCtor() {
error_ = nullptr;
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:gnmi.GetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void GetResponse::ArenaDtor(void* object) {
  GetResponse* _this = reinterpret_cast< GetResponse* >(object);
  (void)_this;
}
void GetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.GetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_.Clear();
  extension_.Clear();
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gnmi.Notification notification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notification(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .gnmi.Error error = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi_ext.Extension extension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.GetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnmi.Notification notification = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notification_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notification(i), target, stream);
  }

  // .gnmi.Error error = 2 [deprecated = true];
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // repeated .gnmi_ext.Extension extension = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.GetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.Notification notification = 1;
  total_size += 1UL * this->_internal_notification_size();
  for (const auto& msg : this->notification_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi_ext.Extension extension = 3;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gnmi.Error error = 2 [deprecated = true];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetResponse::GetClassData() const { return &_class_data_; }

void GetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetResponse *>(to)->MergeFrom(
      static_cast<const GetResponse &>(from));
}


void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.GetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  notification_.MergeFrom(from.notification_);
  extension_.MergeFrom(from.extension_);
  if (from._internal_has_error()) {
    _internal_mutable_error()->::gnmi::Error::MergeFrom(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  notification_.InternalSwap(&other->notification_);
  extension_.InternalSwap(&other->extension_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[20]);
}

// ===================================================================

class CapabilityRequest::_Internal {
 public:
};

void CapabilityRequest::clear_extension() {
  extension_.Clear();
}
CapabilityRequest::CapabilityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.CapabilityRequest)
}
CapabilityRequest::CapabilityRequest(const CapabilityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gnmi.CapabilityRequest)
}

inline void CapabilityRequest::SharedCtor() {
}

CapabilityRequest::~CapabilityRequest() {
  // @@protoc_insertion_point(destructor:gnmi.CapabilityRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CapabilityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CapabilityRequest::ArenaDtor(void* object) {
  CapabilityRequest* _this = reinterpret_cast< CapabilityRequest* >(object);
  (void)_this;
}
void CapabilityRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapabilityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CapabilityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.CapabilityRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extension_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapabilityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gnmi_ext.Extension extension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CapabilityRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.CapabilityRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnmi_ext.Extension extension = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.CapabilityRequest)
  return target;
}

size_t CapabilityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.CapabilityRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi_ext.Extension extension = 1;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CapabilityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CapabilityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CapabilityRequest::GetClassData() const { return &_class_data_; }

void CapabilityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CapabilityRequest *>(to)->MergeFrom(
      static_cast<const CapabilityRequest &>(from));
}


void CapabilityRequest::MergeFrom(const CapabilityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.CapabilityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extension_.MergeFrom(from.extension_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CapabilityRequest::CopyFrom(const CapabilityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.CapabilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilityRequest::IsInitialized() const {
  return true;
}

void CapabilityRequest::InternalSwap(CapabilityRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extension_.InternalSwap(&other->extension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CapabilityRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[21]);
}

// ===================================================================

class CapabilityResponse::_Internal {
 public:
};

void CapabilityResponse::clear_extension() {
  extension_.Clear();
}
CapabilityResponse::CapabilityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  supported_models_(arena),
  supported_encodings_(arena),
  extension_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.CapabilityResponse)
}
CapabilityResponse::CapabilityResponse(const CapabilityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supported_models_(from.supported_models_),
      supported_encodings_(from.supported_encodings_),
      extension_(from.extension_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gnmi_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gnmi_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gnmi_version().empty()) {
    gnmi_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gnmi_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.CapabilityResponse)
}

inline void CapabilityResponse::SharedCtor() {
gnmi_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gnmi_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CapabilityResponse::~CapabilityResponse() {
  // @@protoc_insertion_point(destructor:gnmi.CapabilityResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CapabilityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gnmi_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CapabilityResponse::ArenaDtor(void* object) {
  CapabilityResponse* _this = reinterpret_cast< CapabilityResponse* >(object);
  (void)_this;
}
void CapabilityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CapabilityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CapabilityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.CapabilityResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_models_.Clear();
  supported_encodings_.Clear();
  extension_.Clear();
  gnmi_version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapabilityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gnmi.ModelData supported_models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supported_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi.Encoding supported_encodings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_supported_encodings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_supported_encodings(static_cast<::gnmi::Encoding>(val));
        } else
          goto handle_unusual;
        continue;
      // string gNMI_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gnmi_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.CapabilityResponse.gNMI_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gnmi_ext.Extension extension = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CapabilityResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.CapabilityResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gnmi.ModelData supported_models = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supported_models_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_supported_models(i), target, stream);
  }

  // repeated .gnmi.Encoding supported_encodings = 2;
  {
    int byte_size = _supported_encodings_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, supported_encodings_, byte_size, target);
    }
  }

  // string gNMI_version = 3;
  if (!this->_internal_gnmi_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gnmi_version().data(), static_cast<int>(this->_internal_gnmi_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.CapabilityResponse.gNMI_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gnmi_version(), target);
  }

  // repeated .gnmi_ext.Extension extension = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_extension(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.CapabilityResponse)
  return target;
}

size_t CapabilityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.CapabilityResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gnmi.ModelData supported_models = 1;
  total_size += 1UL * this->_internal_supported_models_size();
  for (const auto& msg : this->supported_models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .gnmi.Encoding supported_encodings = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_encodings_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_supported_encodings(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _supported_encodings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .gnmi_ext.Extension extension = 4;
  total_size += 1UL * this->_internal_extension_size();
  for (const auto& msg : this->extension_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gNMI_version = 3;
  if (!this->_internal_gnmi_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gnmi_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CapabilityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CapabilityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CapabilityResponse::GetClassData() const { return &_class_data_; }

void CapabilityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CapabilityResponse *>(to)->MergeFrom(
      static_cast<const CapabilityResponse &>(from));
}


void CapabilityResponse::MergeFrom(const CapabilityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.CapabilityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  supported_models_.MergeFrom(from.supported_models_);
  supported_encodings_.MergeFrom(from.supported_encodings_);
  extension_.MergeFrom(from.extension_);
  if (!from._internal_gnmi_version().empty()) {
    _internal_set_gnmi_version(from._internal_gnmi_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CapabilityResponse::CopyFrom(const CapabilityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.CapabilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilityResponse::IsInitialized() const {
  return true;
}

void CapabilityResponse::InternalSwap(CapabilityResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  supported_models_.InternalSwap(&other->supported_models_);
  supported_encodings_.InternalSwap(&other->supported_encodings_);
  extension_.InternalSwap(&other->extension_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gnmi_version_, lhs_arena,
      &other->gnmi_version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CapabilityResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[22]);
}

// ===================================================================

class ModelData::_Internal {
 public:
};

ModelData::ModelData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:gnmi.ModelData)
}
ModelData::ModelData(const ModelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  organization_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_organization().empty()) {
    organization_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:gnmi.ModelData)
}

inline void ModelData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
organization_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModelData::~ModelData() {
  // @@protoc_insertion_point(destructor:gnmi.ModelData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelData::ArenaDtor(void* object) {
  ModelData* _this = reinterpret_cast< ModelData* >(object);
  (void)_this;
}
void ModelData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelData::Clear() {
// @@protoc_insertion_point(message_clear_start:gnmi.ModelData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  organization_.ClearToEmpty();
  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.ModelData.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string organization = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_organization();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.ModelData.organization"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gnmi.ModelData.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gnmi.ModelData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.ModelData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string organization = 2;
  if (!this->_internal_organization().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization().data(), static_cast<int>(this->_internal_organization().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.ModelData.organization");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_organization(), target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gnmi.ModelData.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gnmi.ModelData)
  return target;
}

size_t ModelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gnmi.ModelData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string organization = 2;
  if (!this->_internal_organization().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelData::GetClassData() const { return &_class_data_; }

void ModelData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelData *>(to)->MergeFrom(
      static_cast<const ModelData &>(from));
}


void ModelData::MergeFrom(const ModelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gnmi.ModelData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_organization().empty()) {
    _internal_set_organization(from._internal_organization());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelData::CopyFrom(const ModelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gnmi.ModelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelData::IsInitialized() const {
  return true;
}

void ModelData::InternalSwap(ModelData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_, lhs_arena,
      &other->organization_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_gnmi_2eproto_getter, &descriptor_table_gnmi_2eproto_once,
      file_level_metadata_gnmi_2eproto[23]);
}
const std::string gnmi_service_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  gnmi_service(kGnmiServiceFieldNumber, gnmi_service_default);

// @@protoc_insertion_point(namespace_scope)
}  // namespace gnmi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gnmi::Notification* Arena::CreateMaybeMessage< ::gnmi::Notification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Update* Arena::CreateMaybeMessage< ::gnmi::Update >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Update >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::TypedValue* Arena::CreateMaybeMessage< ::gnmi::TypedValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::TypedValue >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Path* Arena::CreateMaybeMessage< ::gnmi::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::PathElem_KeyEntry_DoNotUse* Arena::CreateMaybeMessage< ::gnmi::PathElem_KeyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::PathElem_KeyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::PathElem* Arena::CreateMaybeMessage< ::gnmi::PathElem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::PathElem >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Value* Arena::CreateMaybeMessage< ::gnmi::Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Error* Arena::CreateMaybeMessage< ::gnmi::Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Error >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Decimal64* Arena::CreateMaybeMessage< ::gnmi::Decimal64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Decimal64 >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::ScalarArray* Arena::CreateMaybeMessage< ::gnmi::ScalarArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::ScalarArray >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::SubscribeRequest* Arena::CreateMaybeMessage< ::gnmi::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Poll* Arena::CreateMaybeMessage< ::gnmi::Poll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Poll >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::SubscribeResponse* Arena::CreateMaybeMessage< ::gnmi::SubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::SubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::SubscriptionList* Arena::CreateMaybeMessage< ::gnmi::SubscriptionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::SubscriptionList >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::Subscription* Arena::CreateMaybeMessage< ::gnmi::Subscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::Subscription >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::QOSMarking* Arena::CreateMaybeMessage< ::gnmi::QOSMarking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::QOSMarking >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::SetRequest* Arena::CreateMaybeMessage< ::gnmi::SetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::SetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::SetResponse* Arena::CreateMaybeMessage< ::gnmi::SetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::SetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::UpdateResult* Arena::CreateMaybeMessage< ::gnmi::UpdateResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::UpdateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::GetRequest* Arena::CreateMaybeMessage< ::gnmi::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::GetResponse* Arena::CreateMaybeMessage< ::gnmi::GetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::CapabilityRequest* Arena::CreateMaybeMessage< ::gnmi::CapabilityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::CapabilityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::CapabilityResponse* Arena::CreateMaybeMessage< ::gnmi::CapabilityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::CapabilityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gnmi::ModelData* Arena::CreateMaybeMessage< ::gnmi::ModelData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gnmi::ModelData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
